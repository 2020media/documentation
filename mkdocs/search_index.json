{
    "docs": [
        {
            "location": "/", 
            "text": "Aegir Hosting System\n\n\nAegir is a powerful hosting system that can create, deploy and manage Drupal\nsites. Support for hosting CiviCRM was recently added, with Wordpress support\ncoming soon.\n\n\nWith Aegir \ninstalled\n, you can \nsetup a\nsite\n in just a few clicks. Aegir\ncreates the web server's site configuration files, the site's database, runs\nthe installation process and reloads the relevant services, all automatically.\n\n\nThis documentation will help you understand Aegir, how to get it up and running, as well as how to use it on an ongoing basis.", 
            "title": "Home"
        }, 
        {
            "location": "/#aegir-hosting-system", 
            "text": "Aegir is a powerful hosting system that can create, deploy and manage Drupal\nsites. Support for hosting CiviCRM was recently added, with Wordpress support\ncoming soon.  With Aegir  installed , you can  setup a\nsite  in just a few clicks. Aegir\ncreates the web server's site configuration files, the site's database, runs\nthe installation process and reloads the relevant services, all automatically.  This documentation will help you understand Aegir, how to get it up and running, as well as how to use it on an ongoing basis.", 
            "title": "Aegir Hosting System"
        }, 
        {
            "location": "/quick-start/", 
            "text": "Quick Start Guide\n\n\nOn a recent Debian or Ubuntu server (with a fully qualified domain name), run the following commands:\n\n\n$ sudo mysql_secure_installation\n$ echo \"deb http://debian.aegirproject.org stable main\" | sudo tee -a /etc/apt/sources.list.d/aegir-stable.list\n$ curl http://debian.aegirproject.org/key.asc | sudo apt-key add -\n$ sudo apt-get update\n$ sudo apt-get install aegir3\n\n\n\nSee the \nInstallation Guide\n for more details, or guidance on installing on other operating systems.", 
            "title": "Quick start"
        }, 
        {
            "location": "/quick-start/#quick-start-guide", 
            "text": "On a recent Debian or Ubuntu server (with a fully qualified domain name), run the following commands:  $ sudo mysql_secure_installation\n$ echo \"deb http://debian.aegirproject.org stable main\" | sudo tee -a /etc/apt/sources.list.d/aegir-stable.list\n$ curl http://debian.aegirproject.org/key.asc | sudo apt-key add -\n$ sudo apt-get update\n$ sudo apt-get install aegir3  See the  Installation Guide  for more details, or guidance on installing on other operating systems.", 
            "title": "Quick Start Guide"
        }, 
        {
            "location": "/install/", 
            "text": "Installation Guide\n\n\n\n\n\n\nInstallation Guide\n\n\nSystem Requirements\n\n\nYour own server\n\n\nA Unix-based operating system\n\n\nWeb server\n\n\nPHP\n\n\nDatabase server\n\n\nMail transfer agent\n\n\nA Fully Qualified Domain Name (FQDN)\n\n\nOther utilities: sudo, rsync, git and unzip\n\n\nNo conflicting Control Panels\n\n\nRequirements of Drupal distributions\n\n\n\n\n\n\nDebian/Ubuntu\n\n\n1. Ensure requirements are satisfied\n\n\n2. Add project repositories\n\n\n3. Add archive key to your keyring\n\n\n4. DNS configuration\n\n\n5. (Optional) Manual installation of MySQL\n\n\n6. (Optional) Install with Nginx\n\n\n7. Install Aegir\n\n\n7.1 Custom options\n\n\n7.1.1 Custom make files\n\n\n\n\n\n\n\n\n\n\n8. Troubleshooting the install\n\n\n\n\n\n\nManual Installation\n\n\n1. Review System Requirements\n\n\n2. Install system requirements\n\n\n3. Configure system requirements\n\n\n3.1. Create the Aegir user\n\n\n3.2. Webserver configuration\n\n\n3.2.1. Apache configuration\n\n\n3.2.1.1. Ubuntu 14.04+\n\n\n\n\n\n\n3.2.2. Nginx configuration\n\n\n\n\n\n\n3.3. PHP configuration\n\n\n3.4. Sudo configuration\n\n\n3.5. DNS configuration\n\n\n3.6. Database configuration\n\n\n3.6.1. OS-specific configurations\n\n\n\n\n\n\n\n\n\n\n4. Install Aegir components\n\n\n4.1. Install drush\n\n\n4.2. Stop! Now become the Aegir user\n\n\n4.3. Install provision\n\n\n4.4. Running hostmaster-install\n\n\n4.4.1. Arch Linux configuration\n\n\n\n\n\n\n\n\n\n\n5. Install the Hosting Queue Daemon\n\n\n5.1. Install the init script in place\n\n\n5.2. Setup symlinks and runlevels\n\n\n5.3. Start the daemon\n\n\n\n\n\n\n6. Checkpoint / Finished!\n\n\n\n\n\n\nInstallation Trouble-shooting\n\n\nVerify and install through SSH\n\n\nNameVirtualHost *:80 has no VirtualHosts\n\n\nMaking sure it works\n\n\nAccess by the server's physical IP address\n\n\nCentOS firewall settings\n\n\nCentOS cron requires restart?!\n\n\nCentOS aegir.conf permission denied\n\n\nSolaris cron issues\n\n\nDrush execution path issues\n\n\nAPC issues\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAegir requires some special permissions to your server in order to automate\nsome configurations. For example, when a new site is installed, the web server\nwill be automatically configured (vhost) and restarted. Therefore Aegir cannot\nbe installed on a shared hosting environment. Consult the \nsystem\nrequirements\n to ensure your server(s) are up to the task.\n\n\nSystem Requirements\n\n\nA system capable of running Drupal\n\n\nThe Aegir system is entirely Drupal based, and has the same base requirements that Drupal does (with the exception that it won't run on Windows). See more notes on Unix and LAMP/LEMP requirements below.\n\n\nYour own server\n\n\nThe low level of access required to be able to configure and run this system is very far beyond what is commonly available to users with shared hosting. A VPS from any popular provider such as Linode, Rackspace, Slicehost, Amazon EC, etc. will do fine. You will need root access to the server and the server needs to be dedicated to Aegir.\n\n\nA Unix-based operating system\n\n\nAegir must run on some flavour of UNIX, because the majority of functionality in this system occurs in the back-end, through command line scripting. There are also several features (such as symlinks), that are not available to users on Windows. There are no plans currently to add Windows support. See the operating system support page for more information.\n\n\nWeb server\n\n\nYou will need at least one dedicated web server, running Apache. We generally work with Apache 2. Aegir also supports the Nginx web server, but requires at least version 0.7.66 or newer. Since Nginx doesn't provide php-cgi or php-fpm (recommended) modules, you will need to install and run php-fpm server separately. You can find useful examples and tips in the third party Barracuda installer available at the barracuda project page.\nN.B.: This third party installer is not supported by the core Aegir developers, but you can find helpful community support at the boa group.\n\n\nSee also \ninstalling with Nginx\n.\n\n\nPHP\n\n\nAegir depends on Drush 6.5.0 or later, which requires PHP 5.3 or higher. You also need to have the command-line version of PHP to run Drush properly, and the MySQL extensions for PHP.\n\n\nDatabase server\n\n\nYou will require a database server, obviously. Aegir currently only supports MySQL and MariaDB. It is preferable to use a dedicated (not shared-hosting) server since Aegir will create database users and will require the use of a MySQL root user.\n\n\nMail transfer agent\n\n\nAegir requires an MTA (Mail Transfer Agent) installed on your webserver in order to be able to install new sites to your new platform. If you don't have an MTA, the site installation will fail with message like \"could not send email\". Additional messages will show that site has been removed because of this problem. To remedy the situation simply install an MTA like sendmail, postfix, or exim and do the minimal configuration.\n\n\nA Fully Qualified Domain Name (FQDN)\n\n\nFor example, \naegir.example.com\n. The hostname returned by the commands \nhostname -f\n and \nuname -a\n must resolve to the IP address of your server. After setting up your FQDN you must restart your server with a \nreboot\n command so your changes take effect. Note that newly created domain name usually take 24 to 48 hours to fully start working. This period, called propagation, is the projected length of time it takes for root name servers and cache records across the entire web to be updated with your website's DNS information.\n\n\nOther utilities: sudo, rsync, git and unzip\n\n\nAegir installs itself via a Drush Make makefile that downloads via git if you want the bleeding edge code, or via wget if you want the latest official release. If you want the latest development version, and don't have the git program you will need to install it on the server.\nThe jQueryUI library is used in the Aegir UI, unzip is required to extract it. Sudo is required to allow the aegir user the limited privilege to restart the webserver when required. Rsync is used to sync files to remote servers.\n\n\nNo conflicting Control Panels\n\n\nOther popular control panels such as Plesk, cPanel etc, are designed to manage all aspects of Apache configuration and other areas that Aegir also is intended to be used for.\nRunning Aegir alongside such control panels is not supported and very likely may cause you problems or difficulties installing or running Aegir. Filing bug reports that are caused by interference by another control panel will likely be closed unless the problem can be fixed without causing problems for other Aegir users. Proceed at your own risk!\n\n\nRequirements of Drupal distributions\n\n\nSome Drupal distributions, such as OpenAtrium, are specialized products that may contain unique prerequisites for optimal performance. Such examples may include raising the php-cli program's memory_limit to something higher than 64M.\nPlease note that this is not a requirement of Aegir but of the distribution you are trying to install a site on. Thus the Aegir documentation may not officially 'require' such performance settings, but be aware that Aegir may report errors if the system was under-resourced to complete such a task.\n\n\nDebian/Ubuntu\n\n\nThese are the installation instructions that are recommended on Debian. Aegir dependencies (Apache, MySQL, PHP...) are also automatically installed.\n\n\nIf you wish to install Debian packages over an existing manual install, it's possible. See \nthe Debian upgrade procedures\n.\n\n\nDebian packages are uploaded to http://debian.aegirproject.org/ shortly after a release. We eventually want to upload those packages to the official archives, but this will take some adaptation and time to sponsor the packages in.\n\n\n1. Ensure requirements are satisfied\n\n\nHere's what you'll need to install Aegir on a Debian or Ubuntu system:\n\n\n\n\nBasic Linux system administration skills\n\n\nRoot access to your server\n\n\nAn up-to-date system and applications (\nsudo aptitude update \n sudo aptitude safe-upgrade\n)\n\n\n\n\nSee \nsystem-requirements\n\n\n2. Add project repositories\n\n\nUse this command to add the Aegir package \"Software Source\" repository to your system:\n\n\necho \"deb http://debian.aegirproject.org stable main\" | sudo tee -a /etc/apt/sources.list.d/aegir-stable.list\n\n\n\nTo install a customized Debian package, see the \ndeveloper instructions for the debian package\n. Other distributions are available for courageous people that want to try development versions.\n\n\ndev note\n: to install the development version of Aegir, you can use the \nunstable\n or \ntesting\n distribution above.\n\n\n3. Add archive key to your keyring\n\n\nThis repository self-signs packages uploaded to it (and packages uploaded are verified against a whitelist of trusted uploaders) using OpenPGP (GnuPG, to be more precise).\n\n\nUse these commands to download and add the repository's PGP key, then update the package list on your system:\n\n\nwget -q http://debian.aegirproject.org/key.asc -O- | sudo apt-key add -\nsudo apt-get update\n\n\n\n4. DNS configuration\n\n\nAegir requires a properly configured \"FQDN\" (Fully Qualified Domain Name) be assigned to the machine. In practice, this means that the hostname returned by the \nhostname -f\n and \nuname -n\n shell commands should resolve to the IP address for this server, and vice versa, with the \nresolveip\n command (included with the mysql-server package).\n\n\nFor Ubuntu, /etc/hosts should have entries that look like:\n\n\n::1 host.example.com host ip6-localhost ip6-loopback\n127.0.0.1 host.example.com host localhost\n123.123.123.123 host.example.com host localhost\n\n\n\nTo set this up in a virtual machine (e.g. Virtualbox), here are the steps:\n\n\n\n\nCreate a new VM\n\n\nGo to settings-\nnetwork.  Enable Adapter 2, and set to \"host-only\"\n\n\nInstall Ubuntu.  Set hostname as FQDN during install\n\n\nYou may need to add the lines \nauto eth1\n and \niface eth1 inet dhcp\n to /etc/network/interfaces\n\n\n\n\nIf you have a virtual machine already setup and want to change the FDQN:\n\n\n\n\nchange /etc/hostname using: \nsudo hostname NEW_NAME\n\n\nchange /etc/hosts using: \nsudo nano /etc/hosts\n and change name\n\n\nreboot and test \nhostname -f\n, \nuname -n\n, \nresolveip NEW_NAME\n, \nresolveip IP\n\n\nYMMV - Your Mileage May Vary\n\n\n\n\n5. (Optional) Manual installation of MySQL\n\n\nPlease note that Ubuntu 12.04 LTS installs, by default, an insecure MySQL installation that contains an anonymous user grant, allowing anyone to login without a password. This breaks Aegir functionality.\n\n\nIf you are running Ubuntu 12.04, you should install MySQL manually, and then ensure it is installed securely:\n\n\n$ sudo apt-get install mysql-server\n$ sudo mysql_secure_installation\n\n\n\nWhen running 'sudo mysql_secure_installation', answer 'Y' to 'Remove anonymous users?'\n\n\nBy default, a MySQL installation has an anonymous user, allowing anyone\nto log into MySQL without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] Y\n ... Success!\n\n\n\nNow you can proceed with installing Aegir below.\n\n\n6. (Optional) Install with Nginx\n\n\nIf you want to use Nginx instead of Apache, you'll have to explicitely tell apt-get:\n\n\n$ sudo apt-get install aegir3 nginx php5-fpm\n\n\n\nThis is because the package expects Apache2 by default.\n\n\n7. Install Aegir\n\n\nTo install Aegir version 3, frontend and backend, use the following command:\n\n\n$ sudo apt-get install aegir3\n\n\n\nThis will prompt you for the required information (MySQL password, Postfix configuration...) and go ahead with the install.\n\n\nDuring the Postfix configuration, the following options appear: \"No configuration, Internet site, Internet with smarthost, Satellite system, Local only\". That first text screen only allows to use the tab key to select \"OK\", and then the enter key to display a second screen where you can select one of the choices. The default is \"Internet site\", useful in most cases to enable the server to send email messages, for example to the admin.\n\n\nAt the end of the installation, you will receive an email message or, if the user \"aegir\" has been assigned with a local email account during the installation, the file /var/mail/aegir will contain the message. It will include a one-time login to your new Aegir control panel, that is a URL to copy into your browser so that you can set the password for the \"admin\" user.\n\n\n7.1 Custom options\n\n\nThe Debian packages allow for a number of options to be set for the various packages:\n\n\n\n\naegir3-provision\n\n\naegir3-hostmaster\n\n\naegir-cluster-slave\n\n\n\n\nFor example, to create the hostmaster platform as working copies (Git checkouts for all modules) you can set the aegir/working-copy option thusly:\n\n\n$ echo \"aegir3-hostmaster aegir/working-copy boolean true\" | sudo debconf-set-selections\n\n\n\nNote that \ndebconf-set-selections\n is part of the \ndebconf-utils\n package.\n\n\n7.1.1 Custom make files\n\n\nIf you have your own Drupal make file, you can go ahead with the above process, but change the make file to the one you want:\n\n\n$ echo \"aegir3-hostmaster aegir/makefile string /var/aegir/makefiles/aegir/aegir-custom.make | sudo debconf-set-selections\n$ sudo apt-get install aegir3\n\n\n\nThis allows you to specify the makefile path for your custom distribution of Aegir. To maintain these customizations, you'll need to ensure you do the same when upgrading.\n\n\nAn example custom Aegir makefile could look like \nthis\n.\n\n\n8. Troubleshooting the install\n\n\nTo make the install smoother, the install command is run without much debugging information, which can make diagnostics pretty hard. For this, there's a special environment variable you can set that will trigger debugging output. Install aegir with this:\n\n\n$ env DPKG_DEBUG=developer sudo apt-get install aegir\n\n\n\nYou can build your own Debian packages from our repositories using \nthese instructions\n.\n\n\nAlso see the general \nInstallation Trouble-shooting\n section below.\n\n\nManual Installation\n\n\nThis is the process you need to follow if Aegir doesn't have packages for your distribution. We currently provide \ndebian\n packages and others should be coming, if you help! This manual assumes you are fairly familiar with the UNIX commandline interface, but should be possible to follow through if you copy and paste faithfully \nall\n steps of the procedure.\n\n\nA note on supported systems:\n\n\nThese instructions provide example commands for a Debian-like distribution, but should be fairly easy to adapt to other environments. This document is meant as a canonical reference that should work on every supported platform. It can also be used for people porting Aegir to new platforms or installing on alien platform for which Aegir is not yet packaged.\n\n\nIt currently contains special recommendations for CentOS, RHEL 6, Arch Linux and Solaris. Users of those platforms are also strongly encouraged to review the :doc:\ncommon-problems\n that occur on those platforms. Aegir is also known to be installable (and was developed partly on) Mac OS X, but that process is so obtuse that it has a \nseparate page\n for the first part of the manual (up to Install Aegir components).\n\n\nInstalling Aegir may seem daunting at first (which is why we provide automated installs through packages), but once you get around it, it's fairly simple.  Note that these instructions setup a complete Aegir system. If you want to only setup a new remote web/db server, it should be sufficient to install the system requirements (step 1), configure them (step 2) and follow the \nRemote server how-to\n.\n\n\n1. Review System Requirements\n\n\nSee the \nSystem Requirements\n\n\n2. Install system requirements\n\n\nTo install the required components, use your system's package manager. For Debian based systems this would look like:\n\n\n$ sudo apt-get install apache2 php5 php5-cli php5-gd php5-mysql php-pear postfix sudo rsync git-core unzip\n\n\n\nNote\n: replace \napache2\n with \nnginx php5-fpm\n to install nginx on Ubuntu Precise or newer.\n\n\n3. Configure system requirements\n\n\n3.1. Create the Aegir user\n\n\nThe provision framework of Aegir requires that the scripts run as a non-root system account, to ensure that it can correctly set the file permissions on the hosted files.\n\n\nAlso to ensure that the file permissions of the hosted sites are always as safe as can be, and especially to make sure that the web server does not have the ability to modify the code of the site, the configured system account needs to be a member of the web server group, in order to be able to correctly set the file permissions.\n\n\nWhile you can choose another username, most aegir documentation assumes the Aegir user is \naegir\n, its home directory is \n/var/aegir\n\nand the webserver group is \nwww-data\n.\n\n\n$ sudo adduser --system --group --home /var/aegir aegir\n$ sudo adduser aegir www-data    #make aegir a user of group www-data\n\n\n\n3.2. Webserver configuration\n\n\nAegir supports two popular web servers, Apache and Nginx.\n\n\n3.2.1. Apache configuration\n\n\nAegir assumes a few Apache modules are available on the server, and generates its own configuration files. The way we enable this is by symlinking a single file which contains all the configuration necessary. In Debian-based systems, you should symlink this file inside \n/etc/apache2/conf.d\n ior \n/etc/apache2/conf-enabled\n  that will be parsed on startup or alternatively you can place include that file in your apache.conf/httpd.conf. We prefer the former. In other systems there are similar ways to accomplish this. Consult your OS's documentation if unsure.\n\n\nIf you are on a Debian-based system, you will also need to enable the mod_rewrite module manually.\n\n\nRun the following shell commands as root. First, configure Apache to enable RewriteEngine:\n\n\n $ a2enmod rewrite\n\n\n\nFinally, create a symlink from an apache configuration file to a folder within the /var/aegir/:\n\n\n $ ln -s /var/aegir/config/apache.conf /etc/apache2/conf.d/aegir.conf\n\n\n\n3.2.1.1. Ubuntu 14.04+\n\n\nUbuntu 14.04 departs from Debian and previous Ubuntu Apache setup in that it doesn't use \n/etc/apache2/conf.d\n any more and better separates out \nsites-enabled\n from \nconf-enabled\n configurations. So:\n\n\n $ ln -s /var/aegir/config/apache.conf /etc/apache2/conf-available/aegir.conf\n $ a2enconf aegir\n\n\n\nDo not reload/restart Apache if prompted to after running these commands, it will fail.\n\n\n3.2.2. Nginx configuration\n\n\n(If you just succeeded in installing Apache, please skip this section.)\n\n\nAegir assumes standard Nginx configuration is available on the server, and generates its own configuration files. The way we enable this is by symlinking a single file which contains all the configuration necessary. In Debian-based systems, you should symlink this file inside \n/etc/nginx/conf.d\n that will be parsed on startup.\n\n\nPlease make sure your nginx installation is up and running before continuing. On Ubuntu 12.04 Server, for instance, you must edit /etc/nginx/nginx.conf and uncomment the line \"types_hash_max_size 2048;\" in order for nginx to start successfully.\n\n\n$ sudo ln -s /var/aegir/config/nginx.conf /etc/nginx/conf.d/aegir.conf\n\n\n\nDo not reload/restart Nginx after running these commands, it will fail.\n\n\nThe installer script creates the configuration file referenced by the newly created symlink.\n\n\n3.3. PHP configuration\n\n\nSome complex installation profiles or distributions require a PHP memory limit that is higher than the default. To avoid common errors when installing sites on some distributions, the PHP command line tool should be configured to use 192Mb of RAM.\n\n\nChange the memory_limit directive in /etc/php5/cli/php.ini to read:\n\n\n memory_limit = 192M      ; Maximum amount of memory a script may consume (192MB)\n\n\n\nMost modern Drupal sites require around 96M or even 128M of RAM for certain operations. This is far more than what is provided by the default PHP configuration.\n\n\nChange the memory_limit directive in /etc/php5/apache2/php.ini to read:\n\n\nmemory_limit = 128M      ; Maximum amount of memory a script may consume (128MB)\n\n\n\nIf your distributions require more memory than these limits, then use some common sense and update it as appropriate to suit your individual needs.\n\n\n3.4. Sudo configuration\n\n\nNext, we need to give the Aegir user permission to execute the command to restart the Web server without entering a password.  Let's create a file to do so.\n\n\n$ sudo --preserve-env visudo --file=/etc/sudoers.d/aegir\n\n\n\nAdd these lines:\n\n\nDefaults:aegir  !requiretty\naegir ALL=NOPASSWD: /usr/sbin/apache2ctl # for Apache\naegir ALL=NOPASSWD: /etc/init.d/nginx    # for Nginx\n\n\n\nThe \nvisudo\n command should ensure safe permissions on the file after saving.  If not, change them:\n\n\n$ sudo chmod 0440 /etc/sudoers.d/aegir\n\n\n\nNote - the path to your apache2ctl program may differ from this example. On some systems it may also be called 'apachectl' instead of apache2ctl. Adjust to suit your own requirements.\n\n\n3.5. DNS configuration\n\n\nAegir requires a properly configured \"FQDN\" (Fully Qualified Domain Name) be assigned to the machine. In practice, this means that the hostname returned by the \nhostname\n and \nuname -n\n shell commands should resolve to the IP address for this server, and vice versa.\n\n\nIf you only intend to use Aegir on a single server, it is acceptable for the resolved IP address to be the '127.0.0.1' loopback address.\n\n\nIf you intend to manage multiple servers using Aegir, you will need to make sure that the IP address is the public IP of this server.\n\n\nYou can add multiple entries to your /etc/hosts file for testing purposes, for example:\n\n\n 127.0.0.1 aegir.example.com example.com test1.example.com test2.example.com test3.example.com\n\n\n\nThen you can use test1.example.com to create your first site.\n\n\n3.6. Database configuration\n\n\nAegir supports MySQL right now. It is best to install the MySQL server using your Linux distribution's package manager.\n\n\n$ sudo apt-get install mysql-server\n\n\n\nTo make sure that the Aegir backend, and all the possible web servers can reach your database server, you need to configure mysql to listen on all the public IP addresses available to it.\n\n\nAgain, as root, edit the MySQL configuration file \n/etc/mysql/my.cnf\n configuration line to comment out by placing a # at the beginning of the line as follow:\n\n\nBefore:\n\n\nbind-address        = 127.0.0.1\n\n\n\nAfter:\n\n\n# bind-address      = 127.0.0.1\n\n\n\nWithout this line commented out, MySQL will listen only on localhost for database connection requests.\n\n\nNow you need to restart mysql, to clear any caches.\n\n\n $ sudo /etc/init.d/mysql restart\n\n\n\nThe installer will prompt you for your MySQL root user password. The root user will be used to make administrative tasks such as creating new databases, and granting and revoking access to those databases for sites.\n\n\nEven though MySQL is now listening on all IP's, it will not allow invalid users to connect to the databases, without the correct user accounts configured.\n\n\nIf you are concerned about MySQL being accessible in this way, you can also configure your firewall to only allow incoming connections from certain addresses. This is outside the scope of this document however.\n\n\nNote that Aegir will ask you for your MySQL root password. If you do not want to use your regular root password for Aegir, you will need to create another root account for Aegir using a MySQL command like:\n\n\n mysql\n GRANT ALL PRIVILEGES ON *.* TO 'aegir_root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;\n\n\n\nNote: If you are running your Aegir databases on a remote DB server, you will want to create this aegir_root user. The install will often fail if you're trying to use the root user on a remote database. See \nthis issue\n for details.\n\n\n3.6.1. OS-specific configurations\n\n\nNOTE : If you are running either Ubuntu 12.04 LTS, RHEL 6 or Arch Linux, you should still install MySQL in the same way as above.  However, once done, you must now remove the anonymous, passwordless login that those platforms creates by default.\n\n\n$ sudo mysql_secure_installation\n\n\n\nOtherwise, Aegir will fail to install and work at all. See \nthis FAQ entry\n.\n\n\n4. Install Aegir components\n\n\nNext step is to install the Aegir software components themselves, that is: drush, provision and hostmaster.\n\n\n4.1. Install drush\n\n\nBefore installing Aegir proper, you first need to install Drush. See then Drush \ninstallation documentation\n\n\n4.2. Stop! Now become the Aegir user\n\n\nThe remaining of this manual assumes you are running as the Aegir user. Things will go very wrong if you do not change your shell credentials to become that user.\n\n\n$ sudo -u aegir -s -H\n\n\n\n4.3. Install provision\n\n\nOnce Drush is installed, install the latest recommended Provision release.\n\n\n$ drush dl --destination=/var/aegir/.drush provision-7.x-3.0\n$ drush cache-clear drush\n\n\n\n4.4. Running hostmaster-install\n\n\nOnce you have downloaded drush and provision, you can install all other aegir components using the hostmaster-install command:\n\n\n $ drush hostmaster-install\n\n\n\nYou will be prompted for the required information if not provided on the commandline. See the inline help for the available options:\n\n\n $ drush help hostmaster-install\n\n\n\nFor example, to install the frontend on Nginx, use:\n\n\n $ drush hostmaster-install --http_service_type=nginx\n\n\n\nIt is imperative that you provide a valid FQDN to the installer. This is used for database GRANTs. Remote web servers depend on the FQDN being resolvable in order to connect back to your Aegir master server if it is used as your database server for managed sites.\n\n\nUpon completion of the installation, the traditional Drupal 'Welcome' e-mail will be sent to the e-mail address specified by \n--client_email=(your e-mail)\n or if not provided as a command line switch, the address prompted by the installer process. This e-mail address will also be used as the default e-mail address of the first user and client in Aegir, but can be changed later.\n\n\nThere are other commandline switches available, documented in \ndrush help hostmaster-install\n, as usual.\n\n\n4.4.1. Arch Linux configuration\n\n\n$ drush hostmaster-install --web_group=http\n\n\n\n5. Install the Hosting Queue Daemon\n\n\nFor Aegir 3.x installs, using the Hosting Queued Daemon (hosting_queued) is highly recommended.\n\n\nThese instructions will install the daemon to run as a regular service in /etc/init.d/. Instructions will vary according to platforms, but the following should work in Debian.\n\n\n5.1. Install the init script in place\n\n\n$ sudo cp \nhostmaster_platform_root\n/profiles/hostmaster/modules/aegir/hosting/queued/init.d.example /etc/init.d/hosting-queued\n\n\n\n5.2. Setup symlinks and runlevels\n\n\n$ sudo update-rc.d hosting-queued defaults\n\n\n\n5.3. Start the daemon\n\n\n$ sudo /etc/init.d/hosting-queued start\n\n\n\n6. Checkpoint / Finished!\n\n\nAt this point, you have checked out all the code and setup your basic Drupal system (Drupal core, hosting, hostmaster and eldir) that will be the Aegir frontend and the backend system (provision and drush). Your filesystem layout should look something like this:\n\n\n /var/aegir/hostmaster-3.x/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/modules/contrib/admin_menu/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/modules/contrib/views/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/modules/aegir/hosting/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/modules/aegir/hosting_git/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/themes/eldir/\n /var/aegir/hostmaster-3.x/sites/aegir.example.com/\n /var/aegir/config/server_master/apache.conf\n /var/aegir/config/server_master/apache/conf.d/\n /var/aegir/config/server_master/apache/vhost.d/\n /var/aegir/config/server_master/apache/platform.d/\n /var/aegir/backups/\n /var/aegir/.drush/provision/\n\n\n\nVariations on this are acceptable, but you are better to stick with the defaults if you really want to get through this.\n\n\nThe installation will provide you with a one-time login URL to stdout or via an e-mail. Use this link to login to your new Aegir site for the first time.\n\n\nFor troubleshooting this process and resulting install, see the \nInstallation Trouble-shooting\n section.\n\n\nYou may also want to read on with \nwhat you can do with Aegir\n now that it is installed.\n\n\nInstallation Trouble-shooting\n\n\nVerify and install through SSH\n\n\nSince Aegir has multi-server support, it is possible that you have a misconfigured \"FQDN\" and that aegir then tries to connect to the local server as a remote server. To check if you have a misconfigured server, run the following commands:\n\n\n $ resolveip `uname -n`\n\n\n\nIf the command returns your IP address, you are all set. If it returns an error you will need to edit your \n/etc/hosts\n file.\n\n\nFirst line of this file looks like:\n\n\n 127.0.0.1  localhost\n\n\n\nSimply add all domains you want to this line. e.g:\n\n\n 127.0.0.1  localhost aegir.example.com example.com\n\n\n\nNameVirtualHost *:80 has no VirtualHosts\n\n\nIt does not hurt anything, but it can be annoying in your logs. This may disappear as soon as you define your first virtual site using Aegir. If it does not, you most likely have a second NameVirtualHost statement in your configuration someplace other than in the Aegir configurations.\n\n\nIf you are on a Debian system, that is usually a configuration fragment in /etc/apache2/ports.conf or in a fragment symbolically linked in /etc/apache2/sites-enabled and it is safe to comment out any NameVirtualHost statements you find there as this really is a large part of the job you have asked Aegir to do for you.\n\n\nOnce those are commented out, the message should disappear.\n\n\nMaking sure it works\n\n\nYour new Aegir server will be installed with a single site named the way you specified in your install script. That's great, but you may have more paths to that same server.\n\n\nWhen you try to browse to your server for the first time from a non- localhost browser you may get an addressing issue. If you do, make sure that you actually have the server defined in DNS and that the DNS server was reloaded. If it was reloaded and you use slave servers, make sure that the serial number in the zone file was incremented so that the slaves automatically reload.\n\n\nIf you already have multiple URLs in your DNS which resolve to the same Aegir, you should check them. For instance: if your DNS resolves both aegir.example.com and sitecontrol.example.com to your new Aegir server's IP, you need to make sure that both are accommodated. If they will both get the same physical hostmaster site, one should be set up as an alias to the other. If they are indeed going to be separate sites you will have to create a new site node with the other name as a virtual site.\n\n\nAccess by the server's physical IP address\n\n\nAnother \"gotcha\" that you may run into is http access using the actual IP itself. Remember that the IP is not picked up by the site vhost and will not match a ServerName or ServerAlias - so it gets picked up by the default vhost. This is just standard apache stuff, nothing Aegir or Drupal specific here, but quite the annoyance and a potential problem.\n\n\nYou can easily work around it by simply adding the IP as a Site Alias in the site node in either the Aegir site (or another site that you may have defined which you would prefer the IP to address).\n\n\nYou can tell if you have the IP problem by simply pointing your browser to the server by IP as http://999.999.999.999/ and seeing what comes up. If you get an install screen, you have the problem. You certainly do not want that install screen getting executed!\n\n\nThe good news is that fixing it is easy.\n\n\nSimply log into Aegir, click on Sites, click on the site name that you want the IP to address, click on Edit and scroll down to Domain Aliases. Put the IP into the box, click on the Redirect checkbox so that Aegir instructs Apache to do a rewrite to the real domain name, and finally click Save.\n\n\nIf you do not have the Domain Aliases entry box, you need to turn that feature on. In that case, go to your administration menu at the top of the page, point to Hosting and then click on Features. Click the checkbox for Site Aliasing and then Save Configuration. The Aliases box will now appear when you edit a site.  There is excellent information about the site alias feature in \nthis handbook page\n with much more detail.\n\n\nAfter the Verify job completes you should test your server again. Now when you address the server by it's IP address the URL should automatically change to the site you selected and the install screen never appears.\n\n\nCentOS firewall settings\n\n\nYou may need to adjust CentOS's firewall settings to allow HTTP traffic on port 80. If you installed CentOS with a UI, enable \"Firewall settings -- WWW (HTTP)\".\n\n\nAlternatively, another solution may be to edit /etc/sysconfig/iptables and add a rule accepting traffic on the relevant interface on port 80.\n\n\nAfterwards, you can restart the firewall with this command:\n\n\n$ sudo service iptables restart\n\n\n\nCentOS cron requires restart?!\n\n\nAlso, in some configurations, it seems necessary to restart crond for the user crontab changes to take effect (very bizarre). For that, use:\n\n\n$ sudo service crond restart\n\n\n\nSee https://www.drupal.org/node/632308 if you have more information about this issue.\n\n\nCentOS aegir.conf permission denied\n\n\nWhen trying to restart httpd, you may receive:\n\n\nStarting httpd: httpd: Syntax error on line 209 of /etc/httpd/conf/httpd.conf: Could not open configuration file\n/etc/httpd/conf.d/aegir.conf: Permission denied\n\n\n\nCheck your SELinux settings. If enabled, you can run the following command on the aegir.conf file in\n/var/aegir/config/server_master directory:\n\n\n$ sudo chcon -t httpd_config_t apache.conf\n\n\n\nAlternatively, you can disable SELinux completely if you desire. Both options will result in removing the permisson denied error.\n\n\nYou can see \nthis comment\n for a little more info.\n\n\nTry the following if nothing else works:\n\n\n$ sudo setenforce permissive\n\n\n\nSee \nthis doc\n to make the change permanent.\n\n\nSolaris cron issues\n\n\nI had numerous problems setting up a proper cron job, as Solaris' crond seems pretty anal about what it accepts. The only way I could get it to work was to create a wrapper shell script that would be called using the simplest cron tab.\n\n\nCrontab entry:\n\n\n* * * * * /var/aegir/dispatch.sh\n\n\n\nContent of dispatch.sh:\n\n\n#!/usr/bin/bash\n\nHOME=/var/aegir\nLD_LIBRARY_PATH=/usr/lib:/usr/local/lib:/usr/lib/sparcv9:/opt/mysql/mysql/lib:/usr/sfw/lib:/usr/sfw/lib/gcc:/opt/sfw/lib\nPATH=/usr/bin:/opt/mysql/mysql/bin:/usr/sfw/bin:/opt/sfw/bin:/opt/SUNWspro/bin:/usr/local/bin:/opt/csw/bin\n\nexport HOME\nexport LD_LIBRARY_PATH\nexport PATH\n\nphp '/var/aegir/drush/drush.php' --php=/usr/local/bin/php '@hostmaster' hosting-dispatch`\n\n\n\nDrush execution path issues\n\n\nSolaris (and maybe others) suffers from the dreaded execution issues of drush:\n\n\n\n\nhttps://www.drupal.org/node/637574\n\n\nhttps://www.drupal.org/node/586466\n\n\n\n\nThose can be worked around by hardcoding the --php executable on the commandline path. Adding the proper shebang ( \n#!/usr/local/bin/php\n, for example) header and using a proper PATH that includes the PHP executable also helps.\n\n\nAPC issues\n\n\nIf you are having trouble running APC with Aegir, try downgrading to APC 3.1.4. This can be achieved by the following:\n\n\nsudo pecl uninstall apc\nsudo pecl install apc-3.1.4", 
            "title": "Install"
        }, 
        {
            "location": "/install/#installation-guide", 
            "text": "Installation Guide  System Requirements  Your own server  A Unix-based operating system  Web server  PHP  Database server  Mail transfer agent  A Fully Qualified Domain Name (FQDN)  Other utilities: sudo, rsync, git and unzip  No conflicting Control Panels  Requirements of Drupal distributions    Debian/Ubuntu  1. Ensure requirements are satisfied  2. Add project repositories  3. Add archive key to your keyring  4. DNS configuration  5. (Optional) Manual installation of MySQL  6. (Optional) Install with Nginx  7. Install Aegir  7.1 Custom options  7.1.1 Custom make files      8. Troubleshooting the install    Manual Installation  1. Review System Requirements  2. Install system requirements  3. Configure system requirements  3.1. Create the Aegir user  3.2. Webserver configuration  3.2.1. Apache configuration  3.2.1.1. Ubuntu 14.04+    3.2.2. Nginx configuration    3.3. PHP configuration  3.4. Sudo configuration  3.5. DNS configuration  3.6. Database configuration  3.6.1. OS-specific configurations      4. Install Aegir components  4.1. Install drush  4.2. Stop! Now become the Aegir user  4.3. Install provision  4.4. Running hostmaster-install  4.4.1. Arch Linux configuration      5. Install the Hosting Queue Daemon  5.1. Install the init script in place  5.2. Setup symlinks and runlevels  5.3. Start the daemon    6. Checkpoint / Finished!    Installation Trouble-shooting  Verify and install through SSH  NameVirtualHost *:80 has no VirtualHosts  Making sure it works  Access by the server's physical IP address  CentOS firewall settings  CentOS cron requires restart?!  CentOS aegir.conf permission denied  Solaris cron issues  Drush execution path issues  APC issues        Aegir requires some special permissions to your server in order to automate\nsome configurations. For example, when a new site is installed, the web server\nwill be automatically configured (vhost) and restarted. Therefore Aegir cannot\nbe installed on a shared hosting environment. Consult the  system\nrequirements  to ensure your server(s) are up to the task.", 
            "title": "Installation Guide"
        }, 
        {
            "location": "/install/#system-requirements", 
            "text": "A system capable of running Drupal  The Aegir system is entirely Drupal based, and has the same base requirements that Drupal does (with the exception that it won't run on Windows). See more notes on Unix and LAMP/LEMP requirements below.  Your own server  The low level of access required to be able to configure and run this system is very far beyond what is commonly available to users with shared hosting. A VPS from any popular provider such as Linode, Rackspace, Slicehost, Amazon EC, etc. will do fine. You will need root access to the server and the server needs to be dedicated to Aegir.  A Unix-based operating system  Aegir must run on some flavour of UNIX, because the majority of functionality in this system occurs in the back-end, through command line scripting. There are also several features (such as symlinks), that are not available to users on Windows. There are no plans currently to add Windows support. See the operating system support page for more information.  Web server  You will need at least one dedicated web server, running Apache. We generally work with Apache 2. Aegir also supports the Nginx web server, but requires at least version 0.7.66 or newer. Since Nginx doesn't provide php-cgi or php-fpm (recommended) modules, you will need to install and run php-fpm server separately. You can find useful examples and tips in the third party Barracuda installer available at the barracuda project page.\nN.B.: This third party installer is not supported by the core Aegir developers, but you can find helpful community support at the boa group.  See also  installing with Nginx .  PHP  Aegir depends on Drush 6.5.0 or later, which requires PHP 5.3 or higher. You also need to have the command-line version of PHP to run Drush properly, and the MySQL extensions for PHP.  Database server  You will require a database server, obviously. Aegir currently only supports MySQL and MariaDB. It is preferable to use a dedicated (not shared-hosting) server since Aegir will create database users and will require the use of a MySQL root user.  Mail transfer agent  Aegir requires an MTA (Mail Transfer Agent) installed on your webserver in order to be able to install new sites to your new platform. If you don't have an MTA, the site installation will fail with message like \"could not send email\". Additional messages will show that site has been removed because of this problem. To remedy the situation simply install an MTA like sendmail, postfix, or exim and do the minimal configuration.  A Fully Qualified Domain Name (FQDN)  For example,  aegir.example.com . The hostname returned by the commands  hostname -f  and  uname -a  must resolve to the IP address of your server. After setting up your FQDN you must restart your server with a  reboot  command so your changes take effect. Note that newly created domain name usually take 24 to 48 hours to fully start working. This period, called propagation, is the projected length of time it takes for root name servers and cache records across the entire web to be updated with your website's DNS information.  Other utilities: sudo, rsync, git and unzip  Aegir installs itself via a Drush Make makefile that downloads via git if you want the bleeding edge code, or via wget if you want the latest official release. If you want the latest development version, and don't have the git program you will need to install it on the server.\nThe jQueryUI library is used in the Aegir UI, unzip is required to extract it. Sudo is required to allow the aegir user the limited privilege to restart the webserver when required. Rsync is used to sync files to remote servers.  No conflicting Control Panels  Other popular control panels such as Plesk, cPanel etc, are designed to manage all aspects of Apache configuration and other areas that Aegir also is intended to be used for.\nRunning Aegir alongside such control panels is not supported and very likely may cause you problems or difficulties installing or running Aegir. Filing bug reports that are caused by interference by another control panel will likely be closed unless the problem can be fixed without causing problems for other Aegir users. Proceed at your own risk!  Requirements of Drupal distributions  Some Drupal distributions, such as OpenAtrium, are specialized products that may contain unique prerequisites for optimal performance. Such examples may include raising the php-cli program's memory_limit to something higher than 64M.\nPlease note that this is not a requirement of Aegir but of the distribution you are trying to install a site on. Thus the Aegir documentation may not officially 'require' such performance settings, but be aware that Aegir may report errors if the system was under-resourced to complete such a task.", 
            "title": "System Requirements"
        }, 
        {
            "location": "/install/#debianubuntu", 
            "text": "These are the installation instructions that are recommended on Debian. Aegir dependencies (Apache, MySQL, PHP...) are also automatically installed.  If you wish to install Debian packages over an existing manual install, it's possible. See  the Debian upgrade procedures .  Debian packages are uploaded to http://debian.aegirproject.org/ shortly after a release. We eventually want to upload those packages to the official archives, but this will take some adaptation and time to sponsor the packages in.  1. Ensure requirements are satisfied  Here's what you'll need to install Aegir on a Debian or Ubuntu system:   Basic Linux system administration skills  Root access to your server  An up-to-date system and applications ( sudo aptitude update   sudo aptitude safe-upgrade )   See  system-requirements  2. Add project repositories  Use this command to add the Aegir package \"Software Source\" repository to your system:  echo \"deb http://debian.aegirproject.org stable main\" | sudo tee -a /etc/apt/sources.list.d/aegir-stable.list  To install a customized Debian package, see the  developer instructions for the debian package . Other distributions are available for courageous people that want to try development versions.  dev note : to install the development version of Aegir, you can use the  unstable  or  testing  distribution above.  3. Add archive key to your keyring  This repository self-signs packages uploaded to it (and packages uploaded are verified against a whitelist of trusted uploaders) using OpenPGP (GnuPG, to be more precise).  Use these commands to download and add the repository's PGP key, then update the package list on your system:  wget -q http://debian.aegirproject.org/key.asc -O- | sudo apt-key add -\nsudo apt-get update  4. DNS configuration  Aegir requires a properly configured \"FQDN\" (Fully Qualified Domain Name) be assigned to the machine. In practice, this means that the hostname returned by the  hostname -f  and  uname -n  shell commands should resolve to the IP address for this server, and vice versa, with the  resolveip  command (included with the mysql-server package).  For Ubuntu, /etc/hosts should have entries that look like:  ::1 host.example.com host ip6-localhost ip6-loopback\n127.0.0.1 host.example.com host localhost\n123.123.123.123 host.example.com host localhost  To set this up in a virtual machine (e.g. Virtualbox), here are the steps:   Create a new VM  Go to settings- network.  Enable Adapter 2, and set to \"host-only\"  Install Ubuntu.  Set hostname as FQDN during install  You may need to add the lines  auto eth1  and  iface eth1 inet dhcp  to /etc/network/interfaces   If you have a virtual machine already setup and want to change the FDQN:   change /etc/hostname using:  sudo hostname NEW_NAME  change /etc/hosts using:  sudo nano /etc/hosts  and change name  reboot and test  hostname -f ,  uname -n ,  resolveip NEW_NAME ,  resolveip IP  YMMV - Your Mileage May Vary   5. (Optional) Manual installation of MySQL  Please note that Ubuntu 12.04 LTS installs, by default, an insecure MySQL installation that contains an anonymous user grant, allowing anyone to login without a password. This breaks Aegir functionality.  If you are running Ubuntu 12.04, you should install MySQL manually, and then ensure it is installed securely:  $ sudo apt-get install mysql-server\n$ sudo mysql_secure_installation  When running 'sudo mysql_secure_installation', answer 'Y' to 'Remove anonymous users?'  By default, a MySQL installation has an anonymous user, allowing anyone\nto log into MySQL without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] Y\n ... Success!  Now you can proceed with installing Aegir below.  6. (Optional) Install with Nginx  If you want to use Nginx instead of Apache, you'll have to explicitely tell apt-get:  $ sudo apt-get install aegir3 nginx php5-fpm  This is because the package expects Apache2 by default.  7. Install Aegir  To install Aegir version 3, frontend and backend, use the following command:  $ sudo apt-get install aegir3  This will prompt you for the required information (MySQL password, Postfix configuration...) and go ahead with the install.  During the Postfix configuration, the following options appear: \"No configuration, Internet site, Internet with smarthost, Satellite system, Local only\". That first text screen only allows to use the tab key to select \"OK\", and then the enter key to display a second screen where you can select one of the choices. The default is \"Internet site\", useful in most cases to enable the server to send email messages, for example to the admin.  At the end of the installation, you will receive an email message or, if the user \"aegir\" has been assigned with a local email account during the installation, the file /var/mail/aegir will contain the message. It will include a one-time login to your new Aegir control panel, that is a URL to copy into your browser so that you can set the password for the \"admin\" user.  7.1 Custom options  The Debian packages allow for a number of options to be set for the various packages:   aegir3-provision  aegir3-hostmaster  aegir-cluster-slave   For example, to create the hostmaster platform as working copies (Git checkouts for all modules) you can set the aegir/working-copy option thusly:  $ echo \"aegir3-hostmaster aegir/working-copy boolean true\" | sudo debconf-set-selections  Note that  debconf-set-selections  is part of the  debconf-utils  package.  7.1.1 Custom make files  If you have your own Drupal make file, you can go ahead with the above process, but change the make file to the one you want:  $ echo \"aegir3-hostmaster aegir/makefile string /var/aegir/makefiles/aegir/aegir-custom.make | sudo debconf-set-selections\n$ sudo apt-get install aegir3  This allows you to specify the makefile path for your custom distribution of Aegir. To maintain these customizations, you'll need to ensure you do the same when upgrading.  An example custom Aegir makefile could look like  this .  8. Troubleshooting the install  To make the install smoother, the install command is run without much debugging information, which can make diagnostics pretty hard. For this, there's a special environment variable you can set that will trigger debugging output. Install aegir with this:  $ env DPKG_DEBUG=developer sudo apt-get install aegir  You can build your own Debian packages from our repositories using  these instructions .  Also see the general  Installation Trouble-shooting  section below.", 
            "title": "Debian/Ubuntu"
        }, 
        {
            "location": "/install/#manual-installation", 
            "text": "This is the process you need to follow if Aegir doesn't have packages for your distribution. We currently provide  debian  packages and others should be coming, if you help! This manual assumes you are fairly familiar with the UNIX commandline interface, but should be possible to follow through if you copy and paste faithfully  all  steps of the procedure.  A note on supported systems:  These instructions provide example commands for a Debian-like distribution, but should be fairly easy to adapt to other environments. This document is meant as a canonical reference that should work on every supported platform. It can also be used for people porting Aegir to new platforms or installing on alien platform for which Aegir is not yet packaged.  It currently contains special recommendations for CentOS, RHEL 6, Arch Linux and Solaris. Users of those platforms are also strongly encouraged to review the :doc: common-problems  that occur on those platforms. Aegir is also known to be installable (and was developed partly on) Mac OS X, but that process is so obtuse that it has a  separate page  for the first part of the manual (up to Install Aegir components).  Installing Aegir may seem daunting at first (which is why we provide automated installs through packages), but once you get around it, it's fairly simple.  Note that these instructions setup a complete Aegir system. If you want to only setup a new remote web/db server, it should be sufficient to install the system requirements (step 1), configure them (step 2) and follow the  Remote server how-to .  1. Review System Requirements  See the  System Requirements  2. Install system requirements  To install the required components, use your system's package manager. For Debian based systems this would look like:  $ sudo apt-get install apache2 php5 php5-cli php5-gd php5-mysql php-pear postfix sudo rsync git-core unzip  Note : replace  apache2  with  nginx php5-fpm  to install nginx on Ubuntu Precise or newer.  3. Configure system requirements  3.1. Create the Aegir user  The provision framework of Aegir requires that the scripts run as a non-root system account, to ensure that it can correctly set the file permissions on the hosted files.  Also to ensure that the file permissions of the hosted sites are always as safe as can be, and especially to make sure that the web server does not have the ability to modify the code of the site, the configured system account needs to be a member of the web server group, in order to be able to correctly set the file permissions.  While you can choose another username, most aegir documentation assumes the Aegir user is  aegir , its home directory is  /var/aegir \nand the webserver group is  www-data .  $ sudo adduser --system --group --home /var/aegir aegir\n$ sudo adduser aegir www-data    #make aegir a user of group www-data  3.2. Webserver configuration  Aegir supports two popular web servers, Apache and Nginx.  3.2.1. Apache configuration  Aegir assumes a few Apache modules are available on the server, and generates its own configuration files. The way we enable this is by symlinking a single file which contains all the configuration necessary. In Debian-based systems, you should symlink this file inside  /etc/apache2/conf.d  ior  /etc/apache2/conf-enabled   that will be parsed on startup or alternatively you can place include that file in your apache.conf/httpd.conf. We prefer the former. In other systems there are similar ways to accomplish this. Consult your OS's documentation if unsure.  If you are on a Debian-based system, you will also need to enable the mod_rewrite module manually.  Run the following shell commands as root. First, configure Apache to enable RewriteEngine:   $ a2enmod rewrite  Finally, create a symlink from an apache configuration file to a folder within the /var/aegir/:   $ ln -s /var/aegir/config/apache.conf /etc/apache2/conf.d/aegir.conf  3.2.1.1. Ubuntu 14.04+  Ubuntu 14.04 departs from Debian and previous Ubuntu Apache setup in that it doesn't use  /etc/apache2/conf.d  any more and better separates out  sites-enabled  from  conf-enabled  configurations. So:   $ ln -s /var/aegir/config/apache.conf /etc/apache2/conf-available/aegir.conf\n $ a2enconf aegir  Do not reload/restart Apache if prompted to after running these commands, it will fail.  3.2.2. Nginx configuration  (If you just succeeded in installing Apache, please skip this section.)  Aegir assumes standard Nginx configuration is available on the server, and generates its own configuration files. The way we enable this is by symlinking a single file which contains all the configuration necessary. In Debian-based systems, you should symlink this file inside  /etc/nginx/conf.d  that will be parsed on startup.  Please make sure your nginx installation is up and running before continuing. On Ubuntu 12.04 Server, for instance, you must edit /etc/nginx/nginx.conf and uncomment the line \"types_hash_max_size 2048;\" in order for nginx to start successfully.  $ sudo ln -s /var/aegir/config/nginx.conf /etc/nginx/conf.d/aegir.conf  Do not reload/restart Nginx after running these commands, it will fail.  The installer script creates the configuration file referenced by the newly created symlink.  3.3. PHP configuration  Some complex installation profiles or distributions require a PHP memory limit that is higher than the default. To avoid common errors when installing sites on some distributions, the PHP command line tool should be configured to use 192Mb of RAM.  Change the memory_limit directive in /etc/php5/cli/php.ini to read:   memory_limit = 192M      ; Maximum amount of memory a script may consume (192MB)  Most modern Drupal sites require around 96M or even 128M of RAM for certain operations. This is far more than what is provided by the default PHP configuration.  Change the memory_limit directive in /etc/php5/apache2/php.ini to read:  memory_limit = 128M      ; Maximum amount of memory a script may consume (128MB)  If your distributions require more memory than these limits, then use some common sense and update it as appropriate to suit your individual needs.  3.4. Sudo configuration  Next, we need to give the Aegir user permission to execute the command to restart the Web server without entering a password.  Let's create a file to do so.  $ sudo --preserve-env visudo --file=/etc/sudoers.d/aegir  Add these lines:  Defaults:aegir  !requiretty\naegir ALL=NOPASSWD: /usr/sbin/apache2ctl # for Apache\naegir ALL=NOPASSWD: /etc/init.d/nginx    # for Nginx  The  visudo  command should ensure safe permissions on the file after saving.  If not, change them:  $ sudo chmod 0440 /etc/sudoers.d/aegir  Note - the path to your apache2ctl program may differ from this example. On some systems it may also be called 'apachectl' instead of apache2ctl. Adjust to suit your own requirements.  3.5. DNS configuration  Aegir requires a properly configured \"FQDN\" (Fully Qualified Domain Name) be assigned to the machine. In practice, this means that the hostname returned by the  hostname  and  uname -n  shell commands should resolve to the IP address for this server, and vice versa.  If you only intend to use Aegir on a single server, it is acceptable for the resolved IP address to be the '127.0.0.1' loopback address.  If you intend to manage multiple servers using Aegir, you will need to make sure that the IP address is the public IP of this server.  You can add multiple entries to your /etc/hosts file for testing purposes, for example:   127.0.0.1 aegir.example.com example.com test1.example.com test2.example.com test3.example.com  Then you can use test1.example.com to create your first site.  3.6. Database configuration  Aegir supports MySQL right now. It is best to install the MySQL server using your Linux distribution's package manager.  $ sudo apt-get install mysql-server  To make sure that the Aegir backend, and all the possible web servers can reach your database server, you need to configure mysql to listen on all the public IP addresses available to it.  Again, as root, edit the MySQL configuration file  /etc/mysql/my.cnf  configuration line to comment out by placing a # at the beginning of the line as follow:  Before:  bind-address        = 127.0.0.1  After:  # bind-address      = 127.0.0.1  Without this line commented out, MySQL will listen only on localhost for database connection requests.  Now you need to restart mysql, to clear any caches.   $ sudo /etc/init.d/mysql restart  The installer will prompt you for your MySQL root user password. The root user will be used to make administrative tasks such as creating new databases, and granting and revoking access to those databases for sites.  Even though MySQL is now listening on all IP's, it will not allow invalid users to connect to the databases, without the correct user accounts configured.  If you are concerned about MySQL being accessible in this way, you can also configure your firewall to only allow incoming connections from certain addresses. This is outside the scope of this document however.  Note that Aegir will ask you for your MySQL root password. If you do not want to use your regular root password for Aegir, you will need to create another root account for Aegir using a MySQL command like:   mysql  GRANT ALL PRIVILEGES ON *.* TO 'aegir_root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;  Note: If you are running your Aegir databases on a remote DB server, you will want to create this aegir_root user. The install will often fail if you're trying to use the root user on a remote database. See  this issue  for details.  3.6.1. OS-specific configurations  NOTE : If you are running either Ubuntu 12.04 LTS, RHEL 6 or Arch Linux, you should still install MySQL in the same way as above.  However, once done, you must now remove the anonymous, passwordless login that those platforms creates by default.  $ sudo mysql_secure_installation  Otherwise, Aegir will fail to install and work at all. See  this FAQ entry .  4. Install Aegir components  Next step is to install the Aegir software components themselves, that is: drush, provision and hostmaster.  4.1. Install drush  Before installing Aegir proper, you first need to install Drush. See then Drush  installation documentation  4.2. Stop! Now become the Aegir user  The remaining of this manual assumes you are running as the Aegir user. Things will go very wrong if you do not change your shell credentials to become that user.  $ sudo -u aegir -s -H  4.3. Install provision  Once Drush is installed, install the latest recommended Provision release.  $ drush dl --destination=/var/aegir/.drush provision-7.x-3.0\n$ drush cache-clear drush  4.4. Running hostmaster-install  Once you have downloaded drush and provision, you can install all other aegir components using the hostmaster-install command:   $ drush hostmaster-install  You will be prompted for the required information if not provided on the commandline. See the inline help for the available options:   $ drush help hostmaster-install  For example, to install the frontend on Nginx, use:   $ drush hostmaster-install --http_service_type=nginx  It is imperative that you provide a valid FQDN to the installer. This is used for database GRANTs. Remote web servers depend on the FQDN being resolvable in order to connect back to your Aegir master server if it is used as your database server for managed sites.  Upon completion of the installation, the traditional Drupal 'Welcome' e-mail will be sent to the e-mail address specified by  --client_email=(your e-mail)  or if not provided as a command line switch, the address prompted by the installer process. This e-mail address will also be used as the default e-mail address of the first user and client in Aegir, but can be changed later.  There are other commandline switches available, documented in  drush help hostmaster-install , as usual.  4.4.1. Arch Linux configuration  $ drush hostmaster-install --web_group=http  5. Install the Hosting Queue Daemon  For Aegir 3.x installs, using the Hosting Queued Daemon (hosting_queued) is highly recommended.  These instructions will install the daemon to run as a regular service in /etc/init.d/. Instructions will vary according to platforms, but the following should work in Debian.  5.1. Install the init script in place  $ sudo cp  hostmaster_platform_root /profiles/hostmaster/modules/aegir/hosting/queued/init.d.example /etc/init.d/hosting-queued  5.2. Setup symlinks and runlevels  $ sudo update-rc.d hosting-queued defaults  5.3. Start the daemon  $ sudo /etc/init.d/hosting-queued start  6. Checkpoint / Finished!  At this point, you have checked out all the code and setup your basic Drupal system (Drupal core, hosting, hostmaster and eldir) that will be the Aegir frontend and the backend system (provision and drush). Your filesystem layout should look something like this:   /var/aegir/hostmaster-3.x/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/modules/contrib/admin_menu/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/modules/contrib/views/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/modules/aegir/hosting/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/modules/aegir/hosting_git/\n /var/aegir/hostmaster-3.x/profiles/hostmaster/themes/eldir/\n /var/aegir/hostmaster-3.x/sites/aegir.example.com/\n /var/aegir/config/server_master/apache.conf\n /var/aegir/config/server_master/apache/conf.d/\n /var/aegir/config/server_master/apache/vhost.d/\n /var/aegir/config/server_master/apache/platform.d/\n /var/aegir/backups/\n /var/aegir/.drush/provision/  Variations on this are acceptable, but you are better to stick with the defaults if you really want to get through this.  The installation will provide you with a one-time login URL to stdout or via an e-mail. Use this link to login to your new Aegir site for the first time.  For troubleshooting this process and resulting install, see the  Installation Trouble-shooting  section.  You may also want to read on with  what you can do with Aegir  now that it is installed.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/install/#installation-trouble-shooting", 
            "text": "Verify and install through SSH  Since Aegir has multi-server support, it is possible that you have a misconfigured \"FQDN\" and that aegir then tries to connect to the local server as a remote server. To check if you have a misconfigured server, run the following commands:   $ resolveip `uname -n`  If the command returns your IP address, you are all set. If it returns an error you will need to edit your  /etc/hosts  file.  First line of this file looks like:   127.0.0.1  localhost  Simply add all domains you want to this line. e.g:   127.0.0.1  localhost aegir.example.com example.com  NameVirtualHost *:80 has no VirtualHosts  It does not hurt anything, but it can be annoying in your logs. This may disappear as soon as you define your first virtual site using Aegir. If it does not, you most likely have a second NameVirtualHost statement in your configuration someplace other than in the Aegir configurations.  If you are on a Debian system, that is usually a configuration fragment in /etc/apache2/ports.conf or in a fragment symbolically linked in /etc/apache2/sites-enabled and it is safe to comment out any NameVirtualHost statements you find there as this really is a large part of the job you have asked Aegir to do for you.  Once those are commented out, the message should disappear.  Making sure it works  Your new Aegir server will be installed with a single site named the way you specified in your install script. That's great, but you may have more paths to that same server.  When you try to browse to your server for the first time from a non- localhost browser you may get an addressing issue. If you do, make sure that you actually have the server defined in DNS and that the DNS server was reloaded. If it was reloaded and you use slave servers, make sure that the serial number in the zone file was incremented so that the slaves automatically reload.  If you already have multiple URLs in your DNS which resolve to the same Aegir, you should check them. For instance: if your DNS resolves both aegir.example.com and sitecontrol.example.com to your new Aegir server's IP, you need to make sure that both are accommodated. If they will both get the same physical hostmaster site, one should be set up as an alias to the other. If they are indeed going to be separate sites you will have to create a new site node with the other name as a virtual site.  Access by the server's physical IP address  Another \"gotcha\" that you may run into is http access using the actual IP itself. Remember that the IP is not picked up by the site vhost and will not match a ServerName or ServerAlias - so it gets picked up by the default vhost. This is just standard apache stuff, nothing Aegir or Drupal specific here, but quite the annoyance and a potential problem.  You can easily work around it by simply adding the IP as a Site Alias in the site node in either the Aegir site (or another site that you may have defined which you would prefer the IP to address).  You can tell if you have the IP problem by simply pointing your browser to the server by IP as http://999.999.999.999/ and seeing what comes up. If you get an install screen, you have the problem. You certainly do not want that install screen getting executed!  The good news is that fixing it is easy.  Simply log into Aegir, click on Sites, click on the site name that you want the IP to address, click on Edit and scroll down to Domain Aliases. Put the IP into the box, click on the Redirect checkbox so that Aegir instructs Apache to do a rewrite to the real domain name, and finally click Save.  If you do not have the Domain Aliases entry box, you need to turn that feature on. In that case, go to your administration menu at the top of the page, point to Hosting and then click on Features. Click the checkbox for Site Aliasing and then Save Configuration. The Aliases box will now appear when you edit a site.  There is excellent information about the site alias feature in  this handbook page  with much more detail.  After the Verify job completes you should test your server again. Now when you address the server by it's IP address the URL should automatically change to the site you selected and the install screen never appears.  CentOS firewall settings  You may need to adjust CentOS's firewall settings to allow HTTP traffic on port 80. If you installed CentOS with a UI, enable \"Firewall settings -- WWW (HTTP)\".  Alternatively, another solution may be to edit /etc/sysconfig/iptables and add a rule accepting traffic on the relevant interface on port 80.  Afterwards, you can restart the firewall with this command:  $ sudo service iptables restart  CentOS cron requires restart?!  Also, in some configurations, it seems necessary to restart crond for the user crontab changes to take effect (very bizarre). For that, use:  $ sudo service crond restart  See https://www.drupal.org/node/632308 if you have more information about this issue.  CentOS aegir.conf permission denied  When trying to restart httpd, you may receive:  Starting httpd: httpd: Syntax error on line 209 of /etc/httpd/conf/httpd.conf: Could not open configuration file\n/etc/httpd/conf.d/aegir.conf: Permission denied  Check your SELinux settings. If enabled, you can run the following command on the aegir.conf file in\n/var/aegir/config/server_master directory:  $ sudo chcon -t httpd_config_t apache.conf  Alternatively, you can disable SELinux completely if you desire. Both options will result in removing the permisson denied error.  You can see  this comment  for a little more info.  Try the following if nothing else works:  $ sudo setenforce permissive  See  this doc  to make the change permanent.  Solaris cron issues  I had numerous problems setting up a proper cron job, as Solaris' crond seems pretty anal about what it accepts. The only way I could get it to work was to create a wrapper shell script that would be called using the simplest cron tab.  Crontab entry:  * * * * * /var/aegir/dispatch.sh  Content of dispatch.sh:  #!/usr/bin/bash\n\nHOME=/var/aegir\nLD_LIBRARY_PATH=/usr/lib:/usr/local/lib:/usr/lib/sparcv9:/opt/mysql/mysql/lib:/usr/sfw/lib:/usr/sfw/lib/gcc:/opt/sfw/lib\nPATH=/usr/bin:/opt/mysql/mysql/bin:/usr/sfw/bin:/opt/sfw/bin:/opt/SUNWspro/bin:/usr/local/bin:/opt/csw/bin\n\nexport HOME\nexport LD_LIBRARY_PATH\nexport PATH\n\nphp '/var/aegir/drush/drush.php' --php=/usr/local/bin/php '@hostmaster' hosting-dispatch`  Drush execution path issues  Solaris (and maybe others) suffers from the dreaded execution issues of drush:   https://www.drupal.org/node/637574  https://www.drupal.org/node/586466   Those can be worked around by hardcoding the --php executable on the commandline path. Adding the proper shebang (  #!/usr/local/bin/php , for example) header and using a proper PATH that includes the PHP executable also helps.  APC issues  If you are having trouble running APC with Aegir, try downgrading to APC 3.1.4. This can be achieved by the following:  sudo pecl uninstall apc\nsudo pecl install apc-3.1.4", 
            "title": "Installation Trouble-shooting"
        }, 
        {
            "location": "/install/upgrade/", 
            "text": "Upgrade Guide\n\n\n\n\n\n\nUpgrade Guide\n\n\nUpgrade options\n\n\nNew release of Drupal core\n\n\nMajor upgrade from Aegir 6.x-2.x\n\n\nManual Upgrade\n\n\nConventions \n Tips\n\n\nUpgrading Overview\n\n\nUpgrading drush\n\n\nUpgrading the backend\n\n\nUpgrading the frontend\n\n\nThe hostmaster-migrate command\n\n\n\n\n\n\n\n\n\n\nUpgrades with Debian packages\n\n\nRegular update process\n\n\nTemporarily upgrading to the unstable Debian package\n\n\nUpgrading from non-Debian installs\n\n\nCustom distributions\n\n\nKeeping custom distributions up to date\n\n\n\n\n\n\nRolling back the upgrade\n\n\nRecovering a Failed Upgrade\n\n\n\n\n\n\n\n\n\n\nUpgrades with upgrade.sh script\n\n\n\n\n\n\n\n\n\n\nUpgrading Aegir is designed to be as easy as it possibly can be, and regularly improves over time as the developers attempt to streamline the process for users.\n\n\nNonetheless, the upgrade process can seem a little daunting to users. This is mainly because some expectation arises that because Aegir is built on Drupal, and is made for managing Drupal sites, it seems reasonable to expect the upgrade process to be as straightforward as, say, upgrading a regular Drupal site.\n\n\nAegir is a powerful system that goes beyond a normal Drupal application by being split into two parts: a frontend (the browser-based control panel) and the backend (bits on the system in /var/aegir, such as Drush and Drush extensions), along with a system user on your server that runs command-line scripts and restarts services, and cronjobs.\n\n\nTypically what this means is that when it comes time to upgrade Aegir, you not only have to upgrade the frontend site, but also update the components that reside in the 'backend'.\n\n\nBut don't panic! We have instructions and even a script to run, to take care of almost all of it for you, eliminating as much as possible the chance for human error.\n\n\nUpgrade options\n\n\nThere are three options you can choose to upgrade your Aegir install when a new release comes up:\n\n\n\n\nUpgrades using Debian packages\n\n\nUpgrades using the upgrade.sh.txt script\n\n\nManual upgrades\n\n\n\n\nNew release of Drupal core\n\n\nJust as you would use the Migrate task in Aegir to upgrade one of your sites to a new copy of Drupal core, you can follow the UPGRADE.txt to upgrade your actual Aegir frontend system to a new copy of Drupal core too. The upgrade process (including the script) will always fetch the latest available copy of Drupal core to place the frontend on.\n\n\nCurrently you cannot upgrade the Aegir site itself from the frontend with a Migrate task as you do for your managed sites. This may change in the future as we have an open issue over at \nAllow upgrade of hostmaster sites from the frontend\n.\n\n\nMajor upgrade from Aegir 6.x-2.x\n\n\nMost of the instructions on this page are targetted to minor updates, e.g. Aegir 3.1 to 3.2.\nWhen upgrading from Aegir 2.x there are a few extra precautions to take. But apart from that the normal upgrade options apply.\n\n\nTo avoid the upgrade breaking run these drush commands:\n\n\ndrush @hostmaster en --yes ctools\ndrush @hostmaster pm-disable --yes hosting_platform_pathauto\ndrush @hostmaster pm-disable --yes install_profile_api\n\n\n\n\nThe upgrade will complain about missing modules like \nmodalframe\n and \njquery_update\n. This is to be expected, and can be ignored.\n\n\nThis upgrade path is \ntested by Jenkins\n.\n\n\nManual Upgrade\n\n\nThis section outlines the requirements for doing a manual upgrade of Aegir to a new release. Before going ahead with this, you probably want to read the upgrade path and version-specific notes.\n\n\nConventions \n Tips\n\n\nAll instructions and in general all commands must be run as aegir user, so all permissions are always set correctly.\n\n\nTo become aegir user you can issue this command. Note you must run this as root or prefix with sudo.\n\n\nsu -s /bin/sh aegir\n\n\n\nNote that /bin/sh is an example. You may wish to instead use the shell of your choice, i.e /bin/bash\n\n\nA standard umask of 022 is assumed. This is the default on most systems.\n\n\nUpgrading Overview\n\n\nUpgrading drush\n\n\nAs part of your Aegir upgrade, you may need to upgrade Drush to the latest stable version compatible with the target Aegir release. Aegir 3.x works with Drush 6, 7 and 8. Note that to install and manage Drupal 8 sites, Drush 8+ is required.\n\n\nUpgrading the backend\n\n\nAfter drush is updated, you must then proceed to upgrade the backend. The reason for upgrading the backend first before the frontend, is that the frontend upgrade process is instigated by the backend using Drush Make. Thus you need to be running the new backend first in order to successfully produce a new frontend.\n\n\nIn general, we try to keep the backend and the frontend compatible with each other during release cycles. That is: provision 3.2 and hosting 3.3 will always be able to talk to each other, but hosting 3.x may have trouble talking to the 2.x backend, so you need to upgrade the backend first when you do a major upgrade (for example, 2.4 -\n 3.0).\n\n\nBottomline: first you upgrade the backend, then the frontend.\n\n\nUpgrading the frontend\n\n\nOnce your backend is upgraded, you can upgrade your frontend. Think of this as the backend fetching a new copy of Drupal core and the Hostmaster frontend application onto your server, and then moving the Aegir site's settings.php and other bits and pieces over to the new codebase.\n\n\nThe hostmaster-migrate command\n\n\nThe command will make sure the target directory is a valid Aegir install. If the directory does not exist, provision will use drush_make to fetch and assemble the correct version of the front end for the specific release of the backend you are running.\n\n\ndrush hostmaster-migrate\n will also update the crontab entry for the aegir user.\n\n\nIf you have customized your Aegir installation and are maintaining your own makefile, you can use the \n--makefile\n flag so the platform is created with another makefile than the default. Be warned that this may create problems if the makefile doesn't include the right Aegir modules.\n\n\nIf there is a newer release of Aegir than what you have installed, the hostmaster command will fetch the latest stable Drupal release.  If you have the latest stable version of Aegir already installed, this won't happen because Drupal core changes could affect the stability of the distribution. So it cannot simply be run whenever a new security release of core Drupal is made available (unless your instance was installed via the \nunstable\n channel, which is not recommended).\n\n\nTo upgrade Drupal core (say for a new security release) while running Aegir stable, this method should work, but make sure to test on a development instance before running on your production environment:\n\n\n\n\nBecome the Aegir user.\n\n\nsudo -Hsu aegir\n\n\n\n\n\n\nUpgrade Drupal core.\n\n\ndrush @hostmaster pm-updatecode drupal\n\n\n\n\n\n\nVerify the upgraded platform.\n\n\ndrush @platform_hostmaster provision-verify\n\n\n\n\n\n\nVerify the Hostmaster site.\n\n\ndrush @hostmaster provision-verify\n\n\n\n\n\n\n\n\nUpgrades with Debian packages\n\n\nRegular update process\n\n\nMake sure you have the Aegir repository in your sources.list, as per the \ninstallation docs\n.\n\n\nIf you want to upgrade all packages in one shot, use:\n\n\napt-get update\napt-get install aegir3\n\n\n\nNote that you can upgrade Aegir in steps. Upgrading your backend to the Debian package should be as simple as running:\n\n\napt-get install aegir3-provision\n\n\n\nUpgrading the frontend to the Debian package works identically:\n\n\napt-get install aegir3-hostmaster\n\n\n\nAs during install, you can use the DEBUG variable to run Drush in debugging mode:\n\n\nenv DPKG_DEBUG=yes apt-get install aegir3-hostmaster\n\n\n\nNote on contrib modules\n: some Aegir-specific contrib modules may have been installed on your Aegir deployment. This may fail if you are doing a major upgrade. In this case, you will probably want to disable those contrib modules.  Look for directories in \n~/.drush\n or \n/usr/share/drush/commands\n or other components of the Drush commandfiles search path, and move them out of the way.  After the upgrade, download the new versions of the modules that are compatible with the new Aegir release.\n\n\nTemporarily upgrading to the unstable Debian package\n\n\nOccasionally, you might be facing a bug that has been fixed in Aegir's git repos, but hasn't made it into a new release yet. The Aegir Project's CI system automatically builds and uploads new Debian packages for each commit to one of the core repos. As such, you \ncould\n download and install the .deb directly. Note that this is \nnot\n recommended.\n\n\n\n\nEnsure that the latest build is passing the \ntest suite\n.\n\n\nVisit http://debian.aegirproject.org/pool/main/a/aegir3-provision/\n\n\nFind the latest unstable release packages for aegir3-provision and aegir3-hostmaster (they'll be the ones with a long suffix).\n\n\nDownload the Provision package to your Aegir server (e.g., \nwget aegir3-provision_3.7+438.10e2f5b_all.deb\n)\n\n\nDownload the Hostmaster package to your Aegir server (e.g., \nwget aegir3-hostmaster_3.7+438.10e2f5b_all.deb\n)\n\n\nInstall the Provision package to your Aegir server (e.g., \nsudo dpkg -i aegir3-provision_3.7+438.10e2f5b_all.deb\n)\n\n\nInstall the Hostmaster package to your Aegir server (e.g., \nsudo dpkg -i aegir3-hostmaster_3.7+438.10e2f5b_all.deb\n)\n\n\n\n\nThe idea here is that you're only running the unstable version of Aegir until the next full release, at which point the normal update procedure (e.g., \napt-get install aegir3\n) will install the next stable release.\n\n\nUpgrading from non-Debian installs\n\n\nThe Debian package supports migrating from existing installs. You will need to move \n/var/aegir/.drush/provision\n out of the way before going ahead:\n\n\ntar cfz /var/aegir/backups/provision.tgz /var/aegir/.drush/provision\nrm -rf /var/aegir/.drush/provision\n\n\n\nYou'll also need to go through steps 1 through 3 of \nautomatic install on Debian\n.\n\n\nThen just install the package as if you were installing from scratch.\n\n\nCustom distributions\n\n\nIf you have your own makefile, you can go ahead with the above process, but change the makefile to the one you want:\n\n\necho debconf aegir/makefile string\n/var/aegir/makefiles/aegir/aegir-koumbit.make | debconf-set-selections\napt-get install aegir3\n\n\n\nUsually no questions are asked when upgrading - this allows you to specify the makefile path for your custom distribution of Aegir, even if you're upgrading.  It's also how you can switch distributions.\n\n\nAn example aegir-koumbit.make file could look like:\n\n\ncore = 7.x\napi = 2\n\nincludes[aegir] = \"/usr/share/drush/commands/provision/aegir.make\"\n\nprojects[] = module_filter\n\n\n\nKeeping custom distributions up to date\n\n\nThis section describes how to upgrade the code for custom distributions in between debian package upgrades. Here, we assume that Aegir is already installed through the debian package.\n\n\nCreate a new Aegir makefile, or update the custom Aegir makefile. (You can use the makefile in http://git.drupal.org/project/provision as a starting point.) Add modules/features/themes/libraries/whatever to the makefile. Ex:\n\n\nprojects[] = token\nprojects[] = views\n\n\n\nFollow the manual upgrade path:\n\n\ndrush @hostmaster hostmaster-migrate URL /path/to/platform --makefile='/path/to/makefile'\n\n\n\nHope it's all green (no errors). If there are errors, fix the makefile.\n\n\nA new platform should exist, the new site should be in there, verifying. If the task is not running, check that hosting-queued is running. If it's not, restart it using \n/etc/init.d/hosting-queued force-reload\n. (Since hostmaster changed location, hosting-queued may have crashed at this point.)\n\n\nWhen the debian package is upgraded, it should create a new hostmaster platform automatically. (You can test this with \ndpkg --configure\n.)\n\n\nRolling back the upgrade\n\n\nIf something went wrong with the upgrade, you can rollback by deleting the hostmaster site and redeploying on the older platform:\n\n\ndrush @hostmaster provision-delete\nvi ~/.drush/hostmaster.alias.drushrc.php\n\n\n\nThen edit the alias to make the following changes:\n\n\n\n\nchange the platform to point to the older platform alias\n\n\nchange the platform root path\n\n\nchange the site path\n\n\n\n\nDuring the upgrade, a backup was done end you need to find which backup file it was in the backups directory. Use this backup to redeploy the older platform:\n\n\ndrush @hostmaster provision-deploy ~/backups/hostmaster.date.tgz\n\n\n\nRecovering a Failed Upgrade\n\n\nWhen using the \nregular update process\n and you encounter an error it leaves the debian package in a broken state.\n\n\nFirst you need to figure out why it failed. For example is there a permission problem? Once you determined the issue correct it and clean up the environment.  It may be necessary to remove the new hostmaster platform. It is up to you to determine what state Aegir is in.\n\n\nNext you need to fix the broken package by running the fix-broken parameter:\n\n\napt-get install -f\n\n\n\nThis tells the debian package system to start through the process again.\n\n\nUpgrades with upgrade.sh script\n\n\nThis page describes the upgrade script in the Provision repository that tries to automate much of the upgrade process.\n\n\nIt is imperative that you read the version-specific upgrade notes before attempting to run the upgrade.sh script, as the script will assume you have your system set up appropriately to handle the upgrade process.\n\n\nYou can download the upgrade.sh script for Aegir 3.x with the following command:\n\n\nwget -O upgrade.sh 'http://cgit.drupalcode.org/provision/plain/upgrade.sh.txt?h=7.x-3.8'\n\n\n\nMake sure you download it to somewhere that the aegir user can access in order to execute it.\n\n\nYou may need to edit the script to set any variables that are different from the defaults, for example to upgrade to a different Aegir version.\n\n\nTo do the upgrade, just run the script:\n\n\nsu -s /bin/sh aegir -c \"sh upgrade.sh\"", 
            "title": "Upgrade"
        }, 
        {
            "location": "/install/upgrade/#upgrade-guide", 
            "text": "Upgrade Guide  Upgrade options  New release of Drupal core  Major upgrade from Aegir 6.x-2.x  Manual Upgrade  Conventions   Tips  Upgrading Overview  Upgrading drush  Upgrading the backend  Upgrading the frontend  The hostmaster-migrate command      Upgrades with Debian packages  Regular update process  Temporarily upgrading to the unstable Debian package  Upgrading from non-Debian installs  Custom distributions  Keeping custom distributions up to date    Rolling back the upgrade  Recovering a Failed Upgrade      Upgrades with upgrade.sh script      Upgrading Aegir is designed to be as easy as it possibly can be, and regularly improves over time as the developers attempt to streamline the process for users.  Nonetheless, the upgrade process can seem a little daunting to users. This is mainly because some expectation arises that because Aegir is built on Drupal, and is made for managing Drupal sites, it seems reasonable to expect the upgrade process to be as straightforward as, say, upgrading a regular Drupal site.  Aegir is a powerful system that goes beyond a normal Drupal application by being split into two parts: a frontend (the browser-based control panel) and the backend (bits on the system in /var/aegir, such as Drush and Drush extensions), along with a system user on your server that runs command-line scripts and restarts services, and cronjobs.  Typically what this means is that when it comes time to upgrade Aegir, you not only have to upgrade the frontend site, but also update the components that reside in the 'backend'.  But don't panic! We have instructions and even a script to run, to take care of almost all of it for you, eliminating as much as possible the chance for human error.", 
            "title": "Upgrade Guide"
        }, 
        {
            "location": "/install/upgrade/#upgrade-options", 
            "text": "There are three options you can choose to upgrade your Aegir install when a new release comes up:   Upgrades using Debian packages  Upgrades using the upgrade.sh.txt script  Manual upgrades", 
            "title": "Upgrade options"
        }, 
        {
            "location": "/install/upgrade/#new-release-of-drupal-core", 
            "text": "Just as you would use the Migrate task in Aegir to upgrade one of your sites to a new copy of Drupal core, you can follow the UPGRADE.txt to upgrade your actual Aegir frontend system to a new copy of Drupal core too. The upgrade process (including the script) will always fetch the latest available copy of Drupal core to place the frontend on.  Currently you cannot upgrade the Aegir site itself from the frontend with a Migrate task as you do for your managed sites. This may change in the future as we have an open issue over at  Allow upgrade of hostmaster sites from the frontend .", 
            "title": "New release of Drupal core"
        }, 
        {
            "location": "/install/upgrade/#major-upgrade-from-aegir-6x-2x", 
            "text": "Most of the instructions on this page are targetted to minor updates, e.g. Aegir 3.1 to 3.2.\nWhen upgrading from Aegir 2.x there are a few extra precautions to take. But apart from that the normal upgrade options apply.  To avoid the upgrade breaking run these drush commands:  drush @hostmaster en --yes ctools\ndrush @hostmaster pm-disable --yes hosting_platform_pathauto\ndrush @hostmaster pm-disable --yes install_profile_api  The upgrade will complain about missing modules like  modalframe  and  jquery_update . This is to be expected, and can be ignored.  This upgrade path is  tested by Jenkins .", 
            "title": "Major upgrade from Aegir 6.x-2.x"
        }, 
        {
            "location": "/install/upgrade/#manual-upgrade", 
            "text": "This section outlines the requirements for doing a manual upgrade of Aegir to a new release. Before going ahead with this, you probably want to read the upgrade path and version-specific notes.  Conventions   Tips  All instructions and in general all commands must be run as aegir user, so all permissions are always set correctly.  To become aegir user you can issue this command. Note you must run this as root or prefix with sudo.  su -s /bin/sh aegir  Note that /bin/sh is an example. You may wish to instead use the shell of your choice, i.e /bin/bash  A standard umask of 022 is assumed. This is the default on most systems.  Upgrading Overview  Upgrading drush  As part of your Aegir upgrade, you may need to upgrade Drush to the latest stable version compatible with the target Aegir release. Aegir 3.x works with Drush 6, 7 and 8. Note that to install and manage Drupal 8 sites, Drush 8+ is required.  Upgrading the backend  After drush is updated, you must then proceed to upgrade the backend. The reason for upgrading the backend first before the frontend, is that the frontend upgrade process is instigated by the backend using Drush Make. Thus you need to be running the new backend first in order to successfully produce a new frontend.  In general, we try to keep the backend and the frontend compatible with each other during release cycles. That is: provision 3.2 and hosting 3.3 will always be able to talk to each other, but hosting 3.x may have trouble talking to the 2.x backend, so you need to upgrade the backend first when you do a major upgrade (for example, 2.4 -  3.0).  Bottomline: first you upgrade the backend, then the frontend.  Upgrading the frontend  Once your backend is upgraded, you can upgrade your frontend. Think of this as the backend fetching a new copy of Drupal core and the Hostmaster frontend application onto your server, and then moving the Aegir site's settings.php and other bits and pieces over to the new codebase.  The hostmaster-migrate command  The command will make sure the target directory is a valid Aegir install. If the directory does not exist, provision will use drush_make to fetch and assemble the correct version of the front end for the specific release of the backend you are running.  drush hostmaster-migrate  will also update the crontab entry for the aegir user.  If you have customized your Aegir installation and are maintaining your own makefile, you can use the  --makefile  flag so the platform is created with another makefile than the default. Be warned that this may create problems if the makefile doesn't include the right Aegir modules.  If there is a newer release of Aegir than what you have installed, the hostmaster command will fetch the latest stable Drupal release.  If you have the latest stable version of Aegir already installed, this won't happen because Drupal core changes could affect the stability of the distribution. So it cannot simply be run whenever a new security release of core Drupal is made available (unless your instance was installed via the  unstable  channel, which is not recommended).  To upgrade Drupal core (say for a new security release) while running Aegir stable, this method should work, but make sure to test on a development instance before running on your production environment:   Become the Aegir user.  sudo -Hsu aegir    Upgrade Drupal core.  drush @hostmaster pm-updatecode drupal    Verify the upgraded platform.  drush @platform_hostmaster provision-verify    Verify the Hostmaster site.  drush @hostmaster provision-verify", 
            "title": "Manual Upgrade"
        }, 
        {
            "location": "/install/upgrade/#upgrades-with-debian-packages", 
            "text": "Regular update process  Make sure you have the Aegir repository in your sources.list, as per the  installation docs .  If you want to upgrade all packages in one shot, use:  apt-get update\napt-get install aegir3  Note that you can upgrade Aegir in steps. Upgrading your backend to the Debian package should be as simple as running:  apt-get install aegir3-provision  Upgrading the frontend to the Debian package works identically:  apt-get install aegir3-hostmaster  As during install, you can use the DEBUG variable to run Drush in debugging mode:  env DPKG_DEBUG=yes apt-get install aegir3-hostmaster  Note on contrib modules : some Aegir-specific contrib modules may have been installed on your Aegir deployment. This may fail if you are doing a major upgrade. In this case, you will probably want to disable those contrib modules.  Look for directories in  ~/.drush  or  /usr/share/drush/commands  or other components of the Drush commandfiles search path, and move them out of the way.  After the upgrade, download the new versions of the modules that are compatible with the new Aegir release.  Temporarily upgrading to the unstable Debian package  Occasionally, you might be facing a bug that has been fixed in Aegir's git repos, but hasn't made it into a new release yet. The Aegir Project's CI system automatically builds and uploads new Debian packages for each commit to one of the core repos. As such, you  could  download and install the .deb directly. Note that this is  not  recommended.   Ensure that the latest build is passing the  test suite .  Visit http://debian.aegirproject.org/pool/main/a/aegir3-provision/  Find the latest unstable release packages for aegir3-provision and aegir3-hostmaster (they'll be the ones with a long suffix).  Download the Provision package to your Aegir server (e.g.,  wget aegir3-provision_3.7+438.10e2f5b_all.deb )  Download the Hostmaster package to your Aegir server (e.g.,  wget aegir3-hostmaster_3.7+438.10e2f5b_all.deb )  Install the Provision package to your Aegir server (e.g.,  sudo dpkg -i aegir3-provision_3.7+438.10e2f5b_all.deb )  Install the Hostmaster package to your Aegir server (e.g.,  sudo dpkg -i aegir3-hostmaster_3.7+438.10e2f5b_all.deb )   The idea here is that you're only running the unstable version of Aegir until the next full release, at which point the normal update procedure (e.g.,  apt-get install aegir3 ) will install the next stable release.  Upgrading from non-Debian installs  The Debian package supports migrating from existing installs. You will need to move  /var/aegir/.drush/provision  out of the way before going ahead:  tar cfz /var/aegir/backups/provision.tgz /var/aegir/.drush/provision\nrm -rf /var/aegir/.drush/provision  You'll also need to go through steps 1 through 3 of  automatic install on Debian .  Then just install the package as if you were installing from scratch.  Custom distributions  If you have your own makefile, you can go ahead with the above process, but change the makefile to the one you want:  echo debconf aegir/makefile string\n/var/aegir/makefiles/aegir/aegir-koumbit.make | debconf-set-selections\napt-get install aegir3  Usually no questions are asked when upgrading - this allows you to specify the makefile path for your custom distribution of Aegir, even if you're upgrading.  It's also how you can switch distributions.  An example aegir-koumbit.make file could look like:  core = 7.x\napi = 2\n\nincludes[aegir] = \"/usr/share/drush/commands/provision/aegir.make\"\n\nprojects[] = module_filter  Keeping custom distributions up to date  This section describes how to upgrade the code for custom distributions in between debian package upgrades. Here, we assume that Aegir is already installed through the debian package.  Create a new Aegir makefile, or update the custom Aegir makefile. (You can use the makefile in http://git.drupal.org/project/provision as a starting point.) Add modules/features/themes/libraries/whatever to the makefile. Ex:  projects[] = token\nprojects[] = views  Follow the manual upgrade path:  drush @hostmaster hostmaster-migrate URL /path/to/platform --makefile='/path/to/makefile'  Hope it's all green (no errors). If there are errors, fix the makefile.  A new platform should exist, the new site should be in there, verifying. If the task is not running, check that hosting-queued is running. If it's not, restart it using  /etc/init.d/hosting-queued force-reload . (Since hostmaster changed location, hosting-queued may have crashed at this point.)  When the debian package is upgraded, it should create a new hostmaster platform automatically. (You can test this with  dpkg --configure .)  Rolling back the upgrade  If something went wrong with the upgrade, you can rollback by deleting the hostmaster site and redeploying on the older platform:  drush @hostmaster provision-delete\nvi ~/.drush/hostmaster.alias.drushrc.php  Then edit the alias to make the following changes:   change the platform to point to the older platform alias  change the platform root path  change the site path   During the upgrade, a backup was done end you need to find which backup file it was in the backups directory. Use this backup to redeploy the older platform:  drush @hostmaster provision-deploy ~/backups/hostmaster.date.tgz  Recovering a Failed Upgrade  When using the  regular update process  and you encounter an error it leaves the debian package in a broken state.  First you need to figure out why it failed. For example is there a permission problem? Once you determined the issue correct it and clean up the environment.  It may be necessary to remove the new hostmaster platform. It is up to you to determine what state Aegir is in.  Next you need to fix the broken package by running the fix-broken parameter:  apt-get install -f  This tells the debian package system to start through the process again.", 
            "title": "Upgrades with Debian packages"
        }, 
        {
            "location": "/install/upgrade/#upgrades-with-upgradesh-script", 
            "text": "This page describes the upgrade script in the Provision repository that tries to automate much of the upgrade process.  It is imperative that you read the version-specific upgrade notes before attempting to run the upgrade.sh script, as the script will assume you have your system set up appropriately to handle the upgrade process.  You can download the upgrade.sh script for Aegir 3.x with the following command:  wget -O upgrade.sh 'http://cgit.drupalcode.org/provision/plain/upgrade.sh.txt?h=7.x-3.8'  Make sure you download it to somewhere that the aegir user can access in order to execute it.  You may need to edit the script to set any variables that are different from the defaults, for example to upgrade to a different Aegir version.  To do the upgrade, just run the script:  su -s /bin/sh aegir -c \"sh upgrade.sh\"", 
            "title": "Upgrades with upgrade.sh script"
        }, 
        {
            "location": "/install/uninstall/", 
            "text": "Uninstalling Aegir\n\n\n\n\n\n\nUninstalling Aegir\n\n\nWARNING\n\n\nBackup\n\n\nUninstall Aegir\n\n\nDestroy the data\n\n\nDelete configuration files\n\n\nDelete site and platform files\n\n\nDrop the databases and db users\n\n\n\n\n\n\nRemove everything else\n\n\nRemove the aegir user's crontab\n\n\nDelete the aegir user and its home directory, /var/aegir\n\n\nRemove the user from sudoers\n\n\nDelete the symlink/include from Apache\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is no formal method for uninstalling Aegir, but there is also no real mystery either since the system tries to keep itself together in one location, typically /var/aegir.\n\n\nBelow are the steps to completely remove all traces of Aegir from your server. Also included are instructions allowing one to leave Aegir intact, but destroy its data, attempting to reset to an almost post-install setup.\n\n\nIdeally, you would delete all sites and all platforms from the system first. That would take care of deleting all databases and users. But this can take some time and is annoying, so we provide instructions on how to destroy everything.\n\n\nWARNING\n\n\nObviously if you have any sites and platforms currently managed by Aegir, you would want to move them out of the /var/aegir area before you delete it! Ensure you have set up your sites and platforms elsewhere, with Apache vhost files, etc. in their typical locations, or at least out of harm's way before attempting this.\n\n\nWARNING: Performing these steps will remove Aegir from your server and may result in loss of data. Use with caution.\n\n\nRun these commands as a privileged user (such as root). We assume your Aegir installation resides in /var/aegir.\n\n\nBackup\n\n\nYou probably want to backup everything before trashing it.\n\n\nBackup all you need to keep from the /var/aegir/ directory.\n\n\nBackup your database server, we'll be also destroying that.\nUninstall script\n\n\nUninstall Aegir\n\n\nAegir 3.x comes with a hostmaster-uninstall script that allows you to automate good chunks of the steps below.\n\n\nDestroy the data\n\n\nAegir manages three types of data:\n\n\n\n\nconfiguration files - yes, we consider those as data\n\n\nsite and platform files\n\n\nsite databases\n\n\n\n\nDelete configuration files\n\n\nThis step is optional if you are going to remove everything anyways.\n\n\nrm /var/aegir/.drush/*alias.drushrc.php\nrm -r /var/aegir/config/*\n\n\n\nDelete site and platform files\n\n\nAt this point, you could still probably recover by verifying the platforms, which would recreate config files. At this point we start really destroying data.\n\n\nrm -r /var/aegir/platforms/*\nrm -r /var/aegir/hostmaster-*\n\n\n\nDrop the databases and db users\n\n\nThere are no generic instructions for this, since every system differs. Essentially you can perform this within a MySQL shell\n\n\nmysql -u root -p\n\n\n\nUse the DROP DATABASE $databasename; syntax to drop databases. and DROP USER $user; to delete users, example:\n\n\nDROP DATABASE aegirexamplecom;\nDROP USER aegirexamplecom@localhost;\n\n\n\nThis removes the Aegir user, assuming you have not created any site. If you did, you may want to cleanup those sites if you are going to delete them anyways. To see a list of GRANTs that Aegir has made for your database users, you can use a command like the following:\n\n\nUSE mysql;\nSELECT User,Host FROM user WHERE Host='localhost' AND User \n 'root' AND User \n 'debian-sys-maint';\nSELECT Host,Db,User FROM db WHERE User \n '';\n\n\n\nIn Debian, the following will remove all non-system users (which may include non-aegir users!!!).\n\n\nWARNING: DO NOT RUN THIS BEFORE CHECKING WHAT WILL BE DELETED BY RUNNING THE SELECT ABOVE!! THIS WILL DELETE ALL USERS FROM YOUR MYSQL DATABASE!!!\n\n\nDELETE FROM db WHERE User \n '';\nDELETE FROM user WHERE Host='localhost' AND User \n 'root' AND User \n 'debian-sys-maint';\nFLUSH PRIVILEGES;\n\n\n\nThen you will need to DROP DATABASE for every database.\n\n\nConsult the \nGRANT\n and \nDROP\n documentation from MySQL for more information.\n\n\nRemove everything else\n\n\nAt this point, we have removed all data that Aegir manages and we would be ready to reinstall the frontend. If we want to remove all traces, however, there's more work to do.\n\n\nRemove the aegir user's crontab\n\n\ncrontab -r -u aegir\n\n\n\nDelete the aegir user and its home directory, /var/aegir\n\n\nuserdel --remove aegir\n\n\n\nThis will also remove the user from the www-data group.\n\n\nRemove the user from sudoers\n\n\nrm /etc/sudoers.d/aegir\n\n\n\nDelete the symlink/include from Apache\n\n\nDepending on your installation and OS this may vary.\n\n\nGenerally:\n\n\nrm /etc/apache2/conf.d/aegir.conf # for Apache\nrm /etc/nginx/conf.d/aegir.conf # for Nginx\n\n\n\nIf Apache's Include statements were contained in a global system httpd.conf file or similar, you will need to remove these lines manually.\n\n\nRestart the Web server when you have completed this.", 
            "title": "Uninstall"
        }, 
        {
            "location": "/install/uninstall/#uninstalling-aegir", 
            "text": "Uninstalling Aegir  WARNING  Backup  Uninstall Aegir  Destroy the data  Delete configuration files  Delete site and platform files  Drop the databases and db users    Remove everything else  Remove the aegir user's crontab  Delete the aegir user and its home directory, /var/aegir  Remove the user from sudoers  Delete the symlink/include from Apache          There is no formal method for uninstalling Aegir, but there is also no real mystery either since the system tries to keep itself together in one location, typically /var/aegir.  Below are the steps to completely remove all traces of Aegir from your server. Also included are instructions allowing one to leave Aegir intact, but destroy its data, attempting to reset to an almost post-install setup.  Ideally, you would delete all sites and all platforms from the system first. That would take care of deleting all databases and users. But this can take some time and is annoying, so we provide instructions on how to destroy everything.", 
            "title": "Uninstalling Aegir"
        }, 
        {
            "location": "/install/uninstall/#warning", 
            "text": "Obviously if you have any sites and platforms currently managed by Aegir, you would want to move them out of the /var/aegir area before you delete it! Ensure you have set up your sites and platforms elsewhere, with Apache vhost files, etc. in their typical locations, or at least out of harm's way before attempting this.  WARNING: Performing these steps will remove Aegir from your server and may result in loss of data. Use with caution.  Run these commands as a privileged user (such as root). We assume your Aegir installation resides in /var/aegir.", 
            "title": "WARNING"
        }, 
        {
            "location": "/install/uninstall/#backup", 
            "text": "You probably want to backup everything before trashing it.  Backup all you need to keep from the /var/aegir/ directory.  Backup your database server, we'll be also destroying that.\nUninstall script", 
            "title": "Backup"
        }, 
        {
            "location": "/install/uninstall/#uninstall-aegir", 
            "text": "Aegir 3.x comes with a hostmaster-uninstall script that allows you to automate good chunks of the steps below.  Destroy the data  Aegir manages three types of data:   configuration files - yes, we consider those as data  site and platform files  site databases   Delete configuration files  This step is optional if you are going to remove everything anyways.  rm /var/aegir/.drush/*alias.drushrc.php\nrm -r /var/aegir/config/*  Delete site and platform files  At this point, you could still probably recover by verifying the platforms, which would recreate config files. At this point we start really destroying data.  rm -r /var/aegir/platforms/*\nrm -r /var/aegir/hostmaster-*  Drop the databases and db users  There are no generic instructions for this, since every system differs. Essentially you can perform this within a MySQL shell  mysql -u root -p  Use the DROP DATABASE $databasename; syntax to drop databases. and DROP USER $user; to delete users, example:  DROP DATABASE aegirexamplecom;\nDROP USER aegirexamplecom@localhost;  This removes the Aegir user, assuming you have not created any site. If you did, you may want to cleanup those sites if you are going to delete them anyways. To see a list of GRANTs that Aegir has made for your database users, you can use a command like the following:  USE mysql;\nSELECT User,Host FROM user WHERE Host='localhost' AND User   'root' AND User   'debian-sys-maint';\nSELECT Host,Db,User FROM db WHERE User   '';  In Debian, the following will remove all non-system users (which may include non-aegir users!!!).  WARNING: DO NOT RUN THIS BEFORE CHECKING WHAT WILL BE DELETED BY RUNNING THE SELECT ABOVE!! THIS WILL DELETE ALL USERS FROM YOUR MYSQL DATABASE!!!  DELETE FROM db WHERE User   '';\nDELETE FROM user WHERE Host='localhost' AND User   'root' AND User   'debian-sys-maint';\nFLUSH PRIVILEGES;  Then you will need to DROP DATABASE for every database.  Consult the  GRANT  and  DROP  documentation from MySQL for more information.  Remove everything else  At this point, we have removed all data that Aegir manages and we would be ready to reinstall the frontend. If we want to remove all traces, however, there's more work to do.  Remove the aegir user's crontab  crontab -r -u aegir  Delete the aegir user and its home directory, /var/aegir  userdel --remove aegir  This will also remove the user from the www-data group.  Remove the user from sudoers  rm /etc/sudoers.d/aegir  Delete the symlink/include from Apache  Depending on your installation and OS this may vary.  Generally:  rm /etc/apache2/conf.d/aegir.conf # for Apache\nrm /etc/nginx/conf.d/aegir.conf # for Nginx  If Apache's Include statements were contained in a global system httpd.conf file or similar, you will need to remove these lines manually.  Restart the Web server when you have completed this.", 
            "title": "Uninstall Aegir"
        }, 
        {
            "location": "/usage/", 
            "text": "The Aegir Interface\n\n\n\n\n\n\nThe Aegir Interface\n\n\nHome\n\n\nAdmin menu\n\n\nThe Eldir theme\n\n\nBlocks\n\n\nQueues\n\n\nNavigation\n\n\n\n\n\n\nContent\n\n\n\n\n\n\nModalframe\n\n\n\n\n\n\nWorking as aegir user\n\n\n\n\n\n\nSo you've installed Aegir, arrived at the home page of your installation and are waiting for the magic to begin. This section of the handbook describe how to use Aegir in the day-to-day management of sites and platforms.\n\n\nOn this page we'll introduce you to Aegir and how easy it is to use. In the pages that follow, we'll look in more depth at the three core entities in Aegir: \nsites\n, \nplatforms\n and servers.\n\n\nHome\n\n\nOnce you've successfully completed an Aegir installation, you'll be presented with the homepage, titled 'Home'. The homepage defaults to the list of sites hosted on this Aegir instance.\n\n\n\n\nIn a standard installation there won't be any sites listed here yet, other than the main Aegir site itself, which gets imported into the system during the installation. This is normal - Aegir even recognises itself as a Drupal site on your server, and to a limited degree is capable of 'managing' itself. Skynet is here!\n\n\nAdmin menu\n\n\nAt the very top of the screen you'll see the Admin menu, which you may recognise as a popular contrib module installed on many other sites, perhaps even some of your own.\n\n\n\n\nThis gives you access to all the normal Drupal administrative functionality, which is not normally required in everyday Aegir user, but it also does provide you access to the 'Hosting' administrative settings where you can enable features that ship with Aegir and make other configuration changes.\n\n\nThe Eldir theme\n\n\nThe Aegir project ships with a default theme called 'Eldir' which is the classic navy blue, simplistic functional interface consistent with the overall Aegir brand. Eldir has been specifically designed for Aegir - nonetheless it is a Drupal theme like any other.\n\n\nBlocks\n\n\nEldir has a main content section and a right sidebar. In the sidebar, several\nblocks are enabled by default.\n\n\nQueues\n\n\nThe first is 'Queues'. Queues are Aegir's method of creating 'tasks' and putting them into a pool for the backend system to execute.\n\n\nTwo types of Queue exist in Aegir, though only one is enabled by default. These are:\n\n\n\n\nthe 'Task' queue (sending tasks to the backend to be executed by the 'aegir' user from the command line, such as installing, deleting, enabling, migrating sites and platforms)\n\n\nthe 'Cron' queue, which, when the Cron feature is enabled, runs cron on your site in batches.\n\n\n\n\nThe task queue that you'll see upon installation shows all the tasks that Aegir has recently run, or is about to run. It shows the last 5, but there is a link to see the full list of historical tasks.\n\n\n\n\nAfter installation there will be as many as three tasks in the task queue:\n\n\n\n\na Verify task for the main 'server' node,\n\n\nthe Import task of the main Aegir site itself, and\n\n\nthe Verify task of the main Aegir 'platform' that hosts the Aegir site.\n\n\n\n\nThese tasks are kicked off during the actual Aegir installation.\n\n\nA task is colored a neutral blue-grey if currently queued but not running yet white with a spinning wheel if currently in the process of being run green if completed successfully red if there was an error\n\n\nIt's worth checking the queues regularly to see that the Task or Cron queues are being run regularly. If not you may have a problem with the cron setup on your server - see the FAQ.\n\n\nNavigation\n\n\nUnderneath the Summary is the standard Navigation block in Drupal.\n\n\n\n\nContent\n\n\nThe main content body in the Aegir interface lists:\n\n\n\n\nyour sites when on the frontpage or viewing the 'Sites' tab\n\n\nyour platforms when viewing the 'Platforms' tab\n\n\nyour servers when viewing the 'Servers' tab\n\n\n\n\nThe main content area also is where nodes are viewable or editable, such as viewing more information on a site, platform or server, or editing/creating new entities of these types.\n\n\nModalframe\n\n\nWhen clicking on a task's 'Run' or 'View' buttons, a modalframe dialog is loaded in the browser. This is to provide a fluid, attractive experience for the user without requiring them to leave the current page or node to perform operations on a site. When the action is performed on the task, the modalframe will close and the user will be returned to the page they were on when they clicked that button.\n\n\n\n\nWorking as aegir user\n\n\nIt can be convenient to do stuff as the aegir user. The default shell of the aegir user is \n/bin/false\n, so you have to make sure to use something more usable:\n\n\nsudo su - aegir -s /bin/bash\n\n\n\nGNU Screen is a super useful window manager for the console. When launching screen you may get errors like:\n\n\nCannot open your terminal '/dev/pts/6' - please check.\n\n\n\nYou can get around this by running:\n\n\nscript /dev/null\n\n\n\nAll in all this works nicely:\n\n\nsudo su aegir -s /bin/bash -c \"script -q /dev/null\"\n\n\n\nIt can be convenient to put it in a little script as \n/usr/local/bin/suaegir\n, or add it as as a shell alias.\n\n\nAllowing other users besides root on your system to run commands as aegir can also be very convenient. However, it entails some security considerations.\n\n\nIf you wish to allow other users on your system to run commands as the aegir user using sudo, without allowing them to use sudo generally, you can add the following two lines to your \n/etc/sudoers.d/aegir\n, or (\n/etc/sudoers\n using \nvisudo\n):\n\n\nUser_Alias      AEGIRUSERS = comma, separated, list, of, users\nAEGIRUSERS      ALL = (aegir) ALL\n\n\n\nIf you want to allow these users to use aegir without entering a password, simply change the second line to this:\n\n\nAEGIRUSERS      ALL = (aegir) NOPASSWD:ALL\n\n\n\nAn alternative to allowing multiple users to operate as 'aegir' is to use \nProvision ACL\n.", 
            "title": "Using Aegir"
        }, 
        {
            "location": "/usage/#the-aegir-interface", 
            "text": "The Aegir Interface  Home  Admin menu  The Eldir theme  Blocks  Queues  Navigation    Content    Modalframe    Working as aegir user    So you've installed Aegir, arrived at the home page of your installation and are waiting for the magic to begin. This section of the handbook describe how to use Aegir in the day-to-day management of sites and platforms.  On this page we'll introduce you to Aegir and how easy it is to use. In the pages that follow, we'll look in more depth at the three core entities in Aegir:  sites ,  platforms  and servers.", 
            "title": "The Aegir Interface"
        }, 
        {
            "location": "/usage/#home", 
            "text": "Once you've successfully completed an Aegir installation, you'll be presented with the homepage, titled 'Home'. The homepage defaults to the list of sites hosted on this Aegir instance.   In a standard installation there won't be any sites listed here yet, other than the main Aegir site itself, which gets imported into the system during the installation. This is normal - Aegir even recognises itself as a Drupal site on your server, and to a limited degree is capable of 'managing' itself. Skynet is here!", 
            "title": "Home"
        }, 
        {
            "location": "/usage/#admin-menu", 
            "text": "At the very top of the screen you'll see the Admin menu, which you may recognise as a popular contrib module installed on many other sites, perhaps even some of your own.   This gives you access to all the normal Drupal administrative functionality, which is not normally required in everyday Aegir user, but it also does provide you access to the 'Hosting' administrative settings where you can enable features that ship with Aegir and make other configuration changes.", 
            "title": "Admin menu"
        }, 
        {
            "location": "/usage/#the-eldir-theme", 
            "text": "The Aegir project ships with a default theme called 'Eldir' which is the classic navy blue, simplistic functional interface consistent with the overall Aegir brand. Eldir has been specifically designed for Aegir - nonetheless it is a Drupal theme like any other.  Blocks  Eldir has a main content section and a right sidebar. In the sidebar, several\nblocks are enabled by default.  Queues  The first is 'Queues'. Queues are Aegir's method of creating 'tasks' and putting them into a pool for the backend system to execute.  Two types of Queue exist in Aegir, though only one is enabled by default. These are:   the 'Task' queue (sending tasks to the backend to be executed by the 'aegir' user from the command line, such as installing, deleting, enabling, migrating sites and platforms)  the 'Cron' queue, which, when the Cron feature is enabled, runs cron on your site in batches.   The task queue that you'll see upon installation shows all the tasks that Aegir has recently run, or is about to run. It shows the last 5, but there is a link to see the full list of historical tasks.   After installation there will be as many as three tasks in the task queue:   a Verify task for the main 'server' node,  the Import task of the main Aegir site itself, and  the Verify task of the main Aegir 'platform' that hosts the Aegir site.   These tasks are kicked off during the actual Aegir installation.  A task is colored a neutral blue-grey if currently queued but not running yet white with a spinning wheel if currently in the process of being run green if completed successfully red if there was an error  It's worth checking the queues regularly to see that the Task or Cron queues are being run regularly. If not you may have a problem with the cron setup on your server - see the FAQ.  Navigation  Underneath the Summary is the standard Navigation block in Drupal.   Content  The main content body in the Aegir interface lists:   your sites when on the frontpage or viewing the 'Sites' tab  your platforms when viewing the 'Platforms' tab  your servers when viewing the 'Servers' tab   The main content area also is where nodes are viewable or editable, such as viewing more information on a site, platform or server, or editing/creating new entities of these types.", 
            "title": "The Eldir theme"
        }, 
        {
            "location": "/usage/#modalframe", 
            "text": "When clicking on a task's 'Run' or 'View' buttons, a modalframe dialog is loaded in the browser. This is to provide a fluid, attractive experience for the user without requiring them to leave the current page or node to perform operations on a site. When the action is performed on the task, the modalframe will close and the user will be returned to the page they were on when they clicked that button.", 
            "title": "Modalframe"
        }, 
        {
            "location": "/usage/#working-as-aegir-user", 
            "text": "It can be convenient to do stuff as the aegir user. The default shell of the aegir user is  /bin/false , so you have to make sure to use something more usable:  sudo su - aegir -s /bin/bash  GNU Screen is a super useful window manager for the console. When launching screen you may get errors like:  Cannot open your terminal '/dev/pts/6' - please check.  You can get around this by running:  script /dev/null  All in all this works nicely:  sudo su aegir -s /bin/bash -c \"script -q /dev/null\"  It can be convenient to put it in a little script as  /usr/local/bin/suaegir , or add it as as a shell alias.  Allowing other users besides root on your system to run commands as aegir can also be very convenient. However, it entails some security considerations.  If you wish to allow other users on your system to run commands as the aegir user using sudo, without allowing them to use sudo generally, you can add the following two lines to your  /etc/sudoers.d/aegir , or ( /etc/sudoers  using  visudo ):  User_Alias      AEGIRUSERS = comma, separated, list, of, users\nAEGIRUSERS      ALL = (aegir) ALL  If you want to allow these users to use aegir without entering a password, simply change the second line to this:  AEGIRUSERS      ALL = (aegir) NOPASSWD:ALL  An alternative to allowing multiple users to operate as 'aegir' is to use  Provision ACL .", 
            "title": "Working as aegir user"
        }, 
        {
            "location": "/usage/verify/", 
            "text": "Verifying servers, platforms and sites\n\n\n\n\n\n\nVerifying servers, platforms and sites\n\n\nWhat happens in a Verify task?\n\n\nServers\n\n\nPlatforms\n\n\nSites\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne of the common tasks available to all three of the major entities in Aegir (Servers, Platforms and Sites) is the Verify task.\n\n\nYou can think of the Verify task as a sort of routine 'sanity check' of that specific entity, with a sort of checklist of expected behaviour with which it runs through to confirm that the entity is operating as normal.\n\n\nThe Verify task also can be used to regularly 'sync' your platform or site with the Aegir package registry, to keep it up to date on whether any modules have changed (been removed or enabled/disabled). This will aid running Migration and Clone tasks, since Aegir needs to have a precise knowledge of what modules, themes or profiles are on the system before it can accurately judge whether an upgrade is possible.\n\n\nIt is recommended to run the Verify task on your entities routinely to keep them in sync with the Aegir database, and to run a Verify of your site, current platform and target platform prior to attempting a Migration or Clone task.\n\n\nWhat happens in a Verify task?\n\n\nServers\n\n\n\n\nWhen you add a new server node in the Aegir frontend, a Verify task is spawned for the first time.\n\n\nThe configuration directories are created if they don't exist and set to the correct permissions, or set to the correct permissions if they already existed but were incorrectly set\n\n\nIf the server is the master server, some additional configuration and backup directories are created\n\n\nAegir generates or updates a Drush alias file for the server.\n\n\nSome configuration directories are synced from the master server to remote servers\n\n\nChecks that new databases and database users can be created\n\n\nChecks that the HTTP web server can be restarted\n\n\n\n\nPlatforms\n\n\n\n\nWhen you add a new platform node in the Aegir frontend, a Verify task is spawned for the first time.\n\n\nIf the platform directory didn't exist on the file system and a Drush makefile was provided, Drush Make will be called to build the platform in that location.\n\n\nIf the platform directory didn't exist and no Drush makefile was provided, the task will fail with the error 'Does not contain a valid Drupal installation'.\n\n\nChecks that the permissions are correct, at least of the 'sites' folder of the platform directory (so we can create new sites here)\n\n\nSearches for existing sites on the platform that are not yet in the system.\n\n\nThese sites will be 'imported' into Aegir.\n\n\nScans the platform and builds or updates the package registry in the Aegir database.\n\n\nGenerates or updates a Drush alias for the platform, and a drushrc.php file in the platform's directory root.\n\n\nReads in the platform's .htaccess file into a platform-wide web server vhost configuration file.\n\n\nRestart the web server\n\n\n\n\nSites\n\n\n\n\nWhen you add a new site in the Aegir system, an Install task is spawned,\n\n\nThis is contrasted with the above entities which spawn only Verify tasks initially.\n\n\nScans the site and builds or updates the package registry in the Aegir database.\n\n\nCreates important directories in the site folder, such as 'files'.\n\n\nSets or corrects the appropriate permissions\n\n\nManages/updates any site aliases (symlinks, redirects etc)\n\n\nRe-generates the settings.php\n\n\nRe-generates the site's web server vhost configuration file\n\n\nRe-generates the site's drushrc.php and a Drush alias\n\n\nClears caches.\n\n\n\n\nYou can run or re-run the Verify task at any time on a server, platform or site, and it is encouraged to do so.\n\n\nCertain tasks, such as 'deploy' when a site is being imported, automatically imply a verify of the site.\n\n\nEach Verify task, like all tasks generated by Aegir, emit a 'task log' available for review after the task has completed (or failed).\n\n\nIf a Verify task fails, and the task log does not provide enough information to help you resolve the problem, trying running drush @example.org provision-verify --debug from the command line to find out what caused the problem. Remember to replace 'example.org' with the URL of the site you are trying to verify.", 
            "title": "Verifying servers, platforms and sites"
        }, 
        {
            "location": "/usage/verify/#verifying-servers-platforms-and-sites", 
            "text": "Verifying servers, platforms and sites  What happens in a Verify task?  Servers  Platforms  Sites        One of the common tasks available to all three of the major entities in Aegir (Servers, Platforms and Sites) is the Verify task.  You can think of the Verify task as a sort of routine 'sanity check' of that specific entity, with a sort of checklist of expected behaviour with which it runs through to confirm that the entity is operating as normal.  The Verify task also can be used to regularly 'sync' your platform or site with the Aegir package registry, to keep it up to date on whether any modules have changed (been removed or enabled/disabled). This will aid running Migration and Clone tasks, since Aegir needs to have a precise knowledge of what modules, themes or profiles are on the system before it can accurately judge whether an upgrade is possible.  It is recommended to run the Verify task on your entities routinely to keep them in sync with the Aegir database, and to run a Verify of your site, current platform and target platform prior to attempting a Migration or Clone task.", 
            "title": "Verifying servers, platforms and sites"
        }, 
        {
            "location": "/usage/verify/#what-happens-in-a-verify-task", 
            "text": "Servers   When you add a new server node in the Aegir frontend, a Verify task is spawned for the first time.  The configuration directories are created if they don't exist and set to the correct permissions, or set to the correct permissions if they already existed but were incorrectly set  If the server is the master server, some additional configuration and backup directories are created  Aegir generates or updates a Drush alias file for the server.  Some configuration directories are synced from the master server to remote servers  Checks that new databases and database users can be created  Checks that the HTTP web server can be restarted   Platforms   When you add a new platform node in the Aegir frontend, a Verify task is spawned for the first time.  If the platform directory didn't exist on the file system and a Drush makefile was provided, Drush Make will be called to build the platform in that location.  If the platform directory didn't exist and no Drush makefile was provided, the task will fail with the error 'Does not contain a valid Drupal installation'.  Checks that the permissions are correct, at least of the 'sites' folder of the platform directory (so we can create new sites here)  Searches for existing sites on the platform that are not yet in the system.  These sites will be 'imported' into Aegir.  Scans the platform and builds or updates the package registry in the Aegir database.  Generates or updates a Drush alias for the platform, and a drushrc.php file in the platform's directory root.  Reads in the platform's .htaccess file into a platform-wide web server vhost configuration file.  Restart the web server   Sites   When you add a new site in the Aegir system, an Install task is spawned,  This is contrasted with the above entities which spawn only Verify tasks initially.  Scans the site and builds or updates the package registry in the Aegir database.  Creates important directories in the site folder, such as 'files'.  Sets or corrects the appropriate permissions  Manages/updates any site aliases (symlinks, redirects etc)  Re-generates the settings.php  Re-generates the site's web server vhost configuration file  Re-generates the site's drushrc.php and a Drush alias  Clears caches.   You can run or re-run the Verify task at any time on a server, platform or site, and it is encouraged to do so.  Certain tasks, such as 'deploy' when a site is being imported, automatically imply a verify of the site.  Each Verify task, like all tasks generated by Aegir, emit a 'task log' available for review after the task has completed (or failed).  If a Verify task fails, and the task log does not provide enough information to help you resolve the problem, trying running drush @example.org provision-verify --debug from the command line to find out what caused the problem. Remember to replace 'example.org' with the URL of the site you are trying to verify.", 
            "title": "What happens in a Verify task?"
        }, 
        {
            "location": "/usage/sites/", 
            "text": "Sites in Aegir\n\n\n\n\n\n\nSites in Aegir\n\n\nMultisite\n\n\nSettings.php and cloaked credentials\n\n\n'Files' rewrite rule\n\n\nThe .htaccess\n\n\nPermissions\n\n\nThe drushrc.php\n\n\nDrush aliases\n\n\n\n\n\n\n\n\n\n\nSo, you've provisioned a site using Aegir, and you're poking about looking at the system and what it's done.\n\n\nA Drupal site managed by Aegir is really mostly the same as any other Drupal site. However, there are a few very minor differences that might surprise or confuse some users.\n\n\nNone of these things adversely affect the running of your site - they are designed to actually make your life even easier.\n\n\nMultisite\n\n\nAegir installs sites on a platform, which means it places the site directory in \n/var/aegir/platforms/\nyour_platform\n/sites/\nyoursite.com\n. Many sites can all be installed alongside each other inside a platform's 'sites' directory. This is a standard, built-in Drupal feature known as 'multisite', and it is not unique to Aegir.\n\n\nSettings.php and cloaked credentials\n\n\nWithin a multisite structure where multiple sites share the same 'Document Root' or codebase on the system, administrative users on sites that have PHP access are capable of manipulating the server into exposing the database credentials of other sites in that codebase with reasonable ease. This is a pretty serious disclosure of sensitive information, although it is only possible if users have PHP execution privileges. Any multisite installation of Drupal (even without Aegir) has the potential for this to be a problem.\n\n\nBut security is very important to Aegir, and that's why special precautions are enabled by default to avoid this issue.\n\n\nEssentially, when Aegir installs a site and creates the \nsettings.php\n for that site, it 'masks' or 'cloaks' the database credentials, replacing them instead with environment variables fetched from the $_SERVER array in PHP.\n\n\nThe credentials are instead set in the Web server's configuration file for the site, which is stored outside the 'Document Root' or platform codebase, and is therefore safe from prying eyes by administrative users.\n\n\nThe Web server along with PHP is able to read the environment variables from this configuration and understand the settings.php's mask, allowing your site to work as normal.\n\n\nIf this feature confuses you or is inconvenient, you have a few options available to you:\n\n\n\n\nThe two supported Web servers, Apache and Nginx, cloak the credentials. You can use another Web server.\n\n\nSet \n$options['provision_db_cloaking'] = FALSE;\n in the site's \ndrushrc.php\n and then re-Verify the site.\n\n\nStop worrying and enjoy the extra security Aegir provides you.\n\n\n\n\nAlso note that when you run the Backup task against a site, it actually uncloaks the credentials of the settings.php that it saves in a tarball with the rest of the site. The benefit of this is that you are able to take the backup tarball and deploy it on a non-Aegir server, using standard Drupal, and your \nsettings.php\n will be in 'normal' Drupal form for that environment. This also makes it easier to 'import' sites from previous-Aegir installations into new Aegir installations if need be.\n\n\n'Files' rewrite rule\n\n\nEveryone knows about the inconvenience of having to place an img src in your node that looks like this:\n\n\nimg src=\"/sites/www.example.com/files/mycutecat.jpg\"\n\n\n\n\nIf you ever deploy this site under a new URL or for whatever reason this path changes, those images or links will become broken on the site. That's because this information ends up stored in the database, and it can be a pain to fix up.\n\n\nWhen you Migrate or Clone a site with Aegir, some paths in the database are automatically updated where they are consistent enough to be able to be scripted by Aegir (such as those in the files table).\n\n\nHowever, Aegir can't fix up actual node body content, as that would be risky, and as a rule, Aegir doesn't like tampering that deeply into your data. Aegir exists to help you manage your data, but not manipulate it except where absolutely necessary.\n\n\nFortunately, what Aegir can offer is adding a '/files' redirect in the Apache vhost configurations. This pattern-matching rule allows you to enter this into your node instead:\n\n\nimg src=\"/files/mycutecat.jpg\"\n\n\n\n\nand you can expect that to actually point to the same place. When you clone this site or rename it to a new URL, this path doesn't actually need to change, because the Rewrite rule will be modified to point to the new location, thus avoiding breakages.\n\n\nIt's not perfect, and people are often frustrated with Aegir not 'just fixing' everything like this, despite the fact the above is more than what Drupal does for you out of the box!\n\n\nFortunately, it's expected that Drupal 7 will improve this sort of thing altogether and things will hopefully become easier.\n\n\nThe .htaccess\n\n\nUsing a .htaccess with an Allow Override all directive in Apache can be a major performance killer, because it requires Apache to stat each subdirectory of the codebase looking for overrides in .htaccess.\n\n\nAs a result, Aegir disables the reading of the Drupal .htaccess in the runtime environment.\n\n\nThis does not mean that the .htaccess is not needed. Instead, when you run the Verify task against a Platform, the .htaccess is studied by Aegir and its contents are copied into the platform-wide Apache vhost configuration, typically located in \n/var/aegir/config/server_master/apache/platform.d\n\n\nNeed to make a modification to the .htaccess? Simple: you can simply edit it in-place as you normally would, but you must re-Verify the platform in Aegir afterward, in order for those new or modified settings to be 'loaded in' to the platform vhost file.\n\n\nThe end result is improved performance for your sites, without losing any functionality, as you can still customise the \n.htaccess\n to your liking.\n\n\nPermissions\n\n\nPermissions in Aegir generally follow these rules:\n\n\n\n\nEverything is owned by aegir:aegir, and the 'other' bit is read-only in most cases\n\n\nThings that need to be written to (uploads) by the web server, have the 'group' bit of 'www-data' (or whatever the relevant user/group is on your system) with the group bit writable\n\n\nAnything that is sensitive information, such as the data in the configuration files, are owned by aegir:aegir or aegir:www-data when the web server needs to read those files, with no read access by the 'other' bit.\n\n\n\n\nThe use of the 'aegir' user on the system is vital for normal Aegir functionality, however it can be confusing to users who wish to edit files (say, theme development on a site, or downloading new modules) as a user other than Aegir.\n\n\nThe methodology recommended in these situations is:\n\n\n\n\nAdd a standard user to your server, say, 'john'\n\n\nAdd that 'john' user to the 'aegir' group: \nadduser john aegir\n\n\n\n\nBy default, Aegir sets the 'modules', 'themes' and 'libraries' directories so they are aegir:aegir with the group bit writable. This means that any user on the system who is a member of the 'aegir' group, is then able to add, delete, or modify files within those directories.\n\n\nThe drushrc.php\n\n\nYou may have noticed a file called 'drushrc.php' on your system, stored alongside the settings.php of a site (and another in the root-level directory of your platform or Drupal core codebase). What's this about?\n\n\nThe drushrc.php is a file that contains important metadata about your site or platform. The significant portion of the file contains metadata on all 'packages' (modules, themes, install profiles and libraries) in that part of the system, including their version numbers and whether they are actually enabled or not.\n\n\nThis file is generated by Aegir whenever a platform is verified, and whenever a site is installed or verified.\n\n\nParadoxically, settings from the existing drushrc.php are able to be 'read in' by Aegir when performing those tasks and many others.\n\n\nThe drushrc.php generally should not be edited unless you know what you're doing. As previously discussed above, some supported configurations such as the disabling of the 'cloaking' of database credentials in a site's settings.php, are able to be set in the drushrc.php to provoke the system into modifying how that site is to be treated.\n\n\nDrush aliases\n\n\nAegir automatically generates a Drush alias for each site that is installed. By\ndefault this alias is named after the site URL. So, for the site at\nhttp://www.example.com, the alias generated by Aegir will be\n\n@www.example.com\n.\n\n\nAegir also generates a special alias, \n@hostmaster\n. This alias represents the\nAegir site itself, and can be useful in triggering tasks from the command line.\nA convenient short form of this alias, \n@hm\n is also provided.", 
            "title": "Sites"
        }, 
        {
            "location": "/usage/sites/#sites-in-aegir", 
            "text": "Sites in Aegir  Multisite  Settings.php and cloaked credentials  'Files' rewrite rule  The .htaccess  Permissions  The drushrc.php  Drush aliases      So, you've provisioned a site using Aegir, and you're poking about looking at the system and what it's done.  A Drupal site managed by Aegir is really mostly the same as any other Drupal site. However, there are a few very minor differences that might surprise or confuse some users.  None of these things adversely affect the running of your site - they are designed to actually make your life even easier.", 
            "title": "Sites in Aegir"
        }, 
        {
            "location": "/usage/sites/#multisite", 
            "text": "Aegir installs sites on a platform, which means it places the site directory in  /var/aegir/platforms/ your_platform /sites/ yoursite.com . Many sites can all be installed alongside each other inside a platform's 'sites' directory. This is a standard, built-in Drupal feature known as 'multisite', and it is not unique to Aegir.", 
            "title": "Multisite"
        }, 
        {
            "location": "/usage/sites/#settingsphp-and-cloaked-credentials", 
            "text": "Within a multisite structure where multiple sites share the same 'Document Root' or codebase on the system, administrative users on sites that have PHP access are capable of manipulating the server into exposing the database credentials of other sites in that codebase with reasonable ease. This is a pretty serious disclosure of sensitive information, although it is only possible if users have PHP execution privileges. Any multisite installation of Drupal (even without Aegir) has the potential for this to be a problem.  But security is very important to Aegir, and that's why special precautions are enabled by default to avoid this issue.  Essentially, when Aegir installs a site and creates the  settings.php  for that site, it 'masks' or 'cloaks' the database credentials, replacing them instead with environment variables fetched from the $_SERVER array in PHP.  The credentials are instead set in the Web server's configuration file for the site, which is stored outside the 'Document Root' or platform codebase, and is therefore safe from prying eyes by administrative users.  The Web server along with PHP is able to read the environment variables from this configuration and understand the settings.php's mask, allowing your site to work as normal.  If this feature confuses you or is inconvenient, you have a few options available to you:   The two supported Web servers, Apache and Nginx, cloak the credentials. You can use another Web server.  Set  $options['provision_db_cloaking'] = FALSE;  in the site's  drushrc.php  and then re-Verify the site.  Stop worrying and enjoy the extra security Aegir provides you.   Also note that when you run the Backup task against a site, it actually uncloaks the credentials of the settings.php that it saves in a tarball with the rest of the site. The benefit of this is that you are able to take the backup tarball and deploy it on a non-Aegir server, using standard Drupal, and your  settings.php  will be in 'normal' Drupal form for that environment. This also makes it easier to 'import' sites from previous-Aegir installations into new Aegir installations if need be.", 
            "title": "Settings.php and cloaked credentials"
        }, 
        {
            "location": "/usage/sites/#files-rewrite-rule", 
            "text": "Everyone knows about the inconvenience of having to place an img src in your node that looks like this:  img src=\"/sites/www.example.com/files/mycutecat.jpg\"   If you ever deploy this site under a new URL or for whatever reason this path changes, those images or links will become broken on the site. That's because this information ends up stored in the database, and it can be a pain to fix up.  When you Migrate or Clone a site with Aegir, some paths in the database are automatically updated where they are consistent enough to be able to be scripted by Aegir (such as those in the files table).  However, Aegir can't fix up actual node body content, as that would be risky, and as a rule, Aegir doesn't like tampering that deeply into your data. Aegir exists to help you manage your data, but not manipulate it except where absolutely necessary.  Fortunately, what Aegir can offer is adding a '/files' redirect in the Apache vhost configurations. This pattern-matching rule allows you to enter this into your node instead:  img src=\"/files/mycutecat.jpg\"   and you can expect that to actually point to the same place. When you clone this site or rename it to a new URL, this path doesn't actually need to change, because the Rewrite rule will be modified to point to the new location, thus avoiding breakages.  It's not perfect, and people are often frustrated with Aegir not 'just fixing' everything like this, despite the fact the above is more than what Drupal does for you out of the box!  Fortunately, it's expected that Drupal 7 will improve this sort of thing altogether and things will hopefully become easier.", 
            "title": "'Files' rewrite rule"
        }, 
        {
            "location": "/usage/sites/#the-htaccess", 
            "text": "Using a .htaccess with an Allow Override all directive in Apache can be a major performance killer, because it requires Apache to stat each subdirectory of the codebase looking for overrides in .htaccess.  As a result, Aegir disables the reading of the Drupal .htaccess in the runtime environment.  This does not mean that the .htaccess is not needed. Instead, when you run the Verify task against a Platform, the .htaccess is studied by Aegir and its contents are copied into the platform-wide Apache vhost configuration, typically located in  /var/aegir/config/server_master/apache/platform.d  Need to make a modification to the .htaccess? Simple: you can simply edit it in-place as you normally would, but you must re-Verify the platform in Aegir afterward, in order for those new or modified settings to be 'loaded in' to the platform vhost file.  The end result is improved performance for your sites, without losing any functionality, as you can still customise the  .htaccess  to your liking.", 
            "title": "The .htaccess"
        }, 
        {
            "location": "/usage/sites/#permissions", 
            "text": "Permissions in Aegir generally follow these rules:   Everything is owned by aegir:aegir, and the 'other' bit is read-only in most cases  Things that need to be written to (uploads) by the web server, have the 'group' bit of 'www-data' (or whatever the relevant user/group is on your system) with the group bit writable  Anything that is sensitive information, such as the data in the configuration files, are owned by aegir:aegir or aegir:www-data when the web server needs to read those files, with no read access by the 'other' bit.   The use of the 'aegir' user on the system is vital for normal Aegir functionality, however it can be confusing to users who wish to edit files (say, theme development on a site, or downloading new modules) as a user other than Aegir.  The methodology recommended in these situations is:   Add a standard user to your server, say, 'john'  Add that 'john' user to the 'aegir' group:  adduser john aegir   By default, Aegir sets the 'modules', 'themes' and 'libraries' directories so they are aegir:aegir with the group bit writable. This means that any user on the system who is a member of the 'aegir' group, is then able to add, delete, or modify files within those directories.", 
            "title": "Permissions"
        }, 
        {
            "location": "/usage/sites/#the-drushrcphp", 
            "text": "You may have noticed a file called 'drushrc.php' on your system, stored alongside the settings.php of a site (and another in the root-level directory of your platform or Drupal core codebase). What's this about?  The drushrc.php is a file that contains important metadata about your site or platform. The significant portion of the file contains metadata on all 'packages' (modules, themes, install profiles and libraries) in that part of the system, including their version numbers and whether they are actually enabled or not.  This file is generated by Aegir whenever a platform is verified, and whenever a site is installed or verified.  Paradoxically, settings from the existing drushrc.php are able to be 'read in' by Aegir when performing those tasks and many others.  The drushrc.php generally should not be edited unless you know what you're doing. As previously discussed above, some supported configurations such as the disabling of the 'cloaking' of database credentials in a site's settings.php, are able to be set in the drushrc.php to provoke the system into modifying how that site is to be treated.", 
            "title": "The drushrc.php"
        }, 
        {
            "location": "/usage/sites/#drush-aliases", 
            "text": "Aegir automatically generates a Drush alias for each site that is installed. By\ndefault this alias is named after the site URL. So, for the site at\nhttp://www.example.com, the alias generated by Aegir will be @www.example.com .  Aegir also generates a special alias,  @hostmaster . This alias represents the\nAegir site itself, and can be useful in triggering tasks from the command line.\nA convenient short form of this alias,  @hm  is also provided.", 
            "title": "Drush aliases"
        }, 
        {
            "location": "/usage/sites/tasks/", 
            "text": "Site-specific Aegir tasks\n\n\n\n\n\n\nSite-specific Aegir tasks\n\n\nInstalling a new site\n\n\nThe Site form\n\n\nInstalling the site\n\n\n\n\n\n\nResetting site password\n\n\nMigrating/upgrading sites\n\n\nHow to migrate a site\n\n\nEnabling the feature\n\n\nMigrating a site\n\n\nUpgrades, warnings, errors?\n\n\n\n\n\n\nThe migration process\n\n\nPotential errors?\n\n\nMigration Tips\n\n\n\n\n\n\nCloning sites\n\n\nEnabling Clone\n\n\nCloning a site\n\n\nThe cloning process\n\n\n\n\n\n\nDisabling and Enabling sites\n\n\nHow to Disable a site\n\n\nHow to Enable a site\n\n\nDisabling before deleting\n\n\n\n\n\n\nBackup and Restore\n\n\nBacking up\n\n\nRestoring from a backup\n\n\nThe restore process\n\n\nAutomatic backups and purge\n\n\n\n\n\n\nDeleting sites\n\n\nDisable the site first\n\n\nDelete without Disabling\n\n\nThe deletion process\n\n\nManually deleting the site\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAegir provides a number of tasks that can be run on sites. Below, we'll look at\nthe most common ones that ship with Aegir.\n\n\nInstalling a new site\n\n\nCreating a new website using Aegir is really, really easy, and is probably one of the most exciting aspects of Aegir. The very idea of clicking a button and suddenly being able to visit a new site may even be the prospect that drove you to installing Aegir in the first place.\n\n\nTo create a site you must have created a Platform first, which is the codebase, typically a copy of Drupal core, on which to place your new site. Read the Platform documentation if you have not yet completed this stage.\n\n\nThe Site form\n\n\nMuch like your Platform, a site is represented as a node in the Aegir frontend. To create a new site, you must create a new Site node.\n\n\nThe site node is a form requiring various attributes to be filled out in order to accurately advise the Aegir system about what kind of site you wish to create. These fields commonly are:\n\n\n\n\nDomain name\n: The site name. This becomes the title of the new Site node.\n\n\nClient\n: The client or owner of this site.\n\n\nInstall Profile\n: The installation profile to use to install this site. This has a dramatic effect on the end result of your site.\n\n\nPlatform\n: The platform to install the site on. The list of available platforms is based on what profile you choose above (in other words, which platforms support that installation profile). The choice of platform also implies which web server hosts that platform; so this is why 'web server' is not a selectable option in the form.\n\n\nLanguage\n: The language to install the site with. This is dependent on the profile or platform chosen.\n\n\nDatabase server\n: The database server to install the database on.\n\n\n\n\nBelow is an example of the site form.\n\n\n\n\nInstalling the site\n\n\nOnce you have filled out the site form per your requirements, click Save to submit the form. An 'Install' task is automatically spawned and added to the task queue for the dispatcher to execute.\n\n\nThe backend does the hard work of essentially completing a standard Drupal installation automatically. It creates a database and database user for the site, executes the Drupal installation procedure, populates the database, and generates a web server virtualhost configuration file for the site (Apache or NginX depending on your environment). In the event that the platform is located on a remote web server, the data is synced across from the main Aegir site to the remote server.\n\n\nFinally, it restarts the HTTP service to load the new site's virtualhost into the HTTP service's runtime environment.\n\n\nA traditional 'welcome' e-mail containing the one-time login link is sent to the e-mail address of the 'Client' who owns this site. As well as that, the login link is generated and displayed on the new site node view (see below).\n\n\n\n\nAs you can see above, the successful installation of the site has provided a series of tasks available to be performed against this site. This task block is similar in appearance to the Task Queue block we previously discussed, but rather than showing a list of tasks either run, queued or processing, it instead displays the list of potential tasks that may be run for this site only.\n\n\nWe will discuss these tasks and more in the following sections.\n\n\nResetting site password\n\n\nThe 'Reset password' task is a simple one: it allows you to generate a new one-time login URL for a site.\n\n\n\n\nThe one-time login URL is bound to the account of the admin user (uid 1) of a site. It cannot be used to reset the password of another user on the site.\n\n\nThis can be handy in cases where the password for the admin user of a site has been forgotten. The 'Reset password' task is re-runnable and provides a convenient method of re-gaining access to a website from within Aegir.\n\n\nIn normal situations, viewing a site node shows a 'Go to' clickable link that takes the user to the site in question.\n\n\nWhen the Reset password task has been run on a site, the 'Go to' link automatically gets changed to become a 'Login to' link that is the one-time login URL.\n\n\nOnce the one-time login URL has been clicked, this link returns to being a 'Go to' link.\n\n\nMigrating/upgrading sites\n\n\nOne of the most powerful features of Aegir is the way it can help you to upgrade large numbers of websites safely.\n\n\nFor example, you may have dozens of sites hosted on a drupal 7.41 codebase. But suddenly the 7.42 release comes out with vital security fixes. Previously you'd have to go to each site, back up the files and database, upload the new codebase, run update.php, check everything worked and then onto the next site.\n\n\nWith Aegir you simply click a button in the frontend and it handles everything. This is called 'migrating' sites in Aegir terminology, because it might be used in more cases than simply upgrading the main codebase. For example you may have different 'platforms' with different mixes of contrib modules and themes and charge clients for tiers of 'basic', 'advanced' and 'gold' packages. When they choose to move from basic to advance, you simply migrate their site.\n\n\nOther examples of using Migrate include:\n\n\n\n\nmoving a standard Drupal site to a Pressflow platform for performance enhancements\n\n\nrenaming a site (giving it a new URL entirely)\n\n\nthe Clone feature (discussed in later chapters) is a subsidiary of Migrate, except it doesn't move but copy the site.\n\n\n\n\nHow to migrate a site\n\n\nEnabling the feature\n\n\nBy default, Migrate is not enabled in Aegir after a fresh installation, as it is an optional feature. This means that the 'Migrate' button is not immediately present in the list of available tasks for a site.\n\n\nTo enable the Migrate feature, simply go to /admin/hosting/features and check the Migrate feature. Submit the form and then return to the site node, and you'll see that the Migrate task is now available.\n\n\nMigrating a site\n\n\nIn the Aegir frontend, click on the website that you want to migrate. As per usual, in the 'Site view' you are presented with some summary information about the site, as well as a list of available tasks. Click the 'Run' button for the 'Migrate' task. A modalframe dialog will appear in your browser.\n\n\n\n\nThe Migrate form has several options. These are:\n\n\n\n\nDomain name\n -- This is already the domain of the existing site. If you are intending to simply rename the site (give it a new URL altogether), you can simply change this field and leave the target platform be the 'current platform'. This will make the site accessible under the new URL.\n\n\nPlatform selection\n -- A radio selection of available platforms on the Aegir system. Certain platforms will be un-selectable. This is because they contain 'Errors' - that is, they contain versions of packages (modules, libraries or themes) that are of an older version than that of the original platform. You cannot upgrade a site to older versions of the same package.\n\n\n\n\nUpgrades, warnings, errors?\n\n\nWhat's this about upgrades, warnings and errors on each potential platform to migrate the site to?\n\n\nUp until now you might be forgiven for thinking that Aegir is simply automating the install of sites and creating Apache vhosts and databases.\n\n\nThe truth is, Aegir actually is a much more advanced tool than that. It keeps a running registry in its database of your Platforms and Sites and what modules, themes, libraries and install profiles are available on platforms and installed on sites.\n\n\nNot only does it keep track of what these packages are, but it also keeps track of what version of a package is installed (say, Views 6.x-2.11), and whether it is actually an enabled module or not.\n\n\nThe Migrate task, despite its name, is the tool for upgrading your site, because the Migrate code actually invokes the command \ndrush updatedb\n in the backend, automatically. drush updatedb is the equivalent of running \n/update.php\n in your browser against your site.\n\n\nIn this way, when the time comes (and it always does) to Migrate your site, Aegir is able to intelligently analyse the available platforms on the system and make a sane judgement on where you can upgrade your site to. The logic is as follows:\n\n\n\n\nCurrent platform has module X, schema version 6002 and 6003\n\n\nSite module has module X, schema version 6003 installed\n\n\nTarget platform A has module X, schema version 6002. Site cannot be upgraded to an older schema version. An error.\n\n\nTarget platform B does not have module X at all. Theoretically this is still a possible upgrade, but module X will probably be disabled by Drupal's upgrade logic during the process. This is a warning.\n\n\nTarget platform C has module X, schema version 6003. Site is upgradeable, there is no change.\n\n\nTarget platform D has module X, schema version 6004. Site is upgradeable. There is a module update to be performed.\n\n\n\n\nIn the logic laid out above, examples 4, 5 ,6, or platforms B, C and D would be listed as valid target platforms. Target platform D would actually upgrade the site's module to a newer version, which may involve database updates.\n\n\nTo view the schema differences between current and target platforms in this way, click the 'Compare platforms' link against each target platform in the form.\n\n\n\n\nIf your intention is to upgrade your site between versions of any package (this can include core or contrib!), you need to make sure the relevant packages are present and up to date on the platform you want to migrate to. Aegir can only try and make this judgement call based on the information you feed into the system by adding and verifying platforms with the correct components.\n\n\nIf you've had to download extra packages to the target platform to make them possible candidates for an upgrade, you may need to visit that platform node in the Aegir frontend, and run the Verify task against the site (this is a re-runnable task). This updates Aegir's registry of information about all the packages on the platform.\n\n\nThe migration process\n\n\nSelect the relevant target platform and click 'Migrate' to submit the form. The modalframe dialog will close and Aegir will spawn a new Migrate task into the Task queue, and process it on the next cron run.\n\n\nThe process of Migration in the backend occurs automatically, like all Aegir tasks, and is as follows:\n\n\n\n\nThe site is placed into maintenance or 'site offline mode' as a precaution. Safety first!\n\n\nA 'backup' task is implied silently. The site and its database are backed up into a tarball. Still safety first!\n\n\nDepending on the settings sent to the backend (are we migrating the site under its current name, or just renaming the site, or renaming the site and migrating as well), various metadata regarding the site is updated\n\n\nIf we are moving to a new platform (upgrading, not just renaming), the backup tarball that was made earlier, is used in a silent 'provision-deploy' command, which essentially unpacks the tarball into the target platform and creates a new database and database user for the site, importing the database dump that was made in the backup\n\n\nThe deploy task above, invokes drush updatedb, effectively upgrading the site by calling all hook_update() functions.\n\n\nVarious bits and pieces are fixed up, such as paths to files in the 'files' table of the database.\n\n\nCaches are cleared\n\n\nA verify task is run, settings.php and apache vhost are updated to reflect the new path (new platform) and new database credentials, site gets brought back out of maintenance mode.\n\n\nIf all went well and nothing has fatally errored here, we remove the old copy of the site from the previous platform (it wasn't touched til now, other than backing it up)\n\n\n\n\nPotential errors?\n\n\nIf something goes wrong during all this work, the metadata reflecting where the site is located on the system (which platform it is on) and other information is reverted. The task will become 'red' in the task queue, indicating an error.\n\n\nAegir will attempt to restore the site's vhost and settings.php to reflect the original platform and database credentials, and bring the site out of maintenance, in an effort to return the site to a state where it was prior to the Migrate.\n\n\nThe user may be requried to manually recover from this error depending on what has occurred. Nonetheless, remember that a backup was made early on, and this can be used to restore the site easily.\n\n\nMigration Tips\n\n\nIn the context of sites, migration is the task of moving a site from one platform to another. Migration is the Aegir-preferred method for applying updates to modules and certainly to core. In other words, to upgrade core or modules, create a new platform with the upgrades, then migrate sites to the new platform.\n\n\nIdeally, a migration requires nothing more than a mouse-click on the Migrate button on the Site node in your Aegir for the site you want to migrate. If you've prepared your destination platform properly, a migration will be this simple. Proper preparation, therefore, is vital.\n\n\nTo prepare a new platform to be a destination for migration, consider at least the following:\n\n\n\n\nThe directory structure for your modules and themes must be the same on the source and destination platforms. For example, if the modules on the source platform are in \n../platform-abc/sites/all/modules/contrib\n then the destination platform must have its modules also in this directory.\n\n\nYou may need to clear the Drupal cache on the source platform to avoid migration errors. Upgrades to Aegir in the future may handle this automatically, so be aware of the version of Aegir you're running and whether it includes upgrades to address this issue.\n\n\n\n\nCloning sites\n\n\nAegir provides an easy method of making entire copies of a site. This includes the actual site files, modules and so on, as well as a copy of the actual database.\n\n\nThis feature is called 'Clone' in Aegir, because it is a method of duplicating a site with a new URL or 'site name'.\n\n\nThe feature is very closely linked to the Migrate feature because it is almost the same, except that rather than move the site, it leaves the existing site in place and just copies it to a new name.\n\n\nFor this reason, enabling the Clone feature also enables the Migrate feature.\n\n\nEnabling Clone\n\n\nThe Clone feature is disabled by default on a fresh Aegir installation. To enable it, visit /admin/hosting/features in your Aegir frontend, check the 'Clone' box and submit the form.\n\n\nNow when you visit a site node in your frontend, you'll see there's a 'Clone' button in your list of available tasks for the site.\n\n\n\n\nCloning a site\n\n\nTo clone a site, simply click the Clone button. A modalframe dialog will appear with a form. If you are familiar with the Migrate feature, you'll likely notice the similarities between the two forms.\n\n\nThe clone form has these options:\n\n\n\n\nDomain name\n - this is the URL for the new site, which must be unique.\n\n\nPlatform\n - this is the target platform to clone the site to. It may be the current platform or a different platform that meets the requirements for hosting this site (has all the correct or newer versions of relevant modules)\n\n\nDatabase server\n - this option is only available if you have a remote database server configured, otherwise it is implied.\n\n\nSite aliases\n - If you have the \nSite Aliases feature\n enabled, you are also able to set new Site Aliases for this clone at this point. If the original site also had aliases, you will have to change or remove the aliases that load in this form before you can submit it.\n\n\n\n\n\n\nAs with the Migrate form, you can view the package comparison table between the current platform of the original site and that of a target platform, by clicking the 'Compare platforms' link. You can only clone a site to another platform if it meets the requirements for successfully hosting that site. In other words, the target platform has to contain the same or newer versions of modules. If the packages are missing on the target platform, those missing modules may be disabled.\n\n\nOnce you have made your selection and submitted the form, a 'Clone' task is spawned and added to the Task queue ready for dispatching.\n\n\nThe cloning process\n\n\nThe Clone task makes the following actions in the system:\n\n\n\n\nMakes a backup of the original site. This tarball will be used to 'deploy' a copy of the site\n\n\nGenerates a new Drush alias for the new site\n\n\nDeploys the backup tarball to the new location as a new site\n\n\nThe new site is imported and verified into the Aegir system, and relevant configurations are saved (HTTP vhost file, etc)\n\n\n\n\n\n\nWhen might I want to use Clone?\n\n\nClone can be a very useful tool in a variety of situations. Commonly, people use Clone for:\n\n\n\n\nTesting what a 'Migrate' might do to a site, without migrating it. In other words, Clone can be used as a simulation tool to anticipate results of\nupgrading a site to a new release or build safely.\n\n\nIf you have a 'template' site, often with a custom install profile, and anticipate having to generate multiple sites that are very similar, you can use Clone to rapidly do this.\n\n\nCloning a live site to a 'development' version of a site, especially to a development platform residing on a remote 'development' web server, can be a useful and fast method of working on a site by ensuring the dev environment has the latest database and files from production.\n\n\n\n\nIs there any relationship between the original and cloned site?\n\n\nCurrently there is no real relationship between the original site and any of its clones.\n\n\nIn future, Aegir development is likely to develop natural relationships between these sites, which will allow for 'rules' to be established, for example being able to regularly 're-clone' a site 'over the top' of previously-made clone, or automatically schedule clones after the original site has been migrated (upgraded) to keep a clone 'up to date' with the original.\n\n\nOther uses may develop in time.\n\n\nDisabling and Enabling sites\n\n\nAegir provides a method for sites to be temporarily 'disabled'. This means preventing all access to a site, but in a way that it can be re-enabled later.\n\n\nThink of disabling a site in a similar fashion to placing a site under Maintenance mode, but that instead of a 'Site offline' message, a request to the site is redirected to a special page under the main Aegir frontend's URL, and a 'Site disabled' message is shown instead.\n\n\n\n\nAegir makes no presumptions about why you may wish to disable a site. Use this feature at your own discretion.\n\n\nHow to Disable a site\n\n\nTo disable a site, simply click on the site node in the Aegir frontend. In the list of available tasks for this site, click the 'Disable' button. A modalframe dialog will load, prompting you to confirm if you really wish to disable the site. Confirm and submit the form to spawn a 'Disable' task to the queue to take this site offline.\n\n\nHow to Enable a site\n\n\nOnce your site has been disabled, the list of available tasks has now radically changed in the site node: you now have only the option to Delete the site or Enable it again.\n\n\nTo re-enable a disabled site, simply click Enable. The site will be brought back out of hibernation and become live again.\n\n\nDisabling before deleting\n\n\nIn Aegir's default configuration, you must first disable a site before you may delete it. This is meant as a precaution - if considering deleting a site, it forces you to think about whether you really want to, before accidentally clicking Delete and irreversibly removing your site.\n\n\nBut don't worry - Aegir always silently makes a backup of the site before disabling (or deleting) a site.\n\n\nBackup and Restore\n\n\nThe Aegir system provides a convenient method of backing up sites, and restoring sites from those backups.\n\n\nLike most other Aegir functionality, the Backup feature comes in the form of a task, aptly named 'Backup'. It is one of the core features of Aegir and thus is always available for a site, out of the box.\n\n\nBacking up a site in Aegir is twofold: the site folder (containing the settings.php, files dir and so on) is added to a tarball along with a database dump of the site and stored in /var/aegir/backups on the master Aegir server.\n\n\nIn the event that the website or database is a remote server, those relevant components are synced down to the master Aegir server to be tarballed up. Only the master Aegir server stores backups of a site. (This is known as a 'spoke' model, as opposed to a 'mesh' or distributed model, and suits the Aegir system at this time).\n\n\nThe tarball generated for a site can be used for a number of things: restoring a site from that backup via the 'Restore' task, or from the command line using the provision-deploy command for advanced users as a method of quickly importing a site onto a system.\n\n\nOther cases whereby a backup task is generated and its tarball used are when a site is being Migrated (upgraded) or being Cloned as a new site, but that is outside the scope of this chapter.\n\n\nBacking up\n\n\nWhen viewing the site node of a site in the Aegir frontend, click the 'Backup' button in the list of available tasks for this site.\n\n\nA modalframe dialog appears, prompting for confirmation, as well as providing an editable Description field which you may fill out. This field is optional, designed only to aid you in future if you seek a reason for why a backup was made.\n\n\n\n\nOnce the form is submitted, a Backup task is spawned and added to the Task queue for dispatching by the backend.\n\n\nThe full output of a Backup task is viewable in the task log. Extra security precautions are built into Aegir so that the 'mysqldump' command uses file descriptors to hide exposing the database user's password in the running process and output of the task.\n\n\nRestoring from a backup\n\n\nRestoring a site from a backup is simple and follows the same pattern as backing up. Simply click the 'Restore' button from the list of available tasks for a site. A modalframe dialog will load, and the form offers a list of radio items. These are the backups that have been made for a site, in the format of 'Date/time - Reason'.\n\n\nWhere no custom reason was given for a backup, the message 'Generated on request' is shown instead.\n\n\n\n\nChoose a backup to restore from and submit the form. A 'Restore' task will be spawned and added to the Task queue for dispatching by the backend.\n\n\nThe restore process\n\n\nThe following describes what happens during a Restore task:\n\n\n\n\nputs the site under 'maintenance mode' temporarily (safety first!) generates a new backup of the site before restoring to it (still safety first!). This new backup will be available in the list of backups if you ever re-run the Restore task, and will carry the description 'Generated before being restored to a previous version'.\n\n\nuses the implied provision-deploy command in the backend to unpack the tarball,\n\n\ncreate a new database and import the database dump into it,\n\n\ncreate a new database user,\n\n\nspawn a verify task silently, which will:\n\n\nre-write the settings.php,\n\n\nsync the data if necessary to a remote platform,\n\n\nre-generate the web server's vhost configuration file for this site,\n\n\nfinally reload the web server\n\n\n\n\n\n\n\n\nAutomatic backups and purge\n\n\nAutomatic creation and deletion (clean-up / purging) of backups can be handled by \nHosting Site Backup Manager\n. It makes it easy to set up scheduled backup tasks for all of your sites, which can be restored from the backups generated by these tasks.\n\n\nWhile not included as a core component, the module is one of the externally-maintained ones that ships with Aegir.  These modules are referred to as \nGolden Contrib\n.\n\n\nTo enable the functionality, surf to Administration \u00bb Hosting (Features) \u00bb Experimental.  Check \nBackup Manager\n and optionally one or both of its sub-modules (below).  Then save the form.\n\n\n\n\nBackup scheduling/queue\n (allows backups to be scheduled per site)\n\n\nBackup window\n (allows backups to be restricted to certain time periods)\n\n\n\n\nDeleting sites\n\n\nThere may come a time when you want to remove a website from your Aegir system and your server altogether. As you'd expect, Aegir handles this for you too. It ships with a 'Delete' task that is capable of removing the site from the Aegir system, as well as carrying out backend tasks to remove the site from the filesystem and web/db servers.\n\n\nThe Aegir frontend is a Drupal site in itself, and sites are represented in that system as nodes. New users that are familiar with Drupal often make the mistake of thinking that the process of deleting a site is like deleting a node in Drupal, and attempt to delete the site node (or are confused by the fact we hide the Delete button for this reason).\n\n\nThis is an incorrect method of deleting a site, and doesn't actually spawn a task to clear away the site from the server at all. Below are the steps to correctly remove a site.\n\n\nDisable the site first\n\n\nPart of this confusion can stem from the fact that when viewing a site node in Aegir, the Delete button is not actually present in the list of available tasks by default:\n\n\n\n\nThis is because, in the default Aegir configuration, you must run the Disable task against a site before you may Delete it. This logic is in Aegir to help users avoid accidentally deleting a site either by accidentally processing the task (despite having to confirm it first) or to prompt the user to think a little bit more on the decision before irreversibly blowing away the data.\n\n\nThe decision stems from Aegir development policy of being uncomfortable making such risky actions on your data. While it is possible to delete a site, we'd like you to really be sure that's what you want to do.\n\n\nOnce you Disable a site (see the Disable section prior to this chapter), the list of available tasks is modified to only offer an Enable or Delete button. At this point you can run the Delete task and permanently remove your site.\n\n\n\n\nDelete without Disabling\n\n\nThe first method above is the default Aegir configuration. However, some users might be too confused by the lack of the Delete button altogether, which may not be ideal for your situation.\n\n\nFor this reason, Aegir also provides a configurable setting allowing a site to be Deleted without requiring a Disable first. This option makes the 'Delete' button appear in the list of available tasks, even when a site is currently in an Enabled state.\n\n\nTo activate this setting, visit /admin/hosting/settings on your site and uncheck the checkbox that is titled \"Require site to be disabled before\ndeletion\".\n\n\nRe-visit the site node and you'll see that the Delete button is now present and clickable, alongside the Disable button.\n\n\n\n\nThe deletion process\n\n\nWhen you click Delete and confirm your intentions in the modaldialog that loads, a 'Delete' task is spawned and added to the Task queue to await dispatch by the backend system.\n\n\nThe process runs through a series of steps to remove this site from your server. These are as follows:\n\n\n\n\nMake a backup of the site and its database for the last time (safety first, remember!)\n\n\nDrops the site database\n\n\nRevokes the GRANT to that database for the database user (effectively deleting the database user)\n\n\nDeletes the site folder and everything inside it, from the platform that the site was hosted on\n\n\nRemoves the Drush alias file for the site\n\n\nRemoves the site's web server vhost configuration file\n\n\n.Reloads the web server\n\n\nSets the site's status to 'Deleted' in the Aegir system.\n\n\n\n\nNote\n: This process does not delete the site node from the Aegir system. This is by design. The site node is retained in the Aegir database for historical purposes (you could customise Aegir by adding the ability to run a report or a View of all deleted historical sites, for example)\n\n\nThe deleted status of the site, removes it from the list of sites in the 'Sites' page (and thus front page) of the Aegir system.\nHistorical tasks run on the site remain in the Task queue history.\n\n\nManually deleting the site\n\n\nSometimes something goes wrong during an Install or a Delete task and a site doesn't install or get deleted successfully. The Delete task cannot be run or re-run on this site because Aegir has no way of knowing just how much of it got deleted (whether the files are still there but not the database, for example). Re-running the Delete task is likely to fail because some of these steps listed above will not exit successfully on completion.\n\n\nAt the time of writing, no task in Aegir exists to 'force' a removal of a site without having to bootstrap it first, so some manual steps are required on your part to remove this site.\n\n\n\n\nManually remove the site files on the server if they exist (i.e. \n/var/aegir/platforms/drupal-6.16/sites/my-failed-site.com\n)\n\n\nDrop the database and revoke db user privileges associated with this site if it got created before failing (check the vhost configuration file's 'SetEnv' parameters, or the settings.php if the credentials are uncloaked, for the site's database name and user)\n\n\nManually remove the Apache vhost file for this site if it is still present (in \n/var/aegir/config/server_master/apache/vhost.d/\n)\n\n\nManually remove the Drush alias for this site if it is still present (in \n/var/aegir/.drush/\n)\n\n\nEnter the Aegir database from mysql and set the status of the node in the hosting_site table to -2 (deleted). For example, if your site node was nid 83 (the 'Edit' tab of the site node will tell you this), run \nUPDATE hosting_site SET status = '-2' WHERE nid = 83;\n\n\nStill in the Aegir database, delete the node record in the hosting_context table. For example, if your site node was nid 83 (as above), run \nDELETE FROM hosting_context WHERE nid = 83;\n\n\nAlternatively, if you want to even remove the node altogether from the system (not recommended), go to \n/node/83/delete\n in your browser on the Aegir frontend and delete the node. This will remove the site node and all associated task nodes from the system, as well as remove the entry from the hosting_site table in the database.\n\n\nIf you are using the SSL feature and had Encryption enabled for this site, you may also need to manually delete the SSL certificate folder located in \n/var/aegir/config/ssl.d/\nexample.com\n and/or \n/var/aegir/config/server_master/ssl.d/\nexample.com\n.\n\n\nAdditionally you may also need to delete the entry for the domain you are deleting in the hosting_ssl_cert table of the Aegir database.\n\n\nIf you are using the DNS feature you may also need to remove the site's entry in the zone file by running the following command: drush @server_master provision-zone rr-delete example.com sub.domain A\n\n\nIf your site has ssl support enabled you also need to remove ssl certificate from database issuing \nDELETE FROM hosting_ssl_cert WHERE ssl_key = 'your.site.domain';\n\n\nRe-verify the Platform node where the Platform is the one where your site was hosted on. This will regenerate some metadata whereby the Platform believed it still had that site contained within it.\n\n\n\n\nIf you need to manually remove the site's platform see the instructions here: http://community.aegirproject.org/node/27", 
            "title": "Site tasks"
        }, 
        {
            "location": "/usage/sites/tasks/#site-specific-aegir-tasks", 
            "text": "Site-specific Aegir tasks  Installing a new site  The Site form  Installing the site    Resetting site password  Migrating/upgrading sites  How to migrate a site  Enabling the feature  Migrating a site  Upgrades, warnings, errors?    The migration process  Potential errors?  Migration Tips    Cloning sites  Enabling Clone  Cloning a site  The cloning process    Disabling and Enabling sites  How to Disable a site  How to Enable a site  Disabling before deleting    Backup and Restore  Backing up  Restoring from a backup  The restore process  Automatic backups and purge    Deleting sites  Disable the site first  Delete without Disabling  The deletion process  Manually deleting the site        Aegir provides a number of tasks that can be run on sites. Below, we'll look at\nthe most common ones that ship with Aegir.", 
            "title": "Site-specific Aegir tasks"
        }, 
        {
            "location": "/usage/sites/tasks/#installing-a-new-site", 
            "text": "Creating a new website using Aegir is really, really easy, and is probably one of the most exciting aspects of Aegir. The very idea of clicking a button and suddenly being able to visit a new site may even be the prospect that drove you to installing Aegir in the first place.  To create a site you must have created a Platform first, which is the codebase, typically a copy of Drupal core, on which to place your new site. Read the Platform documentation if you have not yet completed this stage.  The Site form  Much like your Platform, a site is represented as a node in the Aegir frontend. To create a new site, you must create a new Site node.  The site node is a form requiring various attributes to be filled out in order to accurately advise the Aegir system about what kind of site you wish to create. These fields commonly are:   Domain name : The site name. This becomes the title of the new Site node.  Client : The client or owner of this site.  Install Profile : The installation profile to use to install this site. This has a dramatic effect on the end result of your site.  Platform : The platform to install the site on. The list of available platforms is based on what profile you choose above (in other words, which platforms support that installation profile). The choice of platform also implies which web server hosts that platform; so this is why 'web server' is not a selectable option in the form.  Language : The language to install the site with. This is dependent on the profile or platform chosen.  Database server : The database server to install the database on.   Below is an example of the site form.   Installing the site  Once you have filled out the site form per your requirements, click Save to submit the form. An 'Install' task is automatically spawned and added to the task queue for the dispatcher to execute.  The backend does the hard work of essentially completing a standard Drupal installation automatically. It creates a database and database user for the site, executes the Drupal installation procedure, populates the database, and generates a web server virtualhost configuration file for the site (Apache or NginX depending on your environment). In the event that the platform is located on a remote web server, the data is synced across from the main Aegir site to the remote server.  Finally, it restarts the HTTP service to load the new site's virtualhost into the HTTP service's runtime environment.  A traditional 'welcome' e-mail containing the one-time login link is sent to the e-mail address of the 'Client' who owns this site. As well as that, the login link is generated and displayed on the new site node view (see below).   As you can see above, the successful installation of the site has provided a series of tasks available to be performed against this site. This task block is similar in appearance to the Task Queue block we previously discussed, but rather than showing a list of tasks either run, queued or processing, it instead displays the list of potential tasks that may be run for this site only.  We will discuss these tasks and more in the following sections.", 
            "title": "Installing a new site"
        }, 
        {
            "location": "/usage/sites/tasks/#resetting-site-password", 
            "text": "The 'Reset password' task is a simple one: it allows you to generate a new one-time login URL for a site.   The one-time login URL is bound to the account of the admin user (uid 1) of a site. It cannot be used to reset the password of another user on the site.  This can be handy in cases where the password for the admin user of a site has been forgotten. The 'Reset password' task is re-runnable and provides a convenient method of re-gaining access to a website from within Aegir.  In normal situations, viewing a site node shows a 'Go to' clickable link that takes the user to the site in question.  When the Reset password task has been run on a site, the 'Go to' link automatically gets changed to become a 'Login to' link that is the one-time login URL.  Once the one-time login URL has been clicked, this link returns to being a 'Go to' link.", 
            "title": "Resetting site password"
        }, 
        {
            "location": "/usage/sites/tasks/#migratingupgrading-sites", 
            "text": "One of the most powerful features of Aegir is the way it can help you to upgrade large numbers of websites safely.  For example, you may have dozens of sites hosted on a drupal 7.41 codebase. But suddenly the 7.42 release comes out with vital security fixes. Previously you'd have to go to each site, back up the files and database, upload the new codebase, run update.php, check everything worked and then onto the next site.  With Aegir you simply click a button in the frontend and it handles everything. This is called 'migrating' sites in Aegir terminology, because it might be used in more cases than simply upgrading the main codebase. For example you may have different 'platforms' with different mixes of contrib modules and themes and charge clients for tiers of 'basic', 'advanced' and 'gold' packages. When they choose to move from basic to advance, you simply migrate their site.  Other examples of using Migrate include:   moving a standard Drupal site to a Pressflow platform for performance enhancements  renaming a site (giving it a new URL entirely)  the Clone feature (discussed in later chapters) is a subsidiary of Migrate, except it doesn't move but copy the site.   How to migrate a site  Enabling the feature  By default, Migrate is not enabled in Aegir after a fresh installation, as it is an optional feature. This means that the 'Migrate' button is not immediately present in the list of available tasks for a site.  To enable the Migrate feature, simply go to /admin/hosting/features and check the Migrate feature. Submit the form and then return to the site node, and you'll see that the Migrate task is now available.  Migrating a site  In the Aegir frontend, click on the website that you want to migrate. As per usual, in the 'Site view' you are presented with some summary information about the site, as well as a list of available tasks. Click the 'Run' button for the 'Migrate' task. A modalframe dialog will appear in your browser.   The Migrate form has several options. These are:   Domain name  -- This is already the domain of the existing site. If you are intending to simply rename the site (give it a new URL altogether), you can simply change this field and leave the target platform be the 'current platform'. This will make the site accessible under the new URL.  Platform selection  -- A radio selection of available platforms on the Aegir system. Certain platforms will be un-selectable. This is because they contain 'Errors' - that is, they contain versions of packages (modules, libraries or themes) that are of an older version than that of the original platform. You cannot upgrade a site to older versions of the same package.   Upgrades, warnings, errors?  What's this about upgrades, warnings and errors on each potential platform to migrate the site to?  Up until now you might be forgiven for thinking that Aegir is simply automating the install of sites and creating Apache vhosts and databases.  The truth is, Aegir actually is a much more advanced tool than that. It keeps a running registry in its database of your Platforms and Sites and what modules, themes, libraries and install profiles are available on platforms and installed on sites.  Not only does it keep track of what these packages are, but it also keeps track of what version of a package is installed (say, Views 6.x-2.11), and whether it is actually an enabled module or not.  The Migrate task, despite its name, is the tool for upgrading your site, because the Migrate code actually invokes the command  drush updatedb  in the backend, automatically. drush updatedb is the equivalent of running  /update.php  in your browser against your site.  In this way, when the time comes (and it always does) to Migrate your site, Aegir is able to intelligently analyse the available platforms on the system and make a sane judgement on where you can upgrade your site to. The logic is as follows:   Current platform has module X, schema version 6002 and 6003  Site module has module X, schema version 6003 installed  Target platform A has module X, schema version 6002. Site cannot be upgraded to an older schema version. An error.  Target platform B does not have module X at all. Theoretically this is still a possible upgrade, but module X will probably be disabled by Drupal's upgrade logic during the process. This is a warning.  Target platform C has module X, schema version 6003. Site is upgradeable, there is no change.  Target platform D has module X, schema version 6004. Site is upgradeable. There is a module update to be performed.   In the logic laid out above, examples 4, 5 ,6, or platforms B, C and D would be listed as valid target platforms. Target platform D would actually upgrade the site's module to a newer version, which may involve database updates.  To view the schema differences between current and target platforms in this way, click the 'Compare platforms' link against each target platform in the form.   If your intention is to upgrade your site between versions of any package (this can include core or contrib!), you need to make sure the relevant packages are present and up to date on the platform you want to migrate to. Aegir can only try and make this judgement call based on the information you feed into the system by adding and verifying platforms with the correct components.  If you've had to download extra packages to the target platform to make them possible candidates for an upgrade, you may need to visit that platform node in the Aegir frontend, and run the Verify task against the site (this is a re-runnable task). This updates Aegir's registry of information about all the packages on the platform.  The migration process  Select the relevant target platform and click 'Migrate' to submit the form. The modalframe dialog will close and Aegir will spawn a new Migrate task into the Task queue, and process it on the next cron run.  The process of Migration in the backend occurs automatically, like all Aegir tasks, and is as follows:   The site is placed into maintenance or 'site offline mode' as a precaution. Safety first!  A 'backup' task is implied silently. The site and its database are backed up into a tarball. Still safety first!  Depending on the settings sent to the backend (are we migrating the site under its current name, or just renaming the site, or renaming the site and migrating as well), various metadata regarding the site is updated  If we are moving to a new platform (upgrading, not just renaming), the backup tarball that was made earlier, is used in a silent 'provision-deploy' command, which essentially unpacks the tarball into the target platform and creates a new database and database user for the site, importing the database dump that was made in the backup  The deploy task above, invokes drush updatedb, effectively upgrading the site by calling all hook_update() functions.  Various bits and pieces are fixed up, such as paths to files in the 'files' table of the database.  Caches are cleared  A verify task is run, settings.php and apache vhost are updated to reflect the new path (new platform) and new database credentials, site gets brought back out of maintenance mode.  If all went well and nothing has fatally errored here, we remove the old copy of the site from the previous platform (it wasn't touched til now, other than backing it up)   Potential errors?  If something goes wrong during all this work, the metadata reflecting where the site is located on the system (which platform it is on) and other information is reverted. The task will become 'red' in the task queue, indicating an error.  Aegir will attempt to restore the site's vhost and settings.php to reflect the original platform and database credentials, and bring the site out of maintenance, in an effort to return the site to a state where it was prior to the Migrate.  The user may be requried to manually recover from this error depending on what has occurred. Nonetheless, remember that a backup was made early on, and this can be used to restore the site easily.  Migration Tips  In the context of sites, migration is the task of moving a site from one platform to another. Migration is the Aegir-preferred method for applying updates to modules and certainly to core. In other words, to upgrade core or modules, create a new platform with the upgrades, then migrate sites to the new platform.  Ideally, a migration requires nothing more than a mouse-click on the Migrate button on the Site node in your Aegir for the site you want to migrate. If you've prepared your destination platform properly, a migration will be this simple. Proper preparation, therefore, is vital.  To prepare a new platform to be a destination for migration, consider at least the following:   The directory structure for your modules and themes must be the same on the source and destination platforms. For example, if the modules on the source platform are in  ../platform-abc/sites/all/modules/contrib  then the destination platform must have its modules also in this directory.  You may need to clear the Drupal cache on the source platform to avoid migration errors. Upgrades to Aegir in the future may handle this automatically, so be aware of the version of Aegir you're running and whether it includes upgrades to address this issue.", 
            "title": "Migrating/upgrading sites"
        }, 
        {
            "location": "/usage/sites/tasks/#cloning-sites", 
            "text": "Aegir provides an easy method of making entire copies of a site. This includes the actual site files, modules and so on, as well as a copy of the actual database.  This feature is called 'Clone' in Aegir, because it is a method of duplicating a site with a new URL or 'site name'.  The feature is very closely linked to the Migrate feature because it is almost the same, except that rather than move the site, it leaves the existing site in place and just copies it to a new name.  For this reason, enabling the Clone feature also enables the Migrate feature.  Enabling Clone  The Clone feature is disabled by default on a fresh Aegir installation. To enable it, visit /admin/hosting/features in your Aegir frontend, check the 'Clone' box and submit the form.  Now when you visit a site node in your frontend, you'll see there's a 'Clone' button in your list of available tasks for the site.   Cloning a site  To clone a site, simply click the Clone button. A modalframe dialog will appear with a form. If you are familiar with the Migrate feature, you'll likely notice the similarities between the two forms.  The clone form has these options:   Domain name  - this is the URL for the new site, which must be unique.  Platform  - this is the target platform to clone the site to. It may be the current platform or a different platform that meets the requirements for hosting this site (has all the correct or newer versions of relevant modules)  Database server  - this option is only available if you have a remote database server configured, otherwise it is implied.  Site aliases  - If you have the  Site Aliases feature  enabled, you are also able to set new Site Aliases for this clone at this point. If the original site also had aliases, you will have to change or remove the aliases that load in this form before you can submit it.    As with the Migrate form, you can view the package comparison table between the current platform of the original site and that of a target platform, by clicking the 'Compare platforms' link. You can only clone a site to another platform if it meets the requirements for successfully hosting that site. In other words, the target platform has to contain the same or newer versions of modules. If the packages are missing on the target platform, those missing modules may be disabled.  Once you have made your selection and submitted the form, a 'Clone' task is spawned and added to the Task queue ready for dispatching.  The cloning process  The Clone task makes the following actions in the system:   Makes a backup of the original site. This tarball will be used to 'deploy' a copy of the site  Generates a new Drush alias for the new site  Deploys the backup tarball to the new location as a new site  The new site is imported and verified into the Aegir system, and relevant configurations are saved (HTTP vhost file, etc)    When might I want to use Clone?  Clone can be a very useful tool in a variety of situations. Commonly, people use Clone for:   Testing what a 'Migrate' might do to a site, without migrating it. In other words, Clone can be used as a simulation tool to anticipate results of\nupgrading a site to a new release or build safely.  If you have a 'template' site, often with a custom install profile, and anticipate having to generate multiple sites that are very similar, you can use Clone to rapidly do this.  Cloning a live site to a 'development' version of a site, especially to a development platform residing on a remote 'development' web server, can be a useful and fast method of working on a site by ensuring the dev environment has the latest database and files from production.   Is there any relationship between the original and cloned site?  Currently there is no real relationship between the original site and any of its clones.  In future, Aegir development is likely to develop natural relationships between these sites, which will allow for 'rules' to be established, for example being able to regularly 're-clone' a site 'over the top' of previously-made clone, or automatically schedule clones after the original site has been migrated (upgraded) to keep a clone 'up to date' with the original.  Other uses may develop in time.", 
            "title": "Cloning sites"
        }, 
        {
            "location": "/usage/sites/tasks/#disabling-and-enabling-sites", 
            "text": "Aegir provides a method for sites to be temporarily 'disabled'. This means preventing all access to a site, but in a way that it can be re-enabled later.  Think of disabling a site in a similar fashion to placing a site under Maintenance mode, but that instead of a 'Site offline' message, a request to the site is redirected to a special page under the main Aegir frontend's URL, and a 'Site disabled' message is shown instead.   Aegir makes no presumptions about why you may wish to disable a site. Use this feature at your own discretion.  How to Disable a site  To disable a site, simply click on the site node in the Aegir frontend. In the list of available tasks for this site, click the 'Disable' button. A modalframe dialog will load, prompting you to confirm if you really wish to disable the site. Confirm and submit the form to spawn a 'Disable' task to the queue to take this site offline.  How to Enable a site  Once your site has been disabled, the list of available tasks has now radically changed in the site node: you now have only the option to Delete the site or Enable it again.  To re-enable a disabled site, simply click Enable. The site will be brought back out of hibernation and become live again.  Disabling before deleting  In Aegir's default configuration, you must first disable a site before you may delete it. This is meant as a precaution - if considering deleting a site, it forces you to think about whether you really want to, before accidentally clicking Delete and irreversibly removing your site.  But don't worry - Aegir always silently makes a backup of the site before disabling (or deleting) a site.", 
            "title": "Disabling and Enabling sites"
        }, 
        {
            "location": "/usage/sites/tasks/#backup-and-restore", 
            "text": "The Aegir system provides a convenient method of backing up sites, and restoring sites from those backups.  Like most other Aegir functionality, the Backup feature comes in the form of a task, aptly named 'Backup'. It is one of the core features of Aegir and thus is always available for a site, out of the box.  Backing up a site in Aegir is twofold: the site folder (containing the settings.php, files dir and so on) is added to a tarball along with a database dump of the site and stored in /var/aegir/backups on the master Aegir server.  In the event that the website or database is a remote server, those relevant components are synced down to the master Aegir server to be tarballed up. Only the master Aegir server stores backups of a site. (This is known as a 'spoke' model, as opposed to a 'mesh' or distributed model, and suits the Aegir system at this time).  The tarball generated for a site can be used for a number of things: restoring a site from that backup via the 'Restore' task, or from the command line using the provision-deploy command for advanced users as a method of quickly importing a site onto a system.  Other cases whereby a backup task is generated and its tarball used are when a site is being Migrated (upgraded) or being Cloned as a new site, but that is outside the scope of this chapter.  Backing up  When viewing the site node of a site in the Aegir frontend, click the 'Backup' button in the list of available tasks for this site.  A modalframe dialog appears, prompting for confirmation, as well as providing an editable Description field which you may fill out. This field is optional, designed only to aid you in future if you seek a reason for why a backup was made.   Once the form is submitted, a Backup task is spawned and added to the Task queue for dispatching by the backend.  The full output of a Backup task is viewable in the task log. Extra security precautions are built into Aegir so that the 'mysqldump' command uses file descriptors to hide exposing the database user's password in the running process and output of the task.  Restoring from a backup  Restoring a site from a backup is simple and follows the same pattern as backing up. Simply click the 'Restore' button from the list of available tasks for a site. A modalframe dialog will load, and the form offers a list of radio items. These are the backups that have been made for a site, in the format of 'Date/time - Reason'.  Where no custom reason was given for a backup, the message 'Generated on request' is shown instead.   Choose a backup to restore from and submit the form. A 'Restore' task will be spawned and added to the Task queue for dispatching by the backend.  The restore process  The following describes what happens during a Restore task:   puts the site under 'maintenance mode' temporarily (safety first!) generates a new backup of the site before restoring to it (still safety first!). This new backup will be available in the list of backups if you ever re-run the Restore task, and will carry the description 'Generated before being restored to a previous version'.  uses the implied provision-deploy command in the backend to unpack the tarball,  create a new database and import the database dump into it,  create a new database user,  spawn a verify task silently, which will:  re-write the settings.php,  sync the data if necessary to a remote platform,  re-generate the web server's vhost configuration file for this site,  finally reload the web server     Automatic backups and purge  Automatic creation and deletion (clean-up / purging) of backups can be handled by  Hosting Site Backup Manager . It makes it easy to set up scheduled backup tasks for all of your sites, which can be restored from the backups generated by these tasks.  While not included as a core component, the module is one of the externally-maintained ones that ships with Aegir.  These modules are referred to as  Golden Contrib .  To enable the functionality, surf to Administration \u00bb Hosting (Features) \u00bb Experimental.  Check  Backup Manager  and optionally one or both of its sub-modules (below).  Then save the form.   Backup scheduling/queue  (allows backups to be scheduled per site)  Backup window  (allows backups to be restricted to certain time periods)", 
            "title": "Backup and Restore"
        }, 
        {
            "location": "/usage/sites/tasks/#deleting-sites", 
            "text": "There may come a time when you want to remove a website from your Aegir system and your server altogether. As you'd expect, Aegir handles this for you too. It ships with a 'Delete' task that is capable of removing the site from the Aegir system, as well as carrying out backend tasks to remove the site from the filesystem and web/db servers.  The Aegir frontend is a Drupal site in itself, and sites are represented in that system as nodes. New users that are familiar with Drupal often make the mistake of thinking that the process of deleting a site is like deleting a node in Drupal, and attempt to delete the site node (or are confused by the fact we hide the Delete button for this reason).  This is an incorrect method of deleting a site, and doesn't actually spawn a task to clear away the site from the server at all. Below are the steps to correctly remove a site.  Disable the site first  Part of this confusion can stem from the fact that when viewing a site node in Aegir, the Delete button is not actually present in the list of available tasks by default:   This is because, in the default Aegir configuration, you must run the Disable task against a site before you may Delete it. This logic is in Aegir to help users avoid accidentally deleting a site either by accidentally processing the task (despite having to confirm it first) or to prompt the user to think a little bit more on the decision before irreversibly blowing away the data.  The decision stems from Aegir development policy of being uncomfortable making such risky actions on your data. While it is possible to delete a site, we'd like you to really be sure that's what you want to do.  Once you Disable a site (see the Disable section prior to this chapter), the list of available tasks is modified to only offer an Enable or Delete button. At this point you can run the Delete task and permanently remove your site.   Delete without Disabling  The first method above is the default Aegir configuration. However, some users might be too confused by the lack of the Delete button altogether, which may not be ideal for your situation.  For this reason, Aegir also provides a configurable setting allowing a site to be Deleted without requiring a Disable first. This option makes the 'Delete' button appear in the list of available tasks, even when a site is currently in an Enabled state.  To activate this setting, visit /admin/hosting/settings on your site and uncheck the checkbox that is titled \"Require site to be disabled before\ndeletion\".  Re-visit the site node and you'll see that the Delete button is now present and clickable, alongside the Disable button.   The deletion process  When you click Delete and confirm your intentions in the modaldialog that loads, a 'Delete' task is spawned and added to the Task queue to await dispatch by the backend system.  The process runs through a series of steps to remove this site from your server. These are as follows:   Make a backup of the site and its database for the last time (safety first, remember!)  Drops the site database  Revokes the GRANT to that database for the database user (effectively deleting the database user)  Deletes the site folder and everything inside it, from the platform that the site was hosted on  Removes the Drush alias file for the site  Removes the site's web server vhost configuration file  .Reloads the web server  Sets the site's status to 'Deleted' in the Aegir system.   Note : This process does not delete the site node from the Aegir system. This is by design. The site node is retained in the Aegir database for historical purposes (you could customise Aegir by adding the ability to run a report or a View of all deleted historical sites, for example)  The deleted status of the site, removes it from the list of sites in the 'Sites' page (and thus front page) of the Aegir system.\nHistorical tasks run on the site remain in the Task queue history.  Manually deleting the site  Sometimes something goes wrong during an Install or a Delete task and a site doesn't install or get deleted successfully. The Delete task cannot be run or re-run on this site because Aegir has no way of knowing just how much of it got deleted (whether the files are still there but not the database, for example). Re-running the Delete task is likely to fail because some of these steps listed above will not exit successfully on completion.  At the time of writing, no task in Aegir exists to 'force' a removal of a site without having to bootstrap it first, so some manual steps are required on your part to remove this site.   Manually remove the site files on the server if they exist (i.e.  /var/aegir/platforms/drupal-6.16/sites/my-failed-site.com )  Drop the database and revoke db user privileges associated with this site if it got created before failing (check the vhost configuration file's 'SetEnv' parameters, or the settings.php if the credentials are uncloaked, for the site's database name and user)  Manually remove the Apache vhost file for this site if it is still present (in  /var/aegir/config/server_master/apache/vhost.d/ )  Manually remove the Drush alias for this site if it is still present (in  /var/aegir/.drush/ )  Enter the Aegir database from mysql and set the status of the node in the hosting_site table to -2 (deleted). For example, if your site node was nid 83 (the 'Edit' tab of the site node will tell you this), run  UPDATE hosting_site SET status = '-2' WHERE nid = 83;  Still in the Aegir database, delete the node record in the hosting_context table. For example, if your site node was nid 83 (as above), run  DELETE FROM hosting_context WHERE nid = 83;  Alternatively, if you want to even remove the node altogether from the system (not recommended), go to  /node/83/delete  in your browser on the Aegir frontend and delete the node. This will remove the site node and all associated task nodes from the system, as well as remove the entry from the hosting_site table in the database.  If you are using the SSL feature and had Encryption enabled for this site, you may also need to manually delete the SSL certificate folder located in  /var/aegir/config/ssl.d/ example.com  and/or  /var/aegir/config/server_master/ssl.d/ example.com .  Additionally you may also need to delete the entry for the domain you are deleting in the hosting_ssl_cert table of the Aegir database.  If you are using the DNS feature you may also need to remove the site's entry in the zone file by running the following command: drush @server_master provision-zone rr-delete example.com sub.domain A  If your site has ssl support enabled you also need to remove ssl certificate from database issuing  DELETE FROM hosting_ssl_cert WHERE ssl_key = 'your.site.domain';  Re-verify the Platform node where the Platform is the one where your site was hosted on. This will regenerate some metadata whereby the Platform believed it still had that site contained within it.   If you need to manually remove the site's platform see the instructions here: http://community.aegirproject.org/node/27", 
            "title": "Deleting sites"
        }, 
        {
            "location": "/usage/sites/aliases/", 
            "text": "Site URL aliases\n\n\n\n\n\n\nSite URL aliases\n\n\nEnable alias support in Aegir\n\n\nGlobal alias settings\n\n\nSite-specific alias settings\n\n\nRedirection Option\n\n\nAegir alias management under the hood\n\n\n\n\n\n\n\n\n\n\nSite aliases are helpful if you move content to a new domain, change domain names or simply want to make sure that http://example.com and http://www.example.com take users to the same place. You can implement site aliases with or without redirection. The differences between these two methods and how Aegir handles them is described below.\n\n\nEnable alias support in Aegir\n\n\nYou have to enable alias support in Aegir as it is off by default.\n\n\n\n\nBrowse to \n/admin/hosting/features\n\n\n\n\nCheck the Site aliasing box\n\n\n\nClick Save configuration\n\n\n\n\nGlobal alias settings\n\n\nAfter you have enabled the site aliasing feature in Aegir you can navigate to aegir.example.com/admin/hosting/aliases (see the menu item that is added under Hosting in the admin menu bar). Here you can set default site alias settings for all of your Aegir-hosted sites.\n\n\n\n\nSite-specific alias settings\n\n\nYou can override the global settings for aliasing by configuring\nsite-specific alias settings either when you create the site or later by\nediting the site settings.\n\n\n\n\nRedirection Option\n\n\nFor users, one of the main differences that occurs when redirection is turned\non is that the URL that they enter in the browser address bar changes. This\nreflects what the server is doing, which is in effect to redirect the request\nto the same site under the main URL, as opposed to serving the same site from\nunder an alias.\n\n\nUser navigates to my-old-domain.com with redirection off\n\n\n\n\nUser navigates to my-old-domain.com with redirection on\n\n\n\n\nAegir alias management under the hood\n\n\nAegir primarily manages aliases in the virtual hosts file for each site (e.g.  \n/var/aegir/config/server_master/apache/vhost.d/www.example.com\n)\n\n\nWhen Aliases are in use, the virtual hosts file will have a ServerAlias\ndirective for each site alias:\n\n\nServerAlias example.com\nServerAlias www.my-old-domain.com\n\n\n\nIn addition to the above directives, when redirection is off, Aegir creates a symlink in the platform/sites/ folder for each alias that points to the folder associated with the primary domain:\n\n\nlrwxrwxrwx 1 aegir aegir   15 Oct 31 23:25 example.com -\n www.example.com\ndrwxr-xr-x 7 aegir aegir 4096 Oct 31 23:02 www.example.com\nlrwxrwxrwx 1 aegir aegir   15 Oct 31 23:25 www.my-old-domain.com -\n www.example.com\n\n\n\nWhen redirection is enabled, Rewrite directives are added to the virtualhost to send http requests to the primary domain that the aliases are associated with:\n\n\nServerAlias example.com\nServerAlias www.my-old-domain.com\nRewriteEngine on\nRewriteCond %{HTTP_HOST} !^www.example.com$ [NC]\nRewriteRule ^/(.)$ http://www.example.com/$1 [L,R=301]\n\n\n\nThe symlinks are not required in this case.", 
            "title": "Site aliases"
        }, 
        {
            "location": "/usage/sites/aliases/#site-url-aliases", 
            "text": "Site URL aliases  Enable alias support in Aegir  Global alias settings  Site-specific alias settings  Redirection Option  Aegir alias management under the hood      Site aliases are helpful if you move content to a new domain, change domain names or simply want to make sure that http://example.com and http://www.example.com take users to the same place. You can implement site aliases with or without redirection. The differences between these two methods and how Aegir handles them is described below.", 
            "title": "Site URL aliases"
        }, 
        {
            "location": "/usage/sites/aliases/#enable-alias-support-in-aegir", 
            "text": "You have to enable alias support in Aegir as it is off by default.   Browse to  /admin/hosting/features   Check the Site aliasing box  Click Save configuration", 
            "title": "Enable alias support in Aegir"
        }, 
        {
            "location": "/usage/sites/aliases/#global-alias-settings", 
            "text": "After you have enabled the site aliasing feature in Aegir you can navigate to aegir.example.com/admin/hosting/aliases (see the menu item that is added under Hosting in the admin menu bar). Here you can set default site alias settings for all of your Aegir-hosted sites.", 
            "title": "Global alias settings"
        }, 
        {
            "location": "/usage/sites/aliases/#site-specific-alias-settings", 
            "text": "You can override the global settings for aliasing by configuring\nsite-specific alias settings either when you create the site or later by\nediting the site settings.", 
            "title": "Site-specific alias settings"
        }, 
        {
            "location": "/usage/sites/aliases/#redirection-option", 
            "text": "For users, one of the main differences that occurs when redirection is turned\non is that the URL that they enter in the browser address bar changes. This\nreflects what the server is doing, which is in effect to redirect the request\nto the same site under the main URL, as opposed to serving the same site from\nunder an alias.  User navigates to my-old-domain.com with redirection off   User navigates to my-old-domain.com with redirection on", 
            "title": "Redirection Option"
        }, 
        {
            "location": "/usage/sites/aliases/#aegir-alias-management-under-the-hood", 
            "text": "Aegir primarily manages aliases in the virtual hosts file for each site (e.g.   /var/aegir/config/server_master/apache/vhost.d/www.example.com )  When Aliases are in use, the virtual hosts file will have a ServerAlias\ndirective for each site alias:  ServerAlias example.com\nServerAlias www.my-old-domain.com  In addition to the above directives, when redirection is off, Aegir creates a symlink in the platform/sites/ folder for each alias that points to the folder associated with the primary domain:  lrwxrwxrwx 1 aegir aegir   15 Oct 31 23:25 example.com -  www.example.com\ndrwxr-xr-x 7 aegir aegir 4096 Oct 31 23:02 www.example.com\nlrwxrwxrwx 1 aegir aegir   15 Oct 31 23:25 www.my-old-domain.com -  www.example.com  When redirection is enabled, Rewrite directives are added to the virtualhost to send http requests to the primary domain that the aliases are associated with:  ServerAlias example.com\nServerAlias www.my-old-domain.com\nRewriteEngine on\nRewriteCond %{HTTP_HOST} !^www.example.com$ [NC]\nRewriteRule ^/(.)$ http://www.example.com/$1 [L,R=301]  The symlinks are not required in this case.", 
            "title": "Aegir alias management under the hood"
        }, 
        {
            "location": "/usage/sites/importing/", 
            "text": "Importing sites into Aegir\n\n\n\n\n\n\nImporting sites into Aegir\n\n\nRemote Import\n\n\nInstallation\n\n\nUsage\n\n\n\n\n\n\nImporting a single site from another Aegir\n\n\nImporting a single site manually\n\n\n1. Create site resources\n\n\n2. Transfer files\n\n\n3. Transfer database\n\n\n4. Verify in Aegir\n\n\n\n\n\n\nImporting a complete Drupal platform\n\n\n1. Transfer the codebase\n\n\n2. Transfer the Database\n\n\n3. Setup Platform in Aegir\n\n\n4. Import and Verify Sites In Aegir\n\n\n5. Migrate To Another Platform\n\n\n\n\n\n\n\n\n\n\nExtracting a Drupal site from Aegir\n\n\n\n\n\n\nIt is possible to import existing sites into the Aegir hosting system, so that they can be managed by Aegir.\n\n\nThese instructions assume you've set up a new server with Aegir on it, and you want to import sites into Aegir from another server, or even from the same server, using backups.\n\n\nThere are three standard ways of importing sites into Aegir:\n\n\n\n\nusing \nRemote Import\n - simplest and fastest, scriptable\n\n\nfrom any \nsingle site\n manually - most reliable, can import even non-aegir sites, hard to automate\n\n\nfrom a \ncomplete drupal install\n - fairly reliable, can import non-aegir sites, could be automated but requires access to the database servers currently in use by the site\n\n\n\n\nRemote Import\n\n\nThis Drupal module provides a UI for fetching sites from remote Aegir servers.\n\n\nInstallation\n\n\nInstall this module like any other, and enable in the usual way.\n\n\nUsage\n\n\nYou'll need to add the remote Aegir server as any other server in the frontend,\nselecting ONLY the 'hostmaster' remote service as you do so.\n\n\nThis means, of course, that you'll need to add your ssh key to this server and\nset it up like other remote servers. Note that you don't need to install\nanything other than the SSH key on this server.\n\n\nA general guide to setting up SSH on remote servers can be found \nhere\n.\n\n\nOnce you've set up your server in the frontend you should get a new menu item\ncalled: 'Import remote sites' when viewing the server node. Click on that link\nand follow the instructions there.\n\n\nImporting a single site from another Aegir\n\n\nIf Remote Import isn't working for you (perhaps a broken site on the source server is blocking a site listing), you can pretty easily perform similar operations manually.\n\n\n\n\nInstall a site with the same name on the destination server.\n\n\nTake a backup of the new site.\n\n\nDisable the site on the source server (this generates a backup).\n\n\nUse \nscp\n or \nrsync\n to copy the latest backup from the source server to destination.\n\n\nMove the backup from the source over top of the one taken on the destination.\n\n\nRestore the backup via the Aegir UI  (on the destination server).\n\n\nClear caches, rebuild registries and verify the new site.\n\n\n(Optional) Point the DNS entry for the site to the new server.\n\n\n(Optional) Login to the site, and perhaps fix some internally stored paths (i.e., CiviCRM's \"Resource URL\")\n\n\n\n\nImporting a single site manually\n\n\nIf you already have a platform setup on Aegir with EXACTLY the same codebase as your existing site, then you don't need to transfer the entire old codebase - you can just transfer the sites/example.com directory. However, you also need to make sure any dependencies on contrib modules that your site has, are covered on the codebase or Platform that you're importing it into.\n\n\nIn general it may be considered safer/less prone to confusing errors to \ntransfer the entire old codebase\n into Aegir as a whole Platform, whereby the site will be imported automatically under that Platform. You can then migrate it in Aegir to one of your existing Platforms later.\n\n\nAlso, it is much faster to just \"deploy\" an Aegir backup than go through the manual procedure here, so you should generally follow that procedure instead of the one defined here unless you have a very hairy setup.\n\n\n1. Create site resources\n\n\nIn order to import the site, you need to create a database and database user for the site, along with a directory in the platform.\n\n\nThe simplest way to do this is to create an empty site in the right platform and overwrite it. Through the commandline:\n\n\n$ drush provision-save @example.com --context_type=site --platform=@platform_d6 --uri=example.com --db_server=@server_localhost --client_name=admin\n\n$ drush provision-install @example.com\n\n\n\nThrough the UI, this can be done simply by creating a site in Create content.\n\n\nIf this is not working for some reason, you can create the mysql user and database manually using the following:\n\n\nmysql\n GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, LOCK TABLES, CREATE TEMPORARY TABLES ON databasename.* TO 'databaseuser'@'localhost' IDENTIFIED BY 'password';\n\nmysql\n CREATE DATABASE databasename;\n\n\n\n2. Transfer files\n\n\nYou need to copy the sites/example.com directory from your old server to the new Aegir server.\n\n\nTo do this, first create a tarball of the site on the old server. Within the sites/example.com directory type:\n\n\n$ tar -zcvf example.com.tar.gz .\n\n\n\nThen, on the Aegir server, you can create a directory for it in the codebase (platform) you want to put it under:\n\n\n$ cd /var/aegir/platforms/drupal-X.Y/sites\n$ mkdir example.com\n$ cd example.com\n$ wget http://example.com/example.com.tar.gz\n$ tar -zxvf example.com.tar.gz ./files ./modules ./libraries ./themes\n\n\n\nInstead of using wget you could of course use curl, rsync, SCP or FTP to transfer the tarball onto the Aegir server.\n\n\nIn the above we assume that you have created an empty site as directed above, if not, you will also need to extract the settings.php file, so that last command should instead be simply:\n\n\n$ tar -zxvf example.com.tar.gz\n\n\n\nThen you will need to modify the settings.php file to follow the user and database created in the first step. Again, this is not necessary if you let Aegir create the site for you.\n\n\nOnce the file is unpacked, check the ownership and group of each file by using ls -al. It should be either 'aegir:aegir' or 'aegir:www-data'. Change it if necessary. In particular, files that may have been uploaded on your site via modules like imagecache, upload, Profile pics etc, may need to have their ownership changed:\n\n\n$ sudo chown -R aegir:www-data $platform/sites/*/files\n\n\n\n3. Transfer database\n\n\nMake a backup of the database on your old server Backup and Migrate module is good for this, or you can use phpmyadmin or your favourite MySQL management tool. It's a good idea to truncate the cache, search and watchdog tables first to reduce the size of the database. The \"Backup and Migrate\" module does this for you.\n\n\nIf you are importing a site from a previous Aegir installation somewhere, such as from a backup tarball, the database.sql will already be within the tarball you unpacked. You can use this to import into a new database on your new server.\n\n\nYou can import the database with drush using the following command:\n\n\n$ drush @example.com sqlc \n database.sql\n\n\n\n4. Verify in Aegir\n\n\nIn the Aegir web interface click on the name of the platform you have added your site to. You can access the list of platforms via the 'Platforms' tab in the primary links menu.\n\n\nExecute a new Verify task on this platform via the 'Verify' button in the task list.\n\n\nAegir will now re-verify the platform. In the process of this, it will discover your new site and spawn a new 'Import' task for the site.\n\n\nOnce it's done this (it may take a couple of cron runs to dispatch these tasks in the queue) the tasks should turn green.\n\n\nAt this point, presuming you have updated DNS or are overriding DNS via an entry in your /etc/hosts file to access the site via the new Aegir server, you can visit the site in a browser and check around to see that it has worked. Pay particular attention to any links in node content that pointed to paths referencing /sites/community.aegirproject.org if your site was not part of a multisite setup. (Drupal has a habit of storing these paths in the database, or they may have been hard-coded into nodes by users).\n\n\nAegir will not go through all your database and update all URLs, so some images or links may be broken. This will need to be done manually. Aegir does attempt to update paths stored in tables such as 'files' though.\n\n\nIt's a good idea to clear the caches, and you may need to get imagecache to rebuild its thumbnails if you use it.\n\n\nImporting a complete Drupal platform\n\n\nThis method of importing sites is often considered the safest whereby you transfer across an entire codebase containing Drupal core, and define it as a Platform first. This makes sure you bring any dependencies, contrib modules etc, in exactly the same version and configuration that is referenced in the database for the site.\n\n\n1. Transfer the codebase\n\n\nCreate a tarball of the codebase on the old server. Within the drupal root directory type: tar -zcvf example.com.tar.gz * .htaccess\n\n\nNote that we have to specify including the .htaccess because it isn't picked up by the * wildcard due to being prefixed with a full stop. It is important to bring along the .htaccess for a platform so that Aegir can consider these settings when it generates Apache configuration for this platform.\n\n\nThen, on the new server you can create a directory for it in the codebase you want to put it under:\n\n\n$ cd /var/aegir/platforms\n$ mkdir your-new-platform\n$ cd your-new-platform\n$ wget http://example.com/example.com.tar.gz\n$ tar -zxvf example.com.tar.gz\n\n\n\nInstead of using wget you could of course use SCP or FTP to transfer the tarball onto the Aegir server.\n\n\nOnce the file is unpacked, check the ownership and group of each file by using ls -al. It should be either 'aegir:aegir' or 'aegir:www-data'. Change it if necessary. We have to assume you have basic knowledge of Linux and POSIX permissions - we can't be responsible for teaching you sysadmin skills :)\n\n\nIn particular, files that may have been uploaded on your site via modules like\nimagecache, upload, Profile pics etc, may need to have their ownership changed:\nsudo chown -R aegir $platform/sites/*/files\n\n\nIf your site previously resided in sites/defau1t you need to move it because Aegir ignores the default directory (it has no way of understanding what URL this would be accessed by, so it is impossible to 'manage' it). Each site needs its own directory with the correct domain in typical Drupal multisite design:\n\n\n$ mv sites/defau1t sites/example.com\n\n\n\nIf you do this, you may need to also update your filepath's stored in the files table by running the following query on your database:\n\n\nmysql\n UPDATE files SET filepath = REPLACE(filepath, 'sites/defau1t', 'sites/example.com');\n\n\n\nThere are many other places in the database that can suffer the same problem, the node_revisions table for example. If you have phpMyAdmin available you can easily search the entire database for 'sites/defau1t'. Select the database, then click the Search tab. Once you know which tables are affected you can run a variation of the above query to correct these records.\n\n\n2. Transfer the Database\n\n\nNote: This step is not necessary if you are moving your site from one directory on your server (e.g., /var/www/html) to a newly created Aegir directory on the same server (e.g., /var/aegir).\n\n\nMake a backup of the database on your old server Backup and Migrate module is good for this, or you can use phpmyadmin or your favourite MySQL management tool. It's a good idea to truncate the cache, search and watchdog tables first to reduce the size of the database (Backup and Migrate does this for you).\n\n\nAegir does not provide support for importing databases with prefixed tables so it is best to remove prefixes form the database. However, a \nworkaround is available\n if you want to keep prefixes on your tables.\n\n\nUnlike traditional Drupal projects the database settings cannot be found in settings.php. The database credentials are stored in the Apache vhost config of the associated site. This is a security measure implemented by the Aegir project.\n\n\nIn the vhost directory on your old server, /var/aegir/config/server_master/apache/vhost.d/, there is a vhost file for every site on your server. The contents of the file can be displayed in your terminal with the command:\n\n\n$ cat thenameofthefile\n\n\n\nAt the top of the file you will find the credentials needed to create a database on the new server.\n\n\nOn your new server, manually create a new database and upload the .sql file from your backup.\n\n\nThen create the mysql user that your site accesses the database as, and grant it all permissions on that database except 'GRANT'.\n\n\nConnect to the database on the old server:\n\n\n$ mysql -u root -p\n\n\n\nCreate the new database:\n\n\nmysql\n create database yourdatabasename\n\n\n\nAdd the user:\n\n\nmysql\n CREATE USER 'yourdatabaseuser'@'localhost' identified by 'youruserpassword';\n\n\n\nGive the necessary privileges:\n\n\nmysql\n GRANT ALL PRIVILEGES ON yourdatabasename.* TO 'yourdatabaseuser'@'localhost';\n\n\n\nImport the database:\n\n\n$ mysql -u yourdatabaseuser -p -h localhost yourdatabasename \n thenameofthedatabase.sql\n\n\n\n3. Setup Platform in Aegir\n\n\nIn the Aegir web interface click on 'Create Content' and 'Platform'. This step is often easiest when using the admin-menu on the top of your screen.\n\n\nEnter the name you want to use for the platform (eg 'My Platform import'), and the path to the platform on the server (eg '/var/aegir/platforms/your-new-platform')\n\n\nClick Save to submit the form, and Aegir will spawn a Verify task for this platform into the queue.\n\n\nOnce the task is complete this the task should turn green (click through to the homepage to refesh and check. If not, see 'Troubleshooting' below).\n\n\n4. Import and Verify Sites In Aegir\n\n\nUpon completion of the above Platform verification task, Aegir will discover your new site and spawn a new 'Import' task for the site.\n\n\nOnce it's done this (it may take a couple of cron runs to dispatch these tasks in the queue) the tasks should turn green (if not, see 'Troubleshooting' below).\n\n\nAt this point, presuming you have updated DNS or are overriding DNS via an entry in your /etc/hosts file to access the site via the new Aegir server, you can visit site in a browser and check around to see that it has worked. Pay particular attention to any links in node content that pointed to paths referencing /sites/community.aegirproject.org if your site was not part of a multisite setup. (Drupal has a habit of storing these paths in the database, or they may have been hard-coded into nodes by users).\n\n\nIt's a good idea to clear the caches, and you may need to get imagecache to rebuild its thumbnails if you use it.\n\n\n5. Migrate To Another Platform\n\n\nNow that you have your sites under Aegir's control you can take advantage of its power, and easily migrate them to another platform. In the event that your sites were on old versions of Drupal core and a new one is available and present as another Platform on your Aegir server, you can use the Migrate process to upgrade those sites onto the new core.\n\n\nFor details on how to Migrate sites, consult the \nMigrate documentation\n.\n\n\nExtracting a Drupal site from Aegir\n\n\nYou may occasionally want to take a Drupal site hosted on a server managed with Aegir and put it somewhere else. This is pretty easy, but not quite as simple as moving a normal Drupal site not managed by Aegir from one machine to another. In brief, you have to copy the site, delete the \ndrushrc.php\n file, and replace \nsettings.php\n with a copy of the default configuration file. More specifically:\n\n\n\n\nMake a backup of your site in Aegir.\n\n\nDownload the same copy of drupal core to the new server (and re-apply core patches, if any).\n\n\nCopy \nsites/all/\n to the new server.\n\n\nCopy the Aegir backup of your site to the new server and unzip in \nsites/example.com/\n.\n\n\nCreate a database on the new server and import the database backup.\n\n\nCopy any custom site aliases in \nsites/sites.php\n to the new server.\n\n\nCopy any custom configuration in \nlocal.settings.php\n to \nsettings.php\n.\n\n\nEdit \nsettings.php\n to add the database authentication details for the new server.\n\n\n\n\nThat's it!", 
            "title": "Importing sites"
        }, 
        {
            "location": "/usage/sites/importing/#importing-sites-into-aegir", 
            "text": "Importing sites into Aegir  Remote Import  Installation  Usage    Importing a single site from another Aegir  Importing a single site manually  1. Create site resources  2. Transfer files  3. Transfer database  4. Verify in Aegir    Importing a complete Drupal platform  1. Transfer the codebase  2. Transfer the Database  3. Setup Platform in Aegir  4. Import and Verify Sites In Aegir  5. Migrate To Another Platform      Extracting a Drupal site from Aegir    It is possible to import existing sites into the Aegir hosting system, so that they can be managed by Aegir.  These instructions assume you've set up a new server with Aegir on it, and you want to import sites into Aegir from another server, or even from the same server, using backups.  There are three standard ways of importing sites into Aegir:   using  Remote Import  - simplest and fastest, scriptable  from any  single site  manually - most reliable, can import even non-aegir sites, hard to automate  from a  complete drupal install  - fairly reliable, can import non-aegir sites, could be automated but requires access to the database servers currently in use by the site", 
            "title": "Importing sites into Aegir"
        }, 
        {
            "location": "/usage/sites/importing/#remote-import", 
            "text": "This Drupal module provides a UI for fetching sites from remote Aegir servers.  Installation  Install this module like any other, and enable in the usual way.  Usage  You'll need to add the remote Aegir server as any other server in the frontend,\nselecting ONLY the 'hostmaster' remote service as you do so.  This means, of course, that you'll need to add your ssh key to this server and\nset it up like other remote servers. Note that you don't need to install\nanything other than the SSH key on this server.  A general guide to setting up SSH on remote servers can be found  here .  Once you've set up your server in the frontend you should get a new menu item\ncalled: 'Import remote sites' when viewing the server node. Click on that link\nand follow the instructions there.", 
            "title": "Remote Import"
        }, 
        {
            "location": "/usage/sites/importing/#importing-a-single-site-from-another-aegir", 
            "text": "If Remote Import isn't working for you (perhaps a broken site on the source server is blocking a site listing), you can pretty easily perform similar operations manually.   Install a site with the same name on the destination server.  Take a backup of the new site.  Disable the site on the source server (this generates a backup).  Use  scp  or  rsync  to copy the latest backup from the source server to destination.  Move the backup from the source over top of the one taken on the destination.  Restore the backup via the Aegir UI  (on the destination server).  Clear caches, rebuild registries and verify the new site.  (Optional) Point the DNS entry for the site to the new server.  (Optional) Login to the site, and perhaps fix some internally stored paths (i.e., CiviCRM's \"Resource URL\")", 
            "title": "Importing a single site from another Aegir"
        }, 
        {
            "location": "/usage/sites/importing/#importing-a-single-site-manually", 
            "text": "If you already have a platform setup on Aegir with EXACTLY the same codebase as your existing site, then you don't need to transfer the entire old codebase - you can just transfer the sites/example.com directory. However, you also need to make sure any dependencies on contrib modules that your site has, are covered on the codebase or Platform that you're importing it into.  In general it may be considered safer/less prone to confusing errors to  transfer the entire old codebase  into Aegir as a whole Platform, whereby the site will be imported automatically under that Platform. You can then migrate it in Aegir to one of your existing Platforms later.  Also, it is much faster to just \"deploy\" an Aegir backup than go through the manual procedure here, so you should generally follow that procedure instead of the one defined here unless you have a very hairy setup.  1. Create site resources  In order to import the site, you need to create a database and database user for the site, along with a directory in the platform.  The simplest way to do this is to create an empty site in the right platform and overwrite it. Through the commandline:  $ drush provision-save @example.com --context_type=site --platform=@platform_d6 --uri=example.com --db_server=@server_localhost --client_name=admin\n\n$ drush provision-install @example.com  Through the UI, this can be done simply by creating a site in Create content.  If this is not working for some reason, you can create the mysql user and database manually using the following:  mysql  GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, LOCK TABLES, CREATE TEMPORARY TABLES ON databasename.* TO 'databaseuser'@'localhost' IDENTIFIED BY 'password';\n\nmysql  CREATE DATABASE databasename;  2. Transfer files  You need to copy the sites/example.com directory from your old server to the new Aegir server.  To do this, first create a tarball of the site on the old server. Within the sites/example.com directory type:  $ tar -zcvf example.com.tar.gz .  Then, on the Aegir server, you can create a directory for it in the codebase (platform) you want to put it under:  $ cd /var/aegir/platforms/drupal-X.Y/sites\n$ mkdir example.com\n$ cd example.com\n$ wget http://example.com/example.com.tar.gz\n$ tar -zxvf example.com.tar.gz ./files ./modules ./libraries ./themes  Instead of using wget you could of course use curl, rsync, SCP or FTP to transfer the tarball onto the Aegir server.  In the above we assume that you have created an empty site as directed above, if not, you will also need to extract the settings.php file, so that last command should instead be simply:  $ tar -zxvf example.com.tar.gz  Then you will need to modify the settings.php file to follow the user and database created in the first step. Again, this is not necessary if you let Aegir create the site for you.  Once the file is unpacked, check the ownership and group of each file by using ls -al. It should be either 'aegir:aegir' or 'aegir:www-data'. Change it if necessary. In particular, files that may have been uploaded on your site via modules like imagecache, upload, Profile pics etc, may need to have their ownership changed:  $ sudo chown -R aegir:www-data $platform/sites/*/files  3. Transfer database  Make a backup of the database on your old server Backup and Migrate module is good for this, or you can use phpmyadmin or your favourite MySQL management tool. It's a good idea to truncate the cache, search and watchdog tables first to reduce the size of the database. The \"Backup and Migrate\" module does this for you.  If you are importing a site from a previous Aegir installation somewhere, such as from a backup tarball, the database.sql will already be within the tarball you unpacked. You can use this to import into a new database on your new server.  You can import the database with drush using the following command:  $ drush @example.com sqlc   database.sql  4. Verify in Aegir  In the Aegir web interface click on the name of the platform you have added your site to. You can access the list of platforms via the 'Platforms' tab in the primary links menu.  Execute a new Verify task on this platform via the 'Verify' button in the task list.  Aegir will now re-verify the platform. In the process of this, it will discover your new site and spawn a new 'Import' task for the site.  Once it's done this (it may take a couple of cron runs to dispatch these tasks in the queue) the tasks should turn green.  At this point, presuming you have updated DNS or are overriding DNS via an entry in your /etc/hosts file to access the site via the new Aegir server, you can visit the site in a browser and check around to see that it has worked. Pay particular attention to any links in node content that pointed to paths referencing /sites/community.aegirproject.org if your site was not part of a multisite setup. (Drupal has a habit of storing these paths in the database, or they may have been hard-coded into nodes by users).  Aegir will not go through all your database and update all URLs, so some images or links may be broken. This will need to be done manually. Aegir does attempt to update paths stored in tables such as 'files' though.  It's a good idea to clear the caches, and you may need to get imagecache to rebuild its thumbnails if you use it.", 
            "title": "Importing a single site manually"
        }, 
        {
            "location": "/usage/sites/importing/#importing-a-complete-drupal-platform", 
            "text": "This method of importing sites is often considered the safest whereby you transfer across an entire codebase containing Drupal core, and define it as a Platform first. This makes sure you bring any dependencies, contrib modules etc, in exactly the same version and configuration that is referenced in the database for the site.  1. Transfer the codebase  Create a tarball of the codebase on the old server. Within the drupal root directory type: tar -zcvf example.com.tar.gz * .htaccess  Note that we have to specify including the .htaccess because it isn't picked up by the * wildcard due to being prefixed with a full stop. It is important to bring along the .htaccess for a platform so that Aegir can consider these settings when it generates Apache configuration for this platform.  Then, on the new server you can create a directory for it in the codebase you want to put it under:  $ cd /var/aegir/platforms\n$ mkdir your-new-platform\n$ cd your-new-platform\n$ wget http://example.com/example.com.tar.gz\n$ tar -zxvf example.com.tar.gz  Instead of using wget you could of course use SCP or FTP to transfer the tarball onto the Aegir server.  Once the file is unpacked, check the ownership and group of each file by using ls -al. It should be either 'aegir:aegir' or 'aegir:www-data'. Change it if necessary. We have to assume you have basic knowledge of Linux and POSIX permissions - we can't be responsible for teaching you sysadmin skills :)  In particular, files that may have been uploaded on your site via modules like\nimagecache, upload, Profile pics etc, may need to have their ownership changed:\nsudo chown -R aegir $platform/sites/*/files  If your site previously resided in sites/defau1t you need to move it because Aegir ignores the default directory (it has no way of understanding what URL this would be accessed by, so it is impossible to 'manage' it). Each site needs its own directory with the correct domain in typical Drupal multisite design:  $ mv sites/defau1t sites/example.com  If you do this, you may need to also update your filepath's stored in the files table by running the following query on your database:  mysql  UPDATE files SET filepath = REPLACE(filepath, 'sites/defau1t', 'sites/example.com');  There are many other places in the database that can suffer the same problem, the node_revisions table for example. If you have phpMyAdmin available you can easily search the entire database for 'sites/defau1t'. Select the database, then click the Search tab. Once you know which tables are affected you can run a variation of the above query to correct these records.  2. Transfer the Database  Note: This step is not necessary if you are moving your site from one directory on your server (e.g., /var/www/html) to a newly created Aegir directory on the same server (e.g., /var/aegir).  Make a backup of the database on your old server Backup and Migrate module is good for this, or you can use phpmyadmin or your favourite MySQL management tool. It's a good idea to truncate the cache, search and watchdog tables first to reduce the size of the database (Backup and Migrate does this for you).  Aegir does not provide support for importing databases with prefixed tables so it is best to remove prefixes form the database. However, a  workaround is available  if you want to keep prefixes on your tables.  Unlike traditional Drupal projects the database settings cannot be found in settings.php. The database credentials are stored in the Apache vhost config of the associated site. This is a security measure implemented by the Aegir project.  In the vhost directory on your old server, /var/aegir/config/server_master/apache/vhost.d/, there is a vhost file for every site on your server. The contents of the file can be displayed in your terminal with the command:  $ cat thenameofthefile  At the top of the file you will find the credentials needed to create a database on the new server.  On your new server, manually create a new database and upload the .sql file from your backup.  Then create the mysql user that your site accesses the database as, and grant it all permissions on that database except 'GRANT'.  Connect to the database on the old server:  $ mysql -u root -p  Create the new database:  mysql  create database yourdatabasename  Add the user:  mysql  CREATE USER 'yourdatabaseuser'@'localhost' identified by 'youruserpassword';  Give the necessary privileges:  mysql  GRANT ALL PRIVILEGES ON yourdatabasename.* TO 'yourdatabaseuser'@'localhost';  Import the database:  $ mysql -u yourdatabaseuser -p -h localhost yourdatabasename   thenameofthedatabase.sql  3. Setup Platform in Aegir  In the Aegir web interface click on 'Create Content' and 'Platform'. This step is often easiest when using the admin-menu on the top of your screen.  Enter the name you want to use for the platform (eg 'My Platform import'), and the path to the platform on the server (eg '/var/aegir/platforms/your-new-platform')  Click Save to submit the form, and Aegir will spawn a Verify task for this platform into the queue.  Once the task is complete this the task should turn green (click through to the homepage to refesh and check. If not, see 'Troubleshooting' below).  4. Import and Verify Sites In Aegir  Upon completion of the above Platform verification task, Aegir will discover your new site and spawn a new 'Import' task for the site.  Once it's done this (it may take a couple of cron runs to dispatch these tasks in the queue) the tasks should turn green (if not, see 'Troubleshooting' below).  At this point, presuming you have updated DNS or are overriding DNS via an entry in your /etc/hosts file to access the site via the new Aegir server, you can visit site in a browser and check around to see that it has worked. Pay particular attention to any links in node content that pointed to paths referencing /sites/community.aegirproject.org if your site was not part of a multisite setup. (Drupal has a habit of storing these paths in the database, or they may have been hard-coded into nodes by users).  It's a good idea to clear the caches, and you may need to get imagecache to rebuild its thumbnails if you use it.  5. Migrate To Another Platform  Now that you have your sites under Aegir's control you can take advantage of its power, and easily migrate them to another platform. In the event that your sites were on old versions of Drupal core and a new one is available and present as another Platform on your Aegir server, you can use the Migrate process to upgrade those sites onto the new core.  For details on how to Migrate sites, consult the  Migrate documentation .", 
            "title": "Importing a complete Drupal platform"
        }, 
        {
            "location": "/usage/sites/importing/#extracting-a-drupal-site-from-aegir", 
            "text": "You may occasionally want to take a Drupal site hosted on a server managed with Aegir and put it somewhere else. This is pretty easy, but not quite as simple as moving a normal Drupal site not managed by Aegir from one machine to another. In brief, you have to copy the site, delete the  drushrc.php  file, and replace  settings.php  with a copy of the default configuration file. More specifically:   Make a backup of your site in Aegir.  Download the same copy of drupal core to the new server (and re-apply core patches, if any).  Copy  sites/all/  to the new server.  Copy the Aegir backup of your site to the new server and unzip in  sites/example.com/ .  Create a database on the new server and import the database backup.  Copy any custom site aliases in  sites/sites.php  to the new server.  Copy any custom configuration in  local.settings.php  to  settings.php .  Edit  settings.php  to add the database authentication details for the new server.   That's it!", 
            "title": "Extracting a Drupal site from Aegir"
        }, 
        {
            "location": "/usage/platforms/", 
            "text": "Setting up a Platform\n\n\n\n\n\n\nSetting up a Platform\n\n\nWhat is a platform anyway?\n\n\nWhat else could be considered a platform?\n\n\nGetting a Platform onto your server\n\n\nDrush\n\n\nWget\n\n\nVersion control\n\n\nManually\n\n\nDrush Make\n\n\n\n\n\n\nPlatforms and remote web servers\n\n\nDo I have to have multiple platforms?\n\n\nAdding the Platform node\n\n\n\n\n\n\n\n\n\n\nWhat is a platform anyway?\n\n\nPlatforms are a type of node in Aegir and often the source of confusion for new users. This is because the term or concept isn't really used explicitly outside of Aegir - Aegir is a system that suddenly makes Platforms 'make sense' to have.\n\n\nThe simplest definition of a Platform is a copy of Drupal core. That's really it. When you download a copy of Drupal from drupal.org, the result is what Aegir thinks of as a 'Platform'. No sites exist on it yet.\n\n\nBefore you can create a site using Aegir, you must first define the Platform.  This tells Aegir where to store the site directory, settings.php etc on the system.\n\n\nIn short: first you create a Platform, and a site 'lives' on that platform, in exactly this fashion:\n\n\n\n\n/var/aegir/platforms/drupal-7.41\n (Platform)\n\n\n/sites/example.com/settings.php\n (site)\n\n\n\n\n\n\n\n\nThis abstraction is somewhat unique to Aegir in that it opens up a world of new opportunities for you. By managing Platforms or copies of Drupal core, and understanding what sites are on what copy of core, Aegir is capable of moving sites between platforms (which is effectively upgrading a site) - read more about this in Migrating/upgrading and renaming sites.\n\n\nWhat else could be considered a platform?\n\n\nAnything that is more or less a copy of Drupal core is something Aegir considers a 'platform'. This thus includes any Drupal distribution, such as OpenAtrium, Pressflow, Acquia Drupal, OpenPublish, ManagingNews, and so on.\n\n\nThe key difference between such distributions and a standard 'vanilla' copy of Drupal core is that these distributions tend to have:\n\n\n\n\na custom install profile in the /profiles/ directory\n\n\na set of contrib or custom developed modules, libraries or themes shipped with the core or profile\n\n\n\n\nIf you build a copy of Drupal core and place your custom install profile in /profiles, this could be considered a Platform.\n\n\nIf you place your custom install profile in an existing Platform and re-Verify the Platform, that profile will now be recognised as an option when creating a site on that Platform.\n\n\nVarious 'versions' of Drupal, such as Drupal 6.x, Drupal 7.x or Drupal 8.x, are all considered separate Platforms in Aegir.\n\n\nIs this paradigm clear? 'Sites' are managed inside 'Platforms'. 'Platforms' are managed inside 'Servers'. 'Servers' are managed by Aegir. In this sense, Aegir manages all the rest too.\n\n\nGetting a Platform onto your server\n\n\nA number of techniques exist to put a platform on a server. By convention, we\nkeep platforms in \n/var/aegir/platform\n. So that's a good place to begin:\n\n\n$ cd ~/platforms\n\n\n\nDrush\n\n\nFor a standard Drupal platform, the easiest is to simply use drush:\n\n\n$ drush dl\n\n\n\nWget\n\n\nYou can also use the 'wget' command, for example:\n\n\n$ wget http://launchpad.net/prosepoint/trunk/0.23/+download/prosepoint-0.23.tar.gz\n$ tar -zxvf prosepoint-0.23.tar.gz\n\n\n\nVersion control\n\n\nYou could use Git, e.g.:\n\n\n$ git clone https://github.com/pressflow/7.git pressflow-7\n\n\n\nManually\n\n\nYou could download it on your PC and scp or FTP the files up onto your server.\n\n\nDrush Make\n\n\nDrush Make comes installed on your Aegir system by default. You can use Drush Make to 'build' a platform, which does the job of fetching core and any other contributed or custom packages that you specify in a makefile.\n\n\nYou can even specify the URL or path to a makefile in the form you are given when adding a Platform node in the Aegir frontend, and Aegir will execute the Drush Make command in the backend and build it for you!\n\n\nExplaining how to use Drush Make is outside the scope of this document. Consult the README.txt of Drush Make to learn the makefile syntax, or use a ready-made makefile available from the web. Some distributions such as OpenAtrium provide an example makefile for you to build the distribution with.\n\n\nPlatforms and remote web servers\n\n\nAegir has a 'spoke' model when it comes to remote servers, whereby the 'master' Aegir server keeps a copy of all platforms and sites and syncs changes outbound to remote servers that are running those platforms or sites, on tasks such as Verify etc.\n\n\nBecause of this, all platform names and paths must be unique, even across remote servers. This means you cannot have 'Drupal 7.0' in /var/aegir/platforms/drupal-7.0 on both Server A and Server B, because it can only exist once in that location on the master Aegir server. Platforms can't share the same name 'Drupal 7.0' because Aegir uses the platform name to define a 'context' by which it can refer to that server, and there can be no conflicts.\n\n\nThe exception to the unique path rule is when using web clustering (a collection of web servers running a platform), but even then, the platform is attached to the 'cluster' server and so is still 'unique' in this sense, that path cannot be reused for another platform running on another server somewhere else.\n\n\nSo when adding platforms to your filesystem and to Aegir, make sure that the platform is unique in name and path, so that other servers cannot try and use this reserved name/path for other platforms.\n\n\nMore on the platform name space\n\n\nMigrating a site to a remote server illustrates this name space issue further: as an example; given that an Aegir hostmaster has two directories representing two platforms (and remembering that aegir does not migrate platforms, only sites):\n\n\n\n\n/var/aegir/platforms/plat-local  \n\n\n/var/aegir/platforms/plat-remote  \n\n\n\n\nand the remote server also has:\n\n\n\n\n/var/aegir/platforms/plat-remote\n\n\n\n\nthen having aegir hostmaster migrate a site from platform plat-local to plat-remote will result in the site files being:\n\n\n\n\nmoved from .../plat-local to hostmaster's local .../plat-remote and\n\n\nrsync'd to .../plat-remote on the remote server.\n\n\n\n\nIt is important to understand this if you are importing a working Drupal site into Aegir's control and Aegir hostmaster is on a different server from the working Drupal site.\n\n\nDo I have to have multiple platforms?\n\n\nNo, you can simply have one platform or copy of Drupal core and provision all your sites to sit on the one platform. However, eventually you will want to upgrade your sites to a new copy of Drupal core, and rather than replace your core files in-place, it's recommended to build a new Platform with the newer copy of core, and use the Migrate task to move your sites (upgrade) onto the new code.\n\n\nAdding the Platform node\n\n\nNow that you've got your Platform on your server, or you know where and how you're going to do it (say, with Drush Make), it's time to tell Aegir about your new Platform.\n\n\nTo do so, add a new node of type 'Platform' in your Aegir frontend. Typically this is most easily done by visiting Create Content \n Platform in the Admin Menu.\n\n\nThe Platform node form has several fields required for giving Aegir information about your platform. These are:\n\n\n\n\nName\n -- a descriptive name for your platform. You very likely want this to be something like \"Drupal 7.41\".\n\n\nPublish Path\n -- the path on the filesystem where the platform is, or will be when Drush Make builds it. This must be the absolute path, for instance \n/var/aegir/drupal-7.41\n\n\nMakefile\n -- the path on the filesystem to a makefile that will be used to create the platform.\n\n\n\n\nOnce you have completed entering this information, you can click the Save button. A 'Verify' task will be spawned and added to the Task queue (visible in the right sidebar). The backend will then parse this new platform and build up a registry of information about it, such as what version of Drupal it is, as well as what versions of install profiles, modules and themes are present on that platform.\n\n\nCertain system configurations, such as Apache configurations similar to the .htaccess file that comes with Drupal, will be written to the filesystem, permissions checked and adjusted where necessary, and services restarted.\n\n\nNow that you have a platform or codebase that Aegir is aware of, you can now proceed to install or import sites onto that platform!", 
            "title": "Platforms"
        }, 
        {
            "location": "/usage/platforms/#setting-up-a-platform", 
            "text": "Setting up a Platform  What is a platform anyway?  What else could be considered a platform?  Getting a Platform onto your server  Drush  Wget  Version control  Manually  Drush Make    Platforms and remote web servers  Do I have to have multiple platforms?  Adding the Platform node", 
            "title": "Setting up a Platform"
        }, 
        {
            "location": "/usage/platforms/#what-is-a-platform-anyway", 
            "text": "Platforms are a type of node in Aegir and often the source of confusion for new users. This is because the term or concept isn't really used explicitly outside of Aegir - Aegir is a system that suddenly makes Platforms 'make sense' to have.  The simplest definition of a Platform is a copy of Drupal core. That's really it. When you download a copy of Drupal from drupal.org, the result is what Aegir thinks of as a 'Platform'. No sites exist on it yet.  Before you can create a site using Aegir, you must first define the Platform.  This tells Aegir where to store the site directory, settings.php etc on the system.  In short: first you create a Platform, and a site 'lives' on that platform, in exactly this fashion:   /var/aegir/platforms/drupal-7.41  (Platform)  /sites/example.com/settings.php  (site)     This abstraction is somewhat unique to Aegir in that it opens up a world of new opportunities for you. By managing Platforms or copies of Drupal core, and understanding what sites are on what copy of core, Aegir is capable of moving sites between platforms (which is effectively upgrading a site) - read more about this in Migrating/upgrading and renaming sites.", 
            "title": "What is a platform anyway?"
        }, 
        {
            "location": "/usage/platforms/#what-else-could-be-considered-a-platform", 
            "text": "Anything that is more or less a copy of Drupal core is something Aegir considers a 'platform'. This thus includes any Drupal distribution, such as OpenAtrium, Pressflow, Acquia Drupal, OpenPublish, ManagingNews, and so on.  The key difference between such distributions and a standard 'vanilla' copy of Drupal core is that these distributions tend to have:   a custom install profile in the /profiles/ directory  a set of contrib or custom developed modules, libraries or themes shipped with the core or profile   If you build a copy of Drupal core and place your custom install profile in /profiles, this could be considered a Platform.  If you place your custom install profile in an existing Platform and re-Verify the Platform, that profile will now be recognised as an option when creating a site on that Platform.  Various 'versions' of Drupal, such as Drupal 6.x, Drupal 7.x or Drupal 8.x, are all considered separate Platforms in Aegir.  Is this paradigm clear? 'Sites' are managed inside 'Platforms'. 'Platforms' are managed inside 'Servers'. 'Servers' are managed by Aegir. In this sense, Aegir manages all the rest too.", 
            "title": "What else could be considered a platform?"
        }, 
        {
            "location": "/usage/platforms/#getting-a-platform-onto-your-server", 
            "text": "A number of techniques exist to put a platform on a server. By convention, we\nkeep platforms in  /var/aegir/platform . So that's a good place to begin:  $ cd ~/platforms  Drush  For a standard Drupal platform, the easiest is to simply use drush:  $ drush dl  Wget  You can also use the 'wget' command, for example:  $ wget http://launchpad.net/prosepoint/trunk/0.23/+download/prosepoint-0.23.tar.gz\n$ tar -zxvf prosepoint-0.23.tar.gz  Version control  You could use Git, e.g.:  $ git clone https://github.com/pressflow/7.git pressflow-7  Manually  You could download it on your PC and scp or FTP the files up onto your server.  Drush Make  Drush Make comes installed on your Aegir system by default. You can use Drush Make to 'build' a platform, which does the job of fetching core and any other contributed or custom packages that you specify in a makefile.  You can even specify the URL or path to a makefile in the form you are given when adding a Platform node in the Aegir frontend, and Aegir will execute the Drush Make command in the backend and build it for you!  Explaining how to use Drush Make is outside the scope of this document. Consult the README.txt of Drush Make to learn the makefile syntax, or use a ready-made makefile available from the web. Some distributions such as OpenAtrium provide an example makefile for you to build the distribution with.", 
            "title": "Getting a Platform onto your server"
        }, 
        {
            "location": "/usage/platforms/#platforms-and-remote-web-servers", 
            "text": "Aegir has a 'spoke' model when it comes to remote servers, whereby the 'master' Aegir server keeps a copy of all platforms and sites and syncs changes outbound to remote servers that are running those platforms or sites, on tasks such as Verify etc.  Because of this, all platform names and paths must be unique, even across remote servers. This means you cannot have 'Drupal 7.0' in /var/aegir/platforms/drupal-7.0 on both Server A and Server B, because it can only exist once in that location on the master Aegir server. Platforms can't share the same name 'Drupal 7.0' because Aegir uses the platform name to define a 'context' by which it can refer to that server, and there can be no conflicts.  The exception to the unique path rule is when using web clustering (a collection of web servers running a platform), but even then, the platform is attached to the 'cluster' server and so is still 'unique' in this sense, that path cannot be reused for another platform running on another server somewhere else.  So when adding platforms to your filesystem and to Aegir, make sure that the platform is unique in name and path, so that other servers cannot try and use this reserved name/path for other platforms.  More on the platform name space  Migrating a site to a remote server illustrates this name space issue further: as an example; given that an Aegir hostmaster has two directories representing two platforms (and remembering that aegir does not migrate platforms, only sites):   /var/aegir/platforms/plat-local    /var/aegir/platforms/plat-remote     and the remote server also has:   /var/aegir/platforms/plat-remote   then having aegir hostmaster migrate a site from platform plat-local to plat-remote will result in the site files being:   moved from .../plat-local to hostmaster's local .../plat-remote and  rsync'd to .../plat-remote on the remote server.   It is important to understand this if you are importing a working Drupal site into Aegir's control and Aegir hostmaster is on a different server from the working Drupal site.", 
            "title": "Platforms and remote web servers"
        }, 
        {
            "location": "/usage/platforms/#do-i-have-to-have-multiple-platforms", 
            "text": "No, you can simply have one platform or copy of Drupal core and provision all your sites to sit on the one platform. However, eventually you will want to upgrade your sites to a new copy of Drupal core, and rather than replace your core files in-place, it's recommended to build a new Platform with the newer copy of core, and use the Migrate task to move your sites (upgrade) onto the new code.", 
            "title": "Do I have to have multiple platforms?"
        }, 
        {
            "location": "/usage/platforms/#adding-the-platform-node", 
            "text": "Now that you've got your Platform on your server, or you know where and how you're going to do it (say, with Drush Make), it's time to tell Aegir about your new Platform.  To do so, add a new node of type 'Platform' in your Aegir frontend. Typically this is most easily done by visiting Create Content   Platform in the Admin Menu.  The Platform node form has several fields required for giving Aegir information about your platform. These are:   Name  -- a descriptive name for your platform. You very likely want this to be something like \"Drupal 7.41\".  Publish Path  -- the path on the filesystem where the platform is, or will be when Drush Make builds it. This must be the absolute path, for instance  /var/aegir/drupal-7.41  Makefile  -- the path on the filesystem to a makefile that will be used to create the platform.   Once you have completed entering this information, you can click the Save button. A 'Verify' task will be spawned and added to the Task queue (visible in the right sidebar). The backend will then parse this new platform and build up a registry of information about it, such as what version of Drupal it is, as well as what versions of install profiles, modules and themes are present on that platform.  Certain system configurations, such as Apache configurations similar to the .htaccess file that comes with Drupal, will be written to the filesystem, permissions checked and adjusted where necessary, and services restarted.  Now that you have a platform or codebase that Aegir is aware of, you can now proceed to install or import sites onto that platform!", 
            "title": "Adding the Platform node"
        }, 
        {
            "location": "/usage/platforms/tasks/", 
            "text": "Platform-specific Aegir tasks\n\n\n\n\n\n\nPlatform-specific Aegir tasks\n\n\nLock\n\n\nUnlock\n\n\nMigrate\n\n\nDelete\n\n\nManually deleting a platform\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlatforms, like sites, have tasks that can be performed against them, however these tasks are smaller in number and generally more simple.\n\n\nSome tasks that are available to platforms out of the box are Lock/Unlock and Delete.\n\n\nLock\n\n\nThe lock task is simply a conceptual protection placed over a platform so that new sites can't be installed on that platform.\n\n\nIt doesn't actually modify anything on the filesystem or on the platform itself, but merely changes the status of the platform in the Aegir database.  Once a platform is considered 'locked', it no longer appears in the New Site form when adding a new site.\n\n\nYou might choose to Lock a platform if there is something wrong with that platform and you want to prevent new sites from being added to it by one of your clients or users, or you want to 'hide' the platform for some other reason (perhaps awaiting a release date before allowing new sites).\n\n\nUnlock\n\n\nTo unlock a platform that has been locked, simply click the Unlock button and the status of the platform will be switched back to an Enabled state.\n\n\nMigrate\n\n\nPlatforms have 'migrate' tasks just as sites do. However, in the case of a platform, triggering a migration basically entails automatically adding 'migrate' tasks for all of the sites hosted on the platform. This is a convenient way to keep all of your sites up-to-date, as it's a single task, rather than having to trigger the migrations each site individually.\n\n\nDelete\n\n\nThe Delete task is similar to that of sites. The delete button allows you to completely remove a platform from your filesystem irreversibly.\n\n\nThis can be handy if you engage in a build management methodology that involves making regular new platforms to upgrade your site to. It is easy to amass large numbers of platforms on the filesystem, so the Delete task was born to deal with that problem.\n\n\nA platform can only be deleted if there are no sites currently provisioned on it. The task will fail before deleting anything if it detects that there are sites in the 'sites' directory of that platform.\n\n\nYou must migrate these sites off to a valid new platform before you can delete such a platform.\n\n\nUnlike site deletions, there is no backup made of a platform (because it's not bootstrappable by Drush), so be careful with this task: there is no going back!\n\n\nIt is recommended to make regular filesystem backups outside of Aegir altogether, and to use the Lock task to temporarily 'disable' a platform from use if you are unsure whether you want to delete it, but don't want it shown on the Aegir frontend.\n\n\nManually deleting a platform\n\n\nSimilarily to deleting sites, sometimes something goes wrong during a Delete task and the platform doesn't get completely removed. Often this is caused by permissions problems on the platform (i.e something owned by a different user that the aegir user can't remove).\n\n\nThe Delete task sometimes cannot be re-run in this situation. In which case:\n\n\n\n\nManually remove the platform files on the server if they exist (i.e \n/var/aegir/drupal-7.41\n)\n\n\nRemove the Drush alias for this platform if it is still present (in \n/var/aegir/.drush/\n)\n\n\nRemove the platform configuration file from \n/var/aegir/config/server_master/apache/platform.d\n (and the same for the other server_ directory if the platform was hosted on a remote webserver)\n\n\nGo to e.g. /node/123456/delete in your browser on the Aegir frontend and delete the node. This will remove the platform node and all associated task nodes from the system, as well as remove the entry from the hosting_platform and hosting_context table in the database.", 
            "title": "Platform tasks"
        }, 
        {
            "location": "/usage/platforms/tasks/#platform-specific-aegir-tasks", 
            "text": "Platform-specific Aegir tasks  Lock  Unlock  Migrate  Delete  Manually deleting a platform        Platforms, like sites, have tasks that can be performed against them, however these tasks are smaller in number and generally more simple.  Some tasks that are available to platforms out of the box are Lock/Unlock and Delete.", 
            "title": "Platform-specific Aegir tasks"
        }, 
        {
            "location": "/usage/platforms/tasks/#lock", 
            "text": "The lock task is simply a conceptual protection placed over a platform so that new sites can't be installed on that platform.  It doesn't actually modify anything on the filesystem or on the platform itself, but merely changes the status of the platform in the Aegir database.  Once a platform is considered 'locked', it no longer appears in the New Site form when adding a new site.  You might choose to Lock a platform if there is something wrong with that platform and you want to prevent new sites from being added to it by one of your clients or users, or you want to 'hide' the platform for some other reason (perhaps awaiting a release date before allowing new sites).", 
            "title": "Lock"
        }, 
        {
            "location": "/usage/platforms/tasks/#unlock", 
            "text": "To unlock a platform that has been locked, simply click the Unlock button and the status of the platform will be switched back to an Enabled state.", 
            "title": "Unlock"
        }, 
        {
            "location": "/usage/platforms/tasks/#migrate", 
            "text": "Platforms have 'migrate' tasks just as sites do. However, in the case of a platform, triggering a migration basically entails automatically adding 'migrate' tasks for all of the sites hosted on the platform. This is a convenient way to keep all of your sites up-to-date, as it's a single task, rather than having to trigger the migrations each site individually.", 
            "title": "Migrate"
        }, 
        {
            "location": "/usage/platforms/tasks/#delete", 
            "text": "The Delete task is similar to that of sites. The delete button allows you to completely remove a platform from your filesystem irreversibly.  This can be handy if you engage in a build management methodology that involves making regular new platforms to upgrade your site to. It is easy to amass large numbers of platforms on the filesystem, so the Delete task was born to deal with that problem.  A platform can only be deleted if there are no sites currently provisioned on it. The task will fail before deleting anything if it detects that there are sites in the 'sites' directory of that platform.  You must migrate these sites off to a valid new platform before you can delete such a platform.  Unlike site deletions, there is no backup made of a platform (because it's not bootstrappable by Drush), so be careful with this task: there is no going back!  It is recommended to make regular filesystem backups outside of Aegir altogether, and to use the Lock task to temporarily 'disable' a platform from use if you are unsure whether you want to delete it, but don't want it shown on the Aegir frontend.  Manually deleting a platform  Similarily to deleting sites, sometimes something goes wrong during a Delete task and the platform doesn't get completely removed. Often this is caused by permissions problems on the platform (i.e something owned by a different user that the aegir user can't remove).  The Delete task sometimes cannot be re-run in this situation. In which case:   Manually remove the platform files on the server if they exist (i.e  /var/aegir/drupal-7.41 )  Remove the Drush alias for this platform if it is still present (in  /var/aegir/.drush/ )  Remove the platform configuration file from  /var/aegir/config/server_master/apache/platform.d  (and the same for the other server_ directory if the platform was hosted on a remote webserver)  Go to e.g. /node/123456/delete in your browser on the Aegir frontend and delete the node. This will remove the platform node and all associated task nodes from the system, as well as remove the entry from the hosting_platform and hosting_context table in the database.", 
            "title": "Delete"
        }, 
        {
            "location": "/usage/advanced/", 
            "text": "", 
            "title": "Advanced features"
        }, 
        {
            "location": "/usage/advanced/ssl/", 
            "text": "Using SSL\n\n\n\n\n\n\nUsing SSL\n\n\nPrepare your server\n\n\nOpen SSL port\n\n\nInstall SSL\n\n\nEnable SSL\n\n\n\n\n\n\nEnable SSL support in Aegir\n\n\nConfigure a web server\n\n\nConfigure a site\n\n\nCommercial Certificates\n\n\nNginx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSSL support was significantly improved in Aegir 3.0 and subsequent releases have further refined the SSL functionality. Aegir now supports SNI by default, making assignment of IP addresses unnecessary.\n\n\nHere are the current steps to configure SSL support in Aegir and apply it to your web sites.\n\n\nPrepare your server\n\n\nOpen SSL port\n\n\nMake sure port 443 is open for SSL traffic. That is, ensure no firewall rules or other configuration is blocking traffic to port 443.\n\n\nInstall SSL\n\n\nFrom the command line, install SSL software for your web server. On Debian/Ubuntu you can use:\n\n\n# apt-get install openssl\n\n\n\nEnable SSL\n\n\nEnable SSL support and restart your webserver at this point.\n\n\n# a2enmod ssl\n# service apache2 restart\n\n\n\nEnable SSL support in Aegir\n\n\nYou have to enable SSL support in Aegir as it is off by default.\n\n\n\n\nVisit /admin/hosting/features to get to the Aegir features page.\n\n\n\nClick on Experimental to reveal experimental features experimental features of Aegir\n\n\n\nCheck SSL support\n\n\nClick Save configuration\n\n\n\n\nConfigure a web server\n\n\nYou next need to enable SSL on a web server.\n\n\n\n\nClick on the Servers tab\n\n\nClick on the server for which you wish to enable SSL support\n\n\nClick Edit to change the server configuration\n\n\n(Optional, but highly recommended) Remove any IP addresses assigned to the server. This will activate SNI, which is supported in all modern browsers.\n\n\nClick apache_ssl. This will reveal an additional field: SSL port, which should be already populated with 443.\n\n\n\nClick Save. This will trigger a verify task on the server followed by verify tasks on all platforms that are associated with that server.\n\n\n\n\nIf all goes well you will see the following changes in your Aegir file system structure: a new \n/var/aegir/config/ssl.d\n directory and a new \n/var/aegir/config/server_master/ssl.d\n directory. The \n/var/aegir/config/ssl.d\n directory is where you will be able to manipulate SSL keys and certificates, for example by importing commercial SSL certificates or generating a new key. Do not manually edit the \n/var/aegir/config/server_master/ssl.d\n directory as changes to that directory will be overwritten when the server or site are verified.\n\n\nConfigure a site\n\n\nYou can now finally enable SSL on any sites that are installed on any platforms associated with the server where we enabled SSL.\n\n\n\n\nBrowse to hosting/c/example.com\n\n\nClick Edit to change the site configuration\n\n\nChoose the type of Encryption required and the Encryption key (see the explanatory notes below each option). \nNOTE:\n Alternatively, you may specify a directory under \n/var/aegir/config/server_master/ssl.d\n where your own certificate and key is to be stored (see Commercial certificate notes below).\n\n\n\nClick Save.\n\n\n\n\nAegir will then generate a certificate and private key for your web site and insert these into a new VirtualHost directive in your vhost file. (This file is typically at \n/config/server_master/apache/vhost.d/example.com\n). If all goes well the VirtualHost directive will now have these important elements:\n\n\nVirtualHost *:443\n\n    ....\n\n    # Enable SSL handling.\n    SSLEngine on\n\n    SSLCertificateFile /var/aegir/config/server_master/ssl.d/example.com/openssl.crt\n    SSLCertificateKeyFile /var/aegir/config/server_master/ssl.d/example.com/openssl.key\n\n\n\nNow, when you navigate to https://example.com you should see that your site is SSL enabled. It will, however, generate warnings in your browsers because it is a self-signed certificates. See below for how to use commercial certificates to remove this warning.\n\n\nCommercial Certificates\n\n\nIf you wish to use your own commercial certificate and key you will need to do the following:\n\n\n\n\nFollow the directions above, using the \"Generate new encryption key\" option and using your site's domain name for the \"New encryption key\". This will create a site directory under \n/var/aegir/config/ssl.d/example.com\n. With this step, you have created a self-signed certificate, and your site is now configured to use it.\n\n\nThis generated a 2048 bit RSA key for you along with a CSR (Certificate Signing Request). If you prefer to generate your own RSA key, replace the files (\nopenssl.key\n and \nopenssl.csr\n) in the \n/var/aegir/config/ssl.d/example.com\n directory with your RSA key and associated CSR.\n\n\nCopy and paste the .csr file into the form for the issuing Certificate Authority (CA) to create your certificate. When your certificate has been generated, download the files from the issuing authority and place in your temporary folder on your PC. You may have more than one .crt files, in this case you have a \"bundle\" or what we call a \"certificate chain\" that you need to add in aegir (see below).\n\n\nTransfer all the files to \n/var/aegir/config/ssl.d/example.com\n. Rename the site .crt file to \nopenssl.crt\n. If you have a certificate chain, install it in \nopenssl_chain.crt\n. You should have at least three files in the directory (\nopenssl.crt\n, \nopenssl.key\n, \nopenssl.csr\n, and optionnally \nopenssl_chain.crt\n).\n\n\nVerify your site from Aegir's frontend.\n\n\n\n\nYou should now be able to access your site via https:// using your commercial certificate.\n\n\nNginx\n\n\nIt is recommended to allow Aegir to create a default self-signed certificate and key first, and then replace the contents of both files (not the files itself) with your real key and certificate. Any chained certificates (bundles) should be included in the same file, directly below your own certificate - there is no need for extra files/lines like it is for Apache configuration.", 
            "title": "SSL"
        }, 
        {
            "location": "/usage/advanced/ssl/#using-ssl", 
            "text": "Using SSL  Prepare your server  Open SSL port  Install SSL  Enable SSL    Enable SSL support in Aegir  Configure a web server  Configure a site  Commercial Certificates  Nginx        SSL support was significantly improved in Aegir 3.0 and subsequent releases have further refined the SSL functionality. Aegir now supports SNI by default, making assignment of IP addresses unnecessary.  Here are the current steps to configure SSL support in Aegir and apply it to your web sites.", 
            "title": "Using SSL"
        }, 
        {
            "location": "/usage/advanced/ssl/#prepare-your-server", 
            "text": "Open SSL port  Make sure port 443 is open for SSL traffic. That is, ensure no firewall rules or other configuration is blocking traffic to port 443.  Install SSL  From the command line, install SSL software for your web server. On Debian/Ubuntu you can use:  # apt-get install openssl  Enable SSL  Enable SSL support and restart your webserver at this point.  # a2enmod ssl\n# service apache2 restart", 
            "title": "Prepare your server"
        }, 
        {
            "location": "/usage/advanced/ssl/#enable-ssl-support-in-aegir", 
            "text": "You have to enable SSL support in Aegir as it is off by default.   Visit /admin/hosting/features to get to the Aegir features page.  Click on Experimental to reveal experimental features experimental features of Aegir  Check SSL support  Click Save configuration", 
            "title": "Enable SSL support in Aegir"
        }, 
        {
            "location": "/usage/advanced/ssl/#configure-a-web-server", 
            "text": "You next need to enable SSL on a web server.   Click on the Servers tab  Click on the server for which you wish to enable SSL support  Click Edit to change the server configuration  (Optional, but highly recommended) Remove any IP addresses assigned to the server. This will activate SNI, which is supported in all modern browsers.  Click apache_ssl. This will reveal an additional field: SSL port, which should be already populated with 443.  Click Save. This will trigger a verify task on the server followed by verify tasks on all platforms that are associated with that server.   If all goes well you will see the following changes in your Aegir file system structure: a new  /var/aegir/config/ssl.d  directory and a new  /var/aegir/config/server_master/ssl.d  directory. The  /var/aegir/config/ssl.d  directory is where you will be able to manipulate SSL keys and certificates, for example by importing commercial SSL certificates or generating a new key. Do not manually edit the  /var/aegir/config/server_master/ssl.d  directory as changes to that directory will be overwritten when the server or site are verified.", 
            "title": "Configure a web server"
        }, 
        {
            "location": "/usage/advanced/ssl/#configure-a-site", 
            "text": "You can now finally enable SSL on any sites that are installed on any platforms associated with the server where we enabled SSL.   Browse to hosting/c/example.com  Click Edit to change the site configuration  Choose the type of Encryption required and the Encryption key (see the explanatory notes below each option).  NOTE:  Alternatively, you may specify a directory under  /var/aegir/config/server_master/ssl.d  where your own certificate and key is to be stored (see Commercial certificate notes below).  Click Save.   Aegir will then generate a certificate and private key for your web site and insert these into a new VirtualHost directive in your vhost file. (This file is typically at  /config/server_master/apache/vhost.d/example.com ). If all goes well the VirtualHost directive will now have these important elements:  VirtualHost *:443 \n    ....\n\n    # Enable SSL handling.\n    SSLEngine on\n\n    SSLCertificateFile /var/aegir/config/server_master/ssl.d/example.com/openssl.crt\n    SSLCertificateKeyFile /var/aegir/config/server_master/ssl.d/example.com/openssl.key  Now, when you navigate to https://example.com you should see that your site is SSL enabled. It will, however, generate warnings in your browsers because it is a self-signed certificates. See below for how to use commercial certificates to remove this warning.", 
            "title": "Configure a site"
        }, 
        {
            "location": "/usage/advanced/ssl/#commercial-certificates", 
            "text": "If you wish to use your own commercial certificate and key you will need to do the following:   Follow the directions above, using the \"Generate new encryption key\" option and using your site's domain name for the \"New encryption key\". This will create a site directory under  /var/aegir/config/ssl.d/example.com . With this step, you have created a self-signed certificate, and your site is now configured to use it.  This generated a 2048 bit RSA key for you along with a CSR (Certificate Signing Request). If you prefer to generate your own RSA key, replace the files ( openssl.key  and  openssl.csr ) in the  /var/aegir/config/ssl.d/example.com  directory with your RSA key and associated CSR.  Copy and paste the .csr file into the form for the issuing Certificate Authority (CA) to create your certificate. When your certificate has been generated, download the files from the issuing authority and place in your temporary folder on your PC. You may have more than one .crt files, in this case you have a \"bundle\" or what we call a \"certificate chain\" that you need to add in aegir (see below).  Transfer all the files to  /var/aegir/config/ssl.d/example.com . Rename the site .crt file to  openssl.crt . If you have a certificate chain, install it in  openssl_chain.crt . You should have at least three files in the directory ( openssl.crt ,  openssl.key ,  openssl.csr , and optionnally  openssl_chain.crt ).  Verify your site from Aegir's frontend.   You should now be able to access your site via https:// using your commercial certificate.  Nginx  It is recommended to allow Aegir to create a default self-signed certificate and key first, and then replace the contents of both files (not the files itself) with your real key and certificate. Any chained certificates (bundles) should be included in the same file, directly below your own certificate - there is no need for extra files/lines like it is for Apache configuration.", 
            "title": "Commercial Certificates"
        }, 
        {
            "location": "/usage/advanced/remote-servers/", 
            "text": "Multiple Servers\n\n\n\n\n\n\nMultiple Servers\n\n\nRemote servers\n\n\nSystem dependencies\n\n\nAegir user\n\n\nWeb server configuration\n\n\nSudoers\n\n\n\n\n\n\nLogin shell\n\n\nMySQL access\n\n\nSSH keys\n\n\nVerify the server\n\n\nShell commands as root\n\n\n\n\n\n\n\n\n\n\nClustering\n\n\nUsing the Pack module\n\n\nConfiguring the Pack server node:\n\n\nConfiguring the Web server nodes:\n\n\nCreating a Platform on a Pack:\n\n\nCaveats\n\n\n\n\n\n\n\n\n\n\nUsing the Cluster module\n\n\nSetting up Web Clusters\n\n\nFinal Tasks\n\n\n\n\n\n\n\n\n\n\nPlatforms on remote web servers\n\n\nUnderstanding the process\n\n\nThe mechanics\n\n\nCreating sites on the remote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAegir supports multiple 'server' entities. These servers have 'services' such as 'Web' or 'Database', and 'service types' which are implementations of that service, such as 'Apache' or 'MySQL'.\n\n\nSome previous experience in the configuration of Apache and MySQL will help if you want to use remote servers with Aegir. If you haven't had any experience in setting up and maintaining Apache or MySQL before you might want get familiar with the basic concepts first.\n\n\nRemote servers\n\n\nSystem dependencies\n\n\nOn the remote server, install these packages\n\n\napt-get install rsync apache2 php5 php5-cli php5-mysql postfix mysql-client sudo\n\n\n\nAegir user\n\n\nAny number of remote web servers may be configured. The remote server needs an aegir user created on the system.\n\n\nadduser --system --group --home /var/aegir aegir\nadduser aegir www-data    #make aegir a user of group www-data\n\n\n\nWeb server configuration\n\n\nYou'll also need to prepare the web server in the same way you did for the master Aegir server during installation:\n\n\nFor Apache 2.4 and up:\n\n\na2enmod rewrite\nln -s /var/aegir/config/apache.conf /etc/apache2/conf-enabled/aegir.conf\n\n\n\nFor Apache 2.3 and lower:\n\n\na2enmod rewrite\nln -s /var/aegir/config/apache.conf /etc/apache2/conf.d/aegir.conf\n\n\n\nIn case of doubt, just check in /etc/apache2/ whether you have conf.d or conf-enabled, you should only have one of them.\n\n\nDon't restart Apache even when it prompts you.\n This will be done by the Verify task you'll spawn for the server from the Aegir frontend later.\n\n\nSudoers\n\n\nAdd the aegir user to sudoers so it can restart Apache\n\n\nsudo visudo -f /etc/sudoers.d/aegir\n\naegir ALL=NOPASSWD: /usr/sbin/apache2ctl\n\n\n\nLogin shell\n\n\nThe remote aegir user will also need a login shell, which can be modified using the chsh command.\n\n\nchsh -s /bin/sh aegir\n\n\n\nMySQL access\n\n\nAegir connects directly to the remote server's MySQL to create databases and users. Therefore, you need to log into MySQL in the remote server as root and create a user with the following command:\n\n\nmysql\n GRANT ALL PRIVILEGES ON *.* TO root@aegir_server_ip IDENTIFIED BY 'password' WITH GRANT OPTION;\nmysql\n FLUSH PRIVILEGES;\n\n\n\nWhere\n\n\n\n\n'root' is the username on the Aegir server that will be connecting. Leave 'root';\n\n\n'aegir_server_ip' is the IP address of your Aegir server. For example '123.123.123.123';\n\n\n'password' is the password that will be used by your Aegir 'root' user to connect to the remote server's MySQL to create databases and users. It is suggested to store that password in a secure location. To increase security, it is recommended to choose a password with 6 to 16 alphanumeric and or punctuation characters.\n\n\n\n\nIf MySQL returns something like \"Query OK\", that means the command was successful. For example:\n\n\nQuery OK, 0 rows affected (0.00 sec)\n\n\n\nNote the comment about \"bind-address = 127.0.0.1\" within section 3.6 of the \nmanual configuration page\n.\n\n\nWhen the server is being verified, Aegir will attempt to create a database and grant privileges to a user for that database. If any of these two fails, \nverify that your MySQL configuration is correct\n and that there is no firewall blocking your MySQL port.\n\n\nYou can confirm that MySQL is configured correctly on the remote server by manually connecting from the command line on your Aegir machine:\n\n\n$ mysql -h \nmysql_server_IP\n -u root -p\n\n\n\nIf your MySql database is running on the same server as the Aegir master and is configured with the name \"localhost\", you may run an issue where the remote web server tries to access MySql via a local socket rather than the hostname. To resolve this, just change the server hostname for the MySql server in Aegir from \"localhost\" to the hostname of the server.\n\n\nSSH keys\n\n\nSSH public/private keys should be set up so the main Aegir server's aegir user can access remote web aegir users with no passwords required.\n\n\nExample:\n\n\n$ ssh-keygen -t rsa\n\n\n\nFollow the promts. Do not use a passphrase when you create your key. Simply press Enter to leave the passphrase blank. Otherwise, SSH will insist that you enter the passphrase everytime you try to SSH using the key. We don't want SSH to present any prompts.\n\n\nPut the public key's contents into /var/aegir/.ssh/authorized_keys on the remote web server. The easiest way to do this is to use the ssh-copy-id command.\n\n\nYou should manually login for the first time from your Aegir master server to your remote server as the aegir user, so that the remote web server is added to the known_hosts file in /var/aegir/.ssh on your Aegir master server. Verifying the remote webserver will fail until this has been done.\n\n\nYou can confirm that SSH is set up correctly by manually connecting from your aegirmaster server to your remote server as aegir@ user to aegir@ user:\n\n\n[aegir@aegirmaster:~]$ ssh aegir@\nremoteserver\n\n\n\n\nThis should directly log you into the remote shell command line without any additional keys pressed.\n\n\n[...]\n[aegir@\nremoteserver\n:~]$\n\n\n\nThere are many, many tutorials online for setting up ssh keys, and various mistakes can be made by inexperienced users such as permissions etc. Aegir isn't a 'Linux beginner's practice tool', so setting these up is really out of the scope of this document and users are encouraged to research this on their own. (For Ubuntu, \nsee this article\n).\n\n\nIf you have followed the instructions above, and your SSH connection gets closed immediately after you try to connect to the remote server as the aegir user, you may not have given the aegir user a shell correctly. Check the /etc/passwd file on the remote server to make sure that the aegir user has a shell.\n\n\nVerify the server\n\n\nNow you can add a new server node in Aegir, set the hostname and/or IP and set the service type to be 'Apache' (or Apache_SSL if this site is to handle SSL sites).\n\n\n\n\nA verify task will be spawned and added to the Task queue ready for dispatching. During a server verification task, various configurations will be set on the Aegir master server and also synced to the remote web server, restarting Apache.\n\n\nNow when you add a new Platform node in Aegir, you have the option of setting which web server to host it on. If you are not using a makefile but are downloading a platform manually, you must still do this on the main Aegir server. The contents will then be synced across to the web server.\n\n\nYou don't choose a web server when installing a new site. Because a site depends on a platform, its web server is implied by which platform has been chosen. In other words, all sites on a platform are hosted on the same server. You cannot host two sites on the same platform on different servers.\n\n\nShell commands as root\n\n\nThese are the commands outlined above consolidated.\n\n\napt-get install mysql-client\nadduser --system --group --home /var/aegir aegir\nadduser aegir www-data    #make aegir a user of group www-data\nchsh -s /bin/sh aegir\napt-get install rsync apache2 php5 php5-cli php5-mysql\nmkdir /var/aegir/.ssh\ncat \n /var/aegir/.ssh/authorized_keys \nEOF\nssh-rsa AAAAB3NzaC1yc2EAAAADAQAB...UF aegir@filer01\nEOF\nchown aegir:aegir /var/aegir/.ssh -R\nchmod 750 /var/aegir/.ssh\nchmod 640 /var/aegir/.ssh/authorized_keys\na2enmod rewrite\nln -s /var/aegir/config/apache.conf /etc/apache2/conf.d/aegir.conf\ncat \n /etc/sudoers.d/aegir \nEOF\nDefaults:aegir  !requiretty\naegir ALL=NOPASSWD: /usr/sbin/apache2ctl\nEOF\nchmod 440 /etc/sudoers.d/aegir\n\n\n\nClustering\n\n\nIf you wish to run the same website concurrently on multiple hosts you can use the Pack or Cluster module.\n\n\nThe \nWeb Cluster\n module uses Rsync to get all files to all servers.\n\n\nThe \nWeb Pack\n module shares files to all servers via an NFS mount.  The NFS setup must be done manually.\n\n\nUsing the Pack module\n\n\nIf you wish to run the same website concurrently on multiple hosts you use the Pack module. Enable the pack module as you would any other drupal module.\n\n\nA Pack consists of a single server node that is specified as \"pack\" and any number of server nodes specified as \"apache\" or \"nginx\". Aegir rsync's configuration (Apache \n Nginx) to \"all\" nodes in the Pack and rysnc's the platform and site code to only the \"master\" node in the Pack. All other \"slave\" nodes will see the platform and site code via NFS.\n\n\nConfiguring the Pack server node:\n\n\nThe \"pack\" server node will not be used by Aegir to physically deploy sites or platforms on, so consider it more of a 'virtual server group' for logistical purposes only. When creating the pack node, you do not need to supply a valid Server hostname or IP address, so choose a naming convention that makes sense in your environment.\n\n\nNext, select the \"pack\" radio button option under the web configuration when creating or editing the server node, in order to designate this server node as the \"pack\" server.\n\n\nNow select the \"Master\" server from the list of Master servers. The Master server will be the server node that Aegir rsync's the platform and site to. Typically, you would choose the Aegir server itself as the 'master'.\n\n\nFinally, select the \"Slave\" servers from the list of Slave servers. The Slave servers will have the Apache or Nginx config rsync'd to them but not the platform or site code, since those will be available to all Slave servers via the NFS share.\n\n\nConfiguring the Web server nodes:\n\n\nConfigure all web server nodes using \nthese instructions\n. Take care to ensure the 'aegir' user and group on your NFS client machines, have the same UID/GID as that of the NFS server, or else you may run into permissions issues with NFS.\n\n\nThen mount the files on the remote server.\n\n\nOn the NFS server:\n\n\nsudo apt-get install nfs-kernel-server\necho \"/var/aegir/platforms    10.0.0.0/24(rw,no_subtree_check)\" \n /etc/exports\nsudo service nfs-kernel-server reload\n\n\n\n(Replace the subnet here or add specific /32 hosts as necessary for your environment)\n\n\nThen on the web servers (Master, if it wasn't also the NFS server, and the Slaves):\n\n\nsudo apt-get install nfs-client\nsudo mount 10.0.0.1:/var/aegir/platforms /var/aegir/platforms\n\n\n\n(Replace the NFS server's IP here with that of your master server/Aegir server)\n\n\nAdd this to your fstab on the servers that mount the NFS share, so that the share is mounted on boot:\n\n\n10.0.0.1:/var/aegir/platforms /var/aegir/platforms nfs rw 0 0\n\n\n\nCreating a Platform on a Pack:\n\n\nWhen configuring a Platform to be deployed on a Pack, choose the \"Pack\" server node from the Web server radio group during the Platform node creation. Then you choose this Platform as usual when adding a site, and that site will be served from any servers within the Pack.\n\n\nCaveats\n\n\nRelying on an NFS share to serve your entire /var/aegir/platforms can be a single point of failure if the NFS share becomes unavailable. You may want to look into providing some sort of failover for NFS (google for things like DRBD and Heartbeat), or using some other form of redundancy for your NFS (Netapp filer clusters etc)\n\n\nBelow is an example diagram of a Pack cluster known to be functioning in production (with an optional MySQL-MMM cluster out of scope for this documentation), which may help you visualise the Pack and how it can be put together.\n\n\n\n\nUsing the Cluster module\n\n\nThis documentation page is about the \nWeb Cluster\n module.\n\n\nSetting up Web Clusters\n\n\nIn this setup, we will add two web servers and a single database server.\n\n\n\n\nUnder \nAdmin \n Hosting \n Features\n, enable the \"Web Clusters\" module.\n\n\nSetup two or more additional \nRemote Servers\n using the \nRemote Server Instructions\n.\n\n\nCreate Remote Server Nodes: Visit \nServers \n Add Server\n and enter the hostname of your remote server.  For \nWeb Server\n, select \nApache\n, \nApache SSL\n, \nNGINX\n, or \nNGINX SSL\n.\n\n\nRepeat Step 3 for all of your web servers.\n\n\nCreate Cluster Server Node: Visit \nServers \n Add Server\n and enter any hostname (something like \"cluster\" so you can identify it.).  For \nWeb Server\n, select \nCluster\n and select all of the web servers you wish to add to the cluster.\n\n\nSetup Database Server: You have two options here.\n\n\nProvision a new, separate database server using only the \nMySQL section\n above.  Then visit \nServers \n Add Server\n, enter the new server's hostname, and select \"MySQL\" for \"Database\" and enter the root username and password you set during the Remote Server Instructions.\n\n\nUse an existing server other than \"localhost\". Aegir installs a database server called \"localhost\" by default. You cannot use this server for sites installed on remote servesr.  Find the default web server aegir installed (named after the hostmaster hostname).  Click \nEdit\n, then select \"MySQL\" for \"Database\" and enter the root username and password.  If you use the server with the same hostname as the \"localhost\" database server, you can use the same root username and password.\n\n\nMake sure the Database Server Hostname resolves to the database server IP.  This can be done with DNS or by manually editing the /etc/hosts file on the remote servers.\n\n\nCreate or Edit a platform node, and select the cluster server you created in step 5.\n\n\nCreate a site node, and select the database server you created in step 6.\n\n\n\n\nIf all goes well, the site should install.\n\n\nTo test that the site is available from both servers, you must edit your DNS or hosts file:\n\n\n\n\nGiven your site node URL is myclustersite.com, edit /etc/hosts or your DNS so myclustersite.com resolves to the IP of remote server #1.\n\n\nVisit the URL http://myclustersite.com in the browser. If the site works, we know we can load the site from remote server #1.\n\n\nEdit /etc/hosts or your DNS so myclustersite.com resolves to the IP of server #2.\n\n\nVisit the URL http://myclustersite.com again. If the site works, we know we can load the site from remote server #2.\n\n\n\n\nFinal Tasks\n\n\nThere are two important final tasks to get a working drupal site running on a server cluster:\n\n\n\n\n\n\nLoad Balancer.\n  Now you must setup a load balancer that will route requests to both remote server #1 and #2.\n\n\n\n\n\n\nShared Files folder.\n  Uploaded files will only go to one server when you upload them.  They will appear as missing when requests come in to the other servers.\n\n\n\n\n\n\nThere are a number of ways to deal with this: You can use NFS to create a shared files folder, or you can configure your load balancer to always send requests for the files folder to a single server.\n\n\nSetting up a load balancer and dealing with the files folder is out of scope of this article, for now.\n\n\nPlatforms on remote web servers\n\n\nIf you have been using Aegir for a while simply because it handles updates, moving to new releases, cloning, aliases and everything Drupal with such elegance on a single server - you might not be entirely clear on what changes when you make the move to multiple servers. Hopefully this will help.\n\n\nUnderstanding the process\n\n\nMultiple servers are great even if you do not have to manage a server farm. Having a server for development that you are free to break, one for testing that you hope will not break, one for approvals so your clients can go to see how their \"real\" website will look, and one for production that serves the daily grind of live sites is a wonderful thing. This DTAP (Development, Testing, Acceptance, and Production) structure works and it is surprisingly easy to accomplish under Aegir.\n\n\nIf you are managing a farm, creating massive numbers of servers is quick and easy with Aegir - especially if you use virtual machines like Xen where a server image can be cloned or generated using LVM disks that can be migrated (even while running) to other physical machines.\n\n\nWhen it is time break out an Aegir master controller and remote slaves you have to remember that Aegir is the place that it (almost) all happens. Everything is stored in Aegir - including your remote platforms and your sites - and then distributed to the slave servers by Aegir in the Verify process.\n\n\nRemember too that sites reside on platforms, and platforms reside on servers. You are turning your Aegir install into an Aegir Master as the hub, and the Aeger Remote Slaves as the spokes. To move into this \"hub and spoke\" architecture, you must build the remote server, tell the Aegir Master about that server and verify it, install a Drupal platform for that server on the Aegir Master and finally tell the Aegir Master about that Drupal install and verify that. You then create the sites on the platform you want based upon the install profile you select for that site.\n\n\nThe mechanics\n\n\n\n\n\n\nBuild a server image on your network to become your Aegir Slave. This can be anything from a separate headless server to a Virtual Machine image on a physical machine with a dozen other Virtual Machines on it. As long as it has its own IP and is capable of running a Drupal image, it will work.\n\n\n\n\n\n\nEnsure that your new server image is resolved in your DNS by adding it to your zone files and incrementing the serial number in the zone file. Aegir can manage that for you now to some extent, but you might want to wait until that feature leaves the experimental status. Make sure the entries in /etc/hostname and /etc/hosts all match your zone files (including reverse DNS). Reload/restart the DNS server. Any DNS slaves should automatically get notified and the incremented serial number should make sure they reload automatically. Test the resolution and ping the new Aegir Slave server image from the Aegir Master to Ensure that the IPs all resolved properly.\n\n\n\n\n\n\nFollow the steps for \nSetting up a remote web server\n carefully. You should be able to use cut and paste if you are using Debian Stable or the like. In any case, you will need those packages. You do not need Aegir on the slave, but you do need the aegir user and that user must have a shell. I prefer the bash shell, but the sh shell in the instructions will do.\n\n\n\n\n\n\nYou need to have the \"passphraseless\" ssh working and proven before you continue. A web search on the terms \"passphraseless ssh\" plus your operating system will generally get you great instructions, but putting those instructions here for every possible combination is beyond the scope of this example. In terms of helpful hints, however, you do not need to have a password for the aegir user on the Aegir Slave. Your access will be this certificate. By simply hitting enter when it asks for the passphrase, you make the certificate passphraseless. You should carefully set the permissions and back these certificates up to a secure location. You MUST log in manually from the Aegir Master to the Aegir Slave the first time or your verify will fail. This is because the system has to add the ssh keys to the known hosts and it will ask about about it before it will allow the connection. Aegir nows nothing about this and will not answer, so the verify will fail. To be absolutely sure it works, after exiting the initial login, you should retry the login to verify it does not ask for a password and then exit the login and try an rsync (which is the process by which the Aegir Master controls the Aegir Slaves). All of these commands should work from the Aegir Master to the new Aegir Slave while logged into the Aegir Master as the aegir user with no request for a password, proving that the systems are exchanging keys (do not proceed until you can do this flawlessly without having to enter a response):\n\n\n## Start from the Aegir Master as the aegir user\n# Log in to the slave from the Aegir Master and exit without any password or reply required\nssh slavename.example.com\nexit\n# Create a test file for rsync\necho 'rsync test file' \n MyRsyncTest\n# Send the test file to the remote slave by name using rsync\nrsync -azvv /var/aegir/MyRsyncTest aegir@slavename.example.com:/var/aegir\n# Log back into the remote slave\nssh slavename.example.com\n# Make sure the file is there and readable\ncat /var/aegir/MyRsyncTest\n# Delete the test file from the remote slave\nrm /var/aegir/MyRsyncTest\n# Exit the ssh login session on the remote\nexit\n# Delete the test file on the Aegir Master\nrm /var/aegir/MyRsyncTest\n\n\n\n\n\n\n\nGo to Add Content/Server and put in the server name, leave the Database set as None (Your sites will use the Aegir Master database and none is required on the Remote Slave) and under Web select apache or apache ssl (to match the example) then click Save. After the process completes you should see that it found the IP address properly on its own, plugged it in all by itself and then Verify quite nicely. If you look on the Aegir Slave remote server you will see that you now have directories named config and platform.\n\n\n\n\n\n\nNow that hard decision for platform choice comes in play. My preference is a Drupal install that is the same release as the Aegir Master server or higher. Since sites are eventually destined to be Drupal 8 one day, and the Aegir system is not Drupal 8 ready as of this writing but heading that direction, making at least one Drupal 8 slave is a good idea so that you can migrate sites to that platform as they are ready. If you are migrating sites off of your existing Aegir and onto slaves, migrating to platforms of the same Drupal version makes that process much easier. In any case, firm up your decision about which Drupal version you want to install on your new Aegir Slave Platform.\n\n\n\n\n\n\nTime to create that platform. The big thing here is to do it right the first time and make certain that the name of the platform is unique to any platform on your Aegir Master server. If you look in your /var/aegir directory you will notice that Aegir has its own naming convention. For instance, you should see /var/aegir/hostmaster-6.x-2.4 as the platform for the Aegir 6.x-2.4 release. You need to consider doing the same. For instance, name your platform something like: /var/aegir/slavename-drupal-version and you will make it easier to distinguish which server the platform resides upon and the drupal version so that you can manage updates and migrations more easily. Make certain that you are not destroying one platform when creating another. Be aware that at some point Aegir started organizing platforms into a separate directory: /var/aegir/platforms and you should change to that structure if you have an older original install. Again, be careful you are not overwriting an existing install when you create the new one. For instance, if you already have a Drupal install in /var/aegir/platforms/drupal-7.38 the code below will attempt to recreate it on top of the existing install. If you are using a Makefile, be sure that the same problem does not occur in that makefile. To create a Drupal 7 Aegir Remote Slave Platform, log into the Aegir Master as the aegir user and run this simple code (of course edit it to match the platform and name you want to create:\n\n\n# Make sure you are in the proper directory\ncd /var/aegir/platforms\n# Install Drupal 7.38\ndrush/drush.php dl drupal-7.38\n# Rename the platform to your own naming convention\nmv /var/aegir/platforms/drupal-7.38 /var/aegir/platforms/slavename-drupal-7.38\n\n\n\n\n\n\n\nThe final step in creating this platform is to actually tell the Aegir Master about it so that it can distribute it (via rsync) to the new Aegir Remote Slave. Simple enough. Just go to Create Content/Platform and the Create Platform screen comes up. Under Name write something descriptive and unique. In the example so far, this will be something like 'slavename Drupal 7.14' or in some way adhere to your chosen naming convention. I use the directory name I created above since that serves two purposes. Under Publish Path you will put the path that holds this Drupal distribution. In the example above that will be /var/aegir/platforms/slavename-drupal-7.14 but the path will be reflected from the Aegir Master to the Aegir Slave and will be the same on both. If you are using a Makefile you need to enter the full path and name of that Makefile here as well, but the creation and use of the Makefile is beyond the scope of this example. Lastly choose the server that this platform will reside upon. When you are finished, double check the screen and then click on Save. The Verify step should execute flawlessly and when it does, your Aegir Remote Slave will be complete and ready to accept sites.\n\n\n\n\n\n\nLather, rinse and repeat for each Aegir Remote Slave.\n\n\n\n\n\n\nCreating sites on the remote\n\n\nThe only difference you will notice when creating a new site under Aegir will be the choice of platform. The Create Site screen is quite self explanatory, but the main thing is to select the Install Profile that you require and then the list of Platforms that support that install profile will be populated.\n\n\nAs usual, Aegir makes it all faster and easier than you expect.", 
            "title": "Multiple servers"
        }, 
        {
            "location": "/usage/advanced/remote-servers/#multiple-servers", 
            "text": "Multiple Servers  Remote servers  System dependencies  Aegir user  Web server configuration  Sudoers    Login shell  MySQL access  SSH keys  Verify the server  Shell commands as root      Clustering  Using the Pack module  Configuring the Pack server node:  Configuring the Web server nodes:  Creating a Platform on a Pack:  Caveats      Using the Cluster module  Setting up Web Clusters  Final Tasks      Platforms on remote web servers  Understanding the process  The mechanics  Creating sites on the remote        Aegir supports multiple 'server' entities. These servers have 'services' such as 'Web' or 'Database', and 'service types' which are implementations of that service, such as 'Apache' or 'MySQL'.  Some previous experience in the configuration of Apache and MySQL will help if you want to use remote servers with Aegir. If you haven't had any experience in setting up and maintaining Apache or MySQL before you might want get familiar with the basic concepts first.", 
            "title": "Multiple Servers"
        }, 
        {
            "location": "/usage/advanced/remote-servers/#remote-servers", 
            "text": "System dependencies  On the remote server, install these packages  apt-get install rsync apache2 php5 php5-cli php5-mysql postfix mysql-client sudo  Aegir user  Any number of remote web servers may be configured. The remote server needs an aegir user created on the system.  adduser --system --group --home /var/aegir aegir\nadduser aegir www-data    #make aegir a user of group www-data  Web server configuration  You'll also need to prepare the web server in the same way you did for the master Aegir server during installation:  For Apache 2.4 and up:  a2enmod rewrite\nln -s /var/aegir/config/apache.conf /etc/apache2/conf-enabled/aegir.conf  For Apache 2.3 and lower:  a2enmod rewrite\nln -s /var/aegir/config/apache.conf /etc/apache2/conf.d/aegir.conf  In case of doubt, just check in /etc/apache2/ whether you have conf.d or conf-enabled, you should only have one of them.  Don't restart Apache even when it prompts you.  This will be done by the Verify task you'll spawn for the server from the Aegir frontend later.  Sudoers  Add the aegir user to sudoers so it can restart Apache  sudo visudo -f /etc/sudoers.d/aegir\n\naegir ALL=NOPASSWD: /usr/sbin/apache2ctl  Login shell  The remote aegir user will also need a login shell, which can be modified using the chsh command.  chsh -s /bin/sh aegir  MySQL access  Aegir connects directly to the remote server's MySQL to create databases and users. Therefore, you need to log into MySQL in the remote server as root and create a user with the following command:  mysql  GRANT ALL PRIVILEGES ON *.* TO root@aegir_server_ip IDENTIFIED BY 'password' WITH GRANT OPTION;\nmysql  FLUSH PRIVILEGES;  Where   'root' is the username on the Aegir server that will be connecting. Leave 'root';  'aegir_server_ip' is the IP address of your Aegir server. For example '123.123.123.123';  'password' is the password that will be used by your Aegir 'root' user to connect to the remote server's MySQL to create databases and users. It is suggested to store that password in a secure location. To increase security, it is recommended to choose a password with 6 to 16 alphanumeric and or punctuation characters.   If MySQL returns something like \"Query OK\", that means the command was successful. For example:  Query OK, 0 rows affected (0.00 sec)  Note the comment about \"bind-address = 127.0.0.1\" within section 3.6 of the  manual configuration page .  When the server is being verified, Aegir will attempt to create a database and grant privileges to a user for that database. If any of these two fails,  verify that your MySQL configuration is correct  and that there is no firewall blocking your MySQL port.  You can confirm that MySQL is configured correctly on the remote server by manually connecting from the command line on your Aegir machine:  $ mysql -h  mysql_server_IP  -u root -p  If your MySql database is running on the same server as the Aegir master and is configured with the name \"localhost\", you may run an issue where the remote web server tries to access MySql via a local socket rather than the hostname. To resolve this, just change the server hostname for the MySql server in Aegir from \"localhost\" to the hostname of the server.  SSH keys  SSH public/private keys should be set up so the main Aegir server's aegir user can access remote web aegir users with no passwords required.  Example:  $ ssh-keygen -t rsa  Follow the promts. Do not use a passphrase when you create your key. Simply press Enter to leave the passphrase blank. Otherwise, SSH will insist that you enter the passphrase everytime you try to SSH using the key. We don't want SSH to present any prompts.  Put the public key's contents into /var/aegir/.ssh/authorized_keys on the remote web server. The easiest way to do this is to use the ssh-copy-id command.  You should manually login for the first time from your Aegir master server to your remote server as the aegir user, so that the remote web server is added to the known_hosts file in /var/aegir/.ssh on your Aegir master server. Verifying the remote webserver will fail until this has been done.  You can confirm that SSH is set up correctly by manually connecting from your aegirmaster server to your remote server as aegir@ user to aegir@ user:  [aegir@aegirmaster:~]$ ssh aegir@ remoteserver   This should directly log you into the remote shell command line without any additional keys pressed.  [...]\n[aegir@ remoteserver :~]$  There are many, many tutorials online for setting up ssh keys, and various mistakes can be made by inexperienced users such as permissions etc. Aegir isn't a 'Linux beginner's practice tool', so setting these up is really out of the scope of this document and users are encouraged to research this on their own. (For Ubuntu,  see this article ).  If you have followed the instructions above, and your SSH connection gets closed immediately after you try to connect to the remote server as the aegir user, you may not have given the aegir user a shell correctly. Check the /etc/passwd file on the remote server to make sure that the aegir user has a shell.  Verify the server  Now you can add a new server node in Aegir, set the hostname and/or IP and set the service type to be 'Apache' (or Apache_SSL if this site is to handle SSL sites).   A verify task will be spawned and added to the Task queue ready for dispatching. During a server verification task, various configurations will be set on the Aegir master server and also synced to the remote web server, restarting Apache.  Now when you add a new Platform node in Aegir, you have the option of setting which web server to host it on. If you are not using a makefile but are downloading a platform manually, you must still do this on the main Aegir server. The contents will then be synced across to the web server.  You don't choose a web server when installing a new site. Because a site depends on a platform, its web server is implied by which platform has been chosen. In other words, all sites on a platform are hosted on the same server. You cannot host two sites on the same platform on different servers.  Shell commands as root  These are the commands outlined above consolidated.  apt-get install mysql-client\nadduser --system --group --home /var/aegir aegir\nadduser aegir www-data    #make aegir a user of group www-data\nchsh -s /bin/sh aegir\napt-get install rsync apache2 php5 php5-cli php5-mysql\nmkdir /var/aegir/.ssh\ncat   /var/aegir/.ssh/authorized_keys  EOF\nssh-rsa AAAAB3NzaC1yc2EAAAADAQAB...UF aegir@filer01\nEOF\nchown aegir:aegir /var/aegir/.ssh -R\nchmod 750 /var/aegir/.ssh\nchmod 640 /var/aegir/.ssh/authorized_keys\na2enmod rewrite\nln -s /var/aegir/config/apache.conf /etc/apache2/conf.d/aegir.conf\ncat   /etc/sudoers.d/aegir  EOF\nDefaults:aegir  !requiretty\naegir ALL=NOPASSWD: /usr/sbin/apache2ctl\nEOF\nchmod 440 /etc/sudoers.d/aegir", 
            "title": "Remote servers"
        }, 
        {
            "location": "/usage/advanced/remote-servers/#clustering", 
            "text": "If you wish to run the same website concurrently on multiple hosts you can use the Pack or Cluster module.  The  Web Cluster  module uses Rsync to get all files to all servers.  The  Web Pack  module shares files to all servers via an NFS mount.  The NFS setup must be done manually.  Using the Pack module  If you wish to run the same website concurrently on multiple hosts you use the Pack module. Enable the pack module as you would any other drupal module.  A Pack consists of a single server node that is specified as \"pack\" and any number of server nodes specified as \"apache\" or \"nginx\". Aegir rsync's configuration (Apache   Nginx) to \"all\" nodes in the Pack and rysnc's the platform and site code to only the \"master\" node in the Pack. All other \"slave\" nodes will see the platform and site code via NFS.  Configuring the Pack server node:  The \"pack\" server node will not be used by Aegir to physically deploy sites or platforms on, so consider it more of a 'virtual server group' for logistical purposes only. When creating the pack node, you do not need to supply a valid Server hostname or IP address, so choose a naming convention that makes sense in your environment.  Next, select the \"pack\" radio button option under the web configuration when creating or editing the server node, in order to designate this server node as the \"pack\" server.  Now select the \"Master\" server from the list of Master servers. The Master server will be the server node that Aegir rsync's the platform and site to. Typically, you would choose the Aegir server itself as the 'master'.  Finally, select the \"Slave\" servers from the list of Slave servers. The Slave servers will have the Apache or Nginx config rsync'd to them but not the platform or site code, since those will be available to all Slave servers via the NFS share.  Configuring the Web server nodes:  Configure all web server nodes using  these instructions . Take care to ensure the 'aegir' user and group on your NFS client machines, have the same UID/GID as that of the NFS server, or else you may run into permissions issues with NFS.  Then mount the files on the remote server.  On the NFS server:  sudo apt-get install nfs-kernel-server\necho \"/var/aegir/platforms    10.0.0.0/24(rw,no_subtree_check)\"   /etc/exports\nsudo service nfs-kernel-server reload  (Replace the subnet here or add specific /32 hosts as necessary for your environment)  Then on the web servers (Master, if it wasn't also the NFS server, and the Slaves):  sudo apt-get install nfs-client\nsudo mount 10.0.0.1:/var/aegir/platforms /var/aegir/platforms  (Replace the NFS server's IP here with that of your master server/Aegir server)  Add this to your fstab on the servers that mount the NFS share, so that the share is mounted on boot:  10.0.0.1:/var/aegir/platforms /var/aegir/platforms nfs rw 0 0  Creating a Platform on a Pack:  When configuring a Platform to be deployed on a Pack, choose the \"Pack\" server node from the Web server radio group during the Platform node creation. Then you choose this Platform as usual when adding a site, and that site will be served from any servers within the Pack.  Caveats  Relying on an NFS share to serve your entire /var/aegir/platforms can be a single point of failure if the NFS share becomes unavailable. You may want to look into providing some sort of failover for NFS (google for things like DRBD and Heartbeat), or using some other form of redundancy for your NFS (Netapp filer clusters etc)  Below is an example diagram of a Pack cluster known to be functioning in production (with an optional MySQL-MMM cluster out of scope for this documentation), which may help you visualise the Pack and how it can be put together.   Using the Cluster module  This documentation page is about the  Web Cluster  module.  Setting up Web Clusters  In this setup, we will add two web servers and a single database server.   Under  Admin   Hosting   Features , enable the \"Web Clusters\" module.  Setup two or more additional  Remote Servers  using the  Remote Server Instructions .  Create Remote Server Nodes: Visit  Servers   Add Server  and enter the hostname of your remote server.  For  Web Server , select  Apache ,  Apache SSL ,  NGINX , or  NGINX SSL .  Repeat Step 3 for all of your web servers.  Create Cluster Server Node: Visit  Servers   Add Server  and enter any hostname (something like \"cluster\" so you can identify it.).  For  Web Server , select  Cluster  and select all of the web servers you wish to add to the cluster.  Setup Database Server: You have two options here.  Provision a new, separate database server using only the  MySQL section  above.  Then visit  Servers   Add Server , enter the new server's hostname, and select \"MySQL\" for \"Database\" and enter the root username and password you set during the Remote Server Instructions.  Use an existing server other than \"localhost\". Aegir installs a database server called \"localhost\" by default. You cannot use this server for sites installed on remote servesr.  Find the default web server aegir installed (named after the hostmaster hostname).  Click  Edit , then select \"MySQL\" for \"Database\" and enter the root username and password.  If you use the server with the same hostname as the \"localhost\" database server, you can use the same root username and password.  Make sure the Database Server Hostname resolves to the database server IP.  This can be done with DNS or by manually editing the /etc/hosts file on the remote servers.  Create or Edit a platform node, and select the cluster server you created in step 5.  Create a site node, and select the database server you created in step 6.   If all goes well, the site should install.  To test that the site is available from both servers, you must edit your DNS or hosts file:   Given your site node URL is myclustersite.com, edit /etc/hosts or your DNS so myclustersite.com resolves to the IP of remote server #1.  Visit the URL http://myclustersite.com in the browser. If the site works, we know we can load the site from remote server #1.  Edit /etc/hosts or your DNS so myclustersite.com resolves to the IP of server #2.  Visit the URL http://myclustersite.com again. If the site works, we know we can load the site from remote server #2.   Final Tasks  There are two important final tasks to get a working drupal site running on a server cluster:    Load Balancer.\n  Now you must setup a load balancer that will route requests to both remote server #1 and #2.    Shared Files folder.\n  Uploaded files will only go to one server when you upload them.  They will appear as missing when requests come in to the other servers.    There are a number of ways to deal with this: You can use NFS to create a shared files folder, or you can configure your load balancer to always send requests for the files folder to a single server.  Setting up a load balancer and dealing with the files folder is out of scope of this article, for now.", 
            "title": "Clustering"
        }, 
        {
            "location": "/usage/advanced/remote-servers/#platforms-on-remote-web-servers", 
            "text": "If you have been using Aegir for a while simply because it handles updates, moving to new releases, cloning, aliases and everything Drupal with such elegance on a single server - you might not be entirely clear on what changes when you make the move to multiple servers. Hopefully this will help.  Understanding the process  Multiple servers are great even if you do not have to manage a server farm. Having a server for development that you are free to break, one for testing that you hope will not break, one for approvals so your clients can go to see how their \"real\" website will look, and one for production that serves the daily grind of live sites is a wonderful thing. This DTAP (Development, Testing, Acceptance, and Production) structure works and it is surprisingly easy to accomplish under Aegir.  If you are managing a farm, creating massive numbers of servers is quick and easy with Aegir - especially if you use virtual machines like Xen where a server image can be cloned or generated using LVM disks that can be migrated (even while running) to other physical machines.  When it is time break out an Aegir master controller and remote slaves you have to remember that Aegir is the place that it (almost) all happens. Everything is stored in Aegir - including your remote platforms and your sites - and then distributed to the slave servers by Aegir in the Verify process.  Remember too that sites reside on platforms, and platforms reside on servers. You are turning your Aegir install into an Aegir Master as the hub, and the Aeger Remote Slaves as the spokes. To move into this \"hub and spoke\" architecture, you must build the remote server, tell the Aegir Master about that server and verify it, install a Drupal platform for that server on the Aegir Master and finally tell the Aegir Master about that Drupal install and verify that. You then create the sites on the platform you want based upon the install profile you select for that site.  The mechanics    Build a server image on your network to become your Aegir Slave. This can be anything from a separate headless server to a Virtual Machine image on a physical machine with a dozen other Virtual Machines on it. As long as it has its own IP and is capable of running a Drupal image, it will work.    Ensure that your new server image is resolved in your DNS by adding it to your zone files and incrementing the serial number in the zone file. Aegir can manage that for you now to some extent, but you might want to wait until that feature leaves the experimental status. Make sure the entries in /etc/hostname and /etc/hosts all match your zone files (including reverse DNS). Reload/restart the DNS server. Any DNS slaves should automatically get notified and the incremented serial number should make sure they reload automatically. Test the resolution and ping the new Aegir Slave server image from the Aegir Master to Ensure that the IPs all resolved properly.    Follow the steps for  Setting up a remote web server  carefully. You should be able to use cut and paste if you are using Debian Stable or the like. In any case, you will need those packages. You do not need Aegir on the slave, but you do need the aegir user and that user must have a shell. I prefer the bash shell, but the sh shell in the instructions will do.    You need to have the \"passphraseless\" ssh working and proven before you continue. A web search on the terms \"passphraseless ssh\" plus your operating system will generally get you great instructions, but putting those instructions here for every possible combination is beyond the scope of this example. In terms of helpful hints, however, you do not need to have a password for the aegir user on the Aegir Slave. Your access will be this certificate. By simply hitting enter when it asks for the passphrase, you make the certificate passphraseless. You should carefully set the permissions and back these certificates up to a secure location. You MUST log in manually from the Aegir Master to the Aegir Slave the first time or your verify will fail. This is because the system has to add the ssh keys to the known hosts and it will ask about about it before it will allow the connection. Aegir nows nothing about this and will not answer, so the verify will fail. To be absolutely sure it works, after exiting the initial login, you should retry the login to verify it does not ask for a password and then exit the login and try an rsync (which is the process by which the Aegir Master controls the Aegir Slaves). All of these commands should work from the Aegir Master to the new Aegir Slave while logged into the Aegir Master as the aegir user with no request for a password, proving that the systems are exchanging keys (do not proceed until you can do this flawlessly without having to enter a response):  ## Start from the Aegir Master as the aegir user\n# Log in to the slave from the Aegir Master and exit without any password or reply required\nssh slavename.example.com\nexit\n# Create a test file for rsync\necho 'rsync test file'   MyRsyncTest\n# Send the test file to the remote slave by name using rsync\nrsync -azvv /var/aegir/MyRsyncTest aegir@slavename.example.com:/var/aegir\n# Log back into the remote slave\nssh slavename.example.com\n# Make sure the file is there and readable\ncat /var/aegir/MyRsyncTest\n# Delete the test file from the remote slave\nrm /var/aegir/MyRsyncTest\n# Exit the ssh login session on the remote\nexit\n# Delete the test file on the Aegir Master\nrm /var/aegir/MyRsyncTest    Go to Add Content/Server and put in the server name, leave the Database set as None (Your sites will use the Aegir Master database and none is required on the Remote Slave) and under Web select apache or apache ssl (to match the example) then click Save. After the process completes you should see that it found the IP address properly on its own, plugged it in all by itself and then Verify quite nicely. If you look on the Aegir Slave remote server you will see that you now have directories named config and platform.    Now that hard decision for platform choice comes in play. My preference is a Drupal install that is the same release as the Aegir Master server or higher. Since sites are eventually destined to be Drupal 8 one day, and the Aegir system is not Drupal 8 ready as of this writing but heading that direction, making at least one Drupal 8 slave is a good idea so that you can migrate sites to that platform as they are ready. If you are migrating sites off of your existing Aegir and onto slaves, migrating to platforms of the same Drupal version makes that process much easier. In any case, firm up your decision about which Drupal version you want to install on your new Aegir Slave Platform.    Time to create that platform. The big thing here is to do it right the first time and make certain that the name of the platform is unique to any platform on your Aegir Master server. If you look in your /var/aegir directory you will notice that Aegir has its own naming convention. For instance, you should see /var/aegir/hostmaster-6.x-2.4 as the platform for the Aegir 6.x-2.4 release. You need to consider doing the same. For instance, name your platform something like: /var/aegir/slavename-drupal-version and you will make it easier to distinguish which server the platform resides upon and the drupal version so that you can manage updates and migrations more easily. Make certain that you are not destroying one platform when creating another. Be aware that at some point Aegir started organizing platforms into a separate directory: /var/aegir/platforms and you should change to that structure if you have an older original install. Again, be careful you are not overwriting an existing install when you create the new one. For instance, if you already have a Drupal install in /var/aegir/platforms/drupal-7.38 the code below will attempt to recreate it on top of the existing install. If you are using a Makefile, be sure that the same problem does not occur in that makefile. To create a Drupal 7 Aegir Remote Slave Platform, log into the Aegir Master as the aegir user and run this simple code (of course edit it to match the platform and name you want to create:  # Make sure you are in the proper directory\ncd /var/aegir/platforms\n# Install Drupal 7.38\ndrush/drush.php dl drupal-7.38\n# Rename the platform to your own naming convention\nmv /var/aegir/platforms/drupal-7.38 /var/aegir/platforms/slavename-drupal-7.38    The final step in creating this platform is to actually tell the Aegir Master about it so that it can distribute it (via rsync) to the new Aegir Remote Slave. Simple enough. Just go to Create Content/Platform and the Create Platform screen comes up. Under Name write something descriptive and unique. In the example so far, this will be something like 'slavename Drupal 7.14' or in some way adhere to your chosen naming convention. I use the directory name I created above since that serves two purposes. Under Publish Path you will put the path that holds this Drupal distribution. In the example above that will be /var/aegir/platforms/slavename-drupal-7.14 but the path will be reflected from the Aegir Master to the Aegir Slave and will be the same on both. If you are using a Makefile you need to enter the full path and name of that Makefile here as well, but the creation and use of the Makefile is beyond the scope of this example. Lastly choose the server that this platform will reside upon. When you are finished, double check the screen and then click on Save. The Verify step should execute flawlessly and when it does, your Aegir Remote Slave will be complete and ready to accept sites.    Lather, rinse and repeat for each Aegir Remote Slave.    Creating sites on the remote  The only difference you will notice when creating a new site under Aegir will be the choice of platform. The Create Site screen is quite self explanatory, but the main thing is to select the Install Profile that you require and then the list of Platforms that support that install profile will be populated.  As usual, Aegir makes it all faster and easier than you expect.", 
            "title": "Platforms on remote web servers"
        }, 
        {
            "location": "/usage/advanced/clients/", 
            "text": "Client management\n\n\n\n\n\n\nClient management\n\n\nEnable the Clients feature\n\n\nConfigure the Client feature options\n\n\nCreate clients\n\n\nAdding new users to a client\n\n\nClients accessing the system\n\n\n\n\n\n\n\n\n\n\nIn some situations you may wish to allow different people access to Aegir, but restrict which sites they can manage.\n\n\n\n\nUse Case 1:\n\n  As a developer you may simply wish to segregate your sites in Aegir by different clients for your own internal management reasons.\n\n\nUse Case 2:\n\n  If you have many staff working on different projects, you may wish to issue them with different logins and restrict which sites they can access on the Aegir system.\n\n\nUse Case 3:\n\n  As a drupal hosting company you might allow clients to sign up via your promotional website (using the 'Signup Form' feature in Aegir!), and then have their own account created on Aegir, with their newly provisioned site. They can then login and manage their own upgrades (by migrating to new platforms).  This functionality is provided by the Client feature in Aegir. Here's a brief guide to using it...\n\n\n\n\nTo grant clients secure access to the CLI, see the page on \nProvision ACL\n\n\nEnable the Clients feature\n\n\nIf you didn't enable this feature during installation, you can do so now by choosing the following from the menu bar at the very top of the page: \nHosting \n Features\n. On this page, click on 'Experimental' to expand these feature options. You can tick 'Clients' and click on the 'Save Configuration' button.\n\n\nNOTE:\n Experimental features are designed to be for developer preview only, although we do have reports of them being successfully used in production environments - but do so at your own risk!\n\n\nConfigure the Client feature options\n\n\nFrom the top admin menu select \nHosting\nClients\n. On this page you can configure how you want this feature to operate, with the following options:\n\n\nAutomatically Create User Accounts for New Clients\n -- If you tick this option, whenever you setup a new Client within Aegir, they will have a drupal user account created for them to be able to access their sites within the Aegir site. You will definitely want to leave this unticked for Use Case 1, perhaps also for Use Case 2, but may want to tick this for Use Case 3.\n\n\nSend Welcome Mail to New Clients\n -- If this setting is ticked, the client will be sent an email when you create their drupal user account allowing them access to the system. Below this you can configure the email that will be sent.\n\n\nCreate clients\n\n\nCreating a new Client on Aegir is as simple as selecting \nCreate Content\nClient\n. Then enter their email address (twice for confirmation), Name and Organization. Now click 'Save'.  \nA \nbug\n was introduced in Aegir 3 preventing capture of email addresses and organization names. For now, it's only possible to enter client names.\n\n\nDepending on the options you selected above they might also have a user account created for them at this stage by Aegir, and then be emailed with their login details.\n\n\nOtherwise the Client record will just be stored in the database and you will be able to assign sites to this client in the future.\n\n\nAdding new users to a client\n\n\nPerhaps you didn't initially allow clients to access their own Client area within Aegir and just kept it for your own internal use, or perhaps you now want to add additional users to a Client on the system.\n\n\nTo do this visit the Client page and select the 'Edit' tab. You'll see a list of allowed users. You can add users to this list by typing their username in the autocomplete field, or you can remove users by tciking the box next to their username and saving the form.\n\n\nIf the user you wish to add doesn't yet have a drupal user account on the Aegir site, you can create one as normal by going to the following on the top admin menu: \nUser Management\nUsers\nAdd User\n. Then you can return to the client page and add their username to give them access to that client's area.\n\n\nClients accessing the system\n\n\nIf you have selected above that new Clients should also have an Aegir account setup for them, then they will be able to access the Aegir site.\n\n\nWithin Aegir they will ONLY be able to see details about their own sites.", 
            "title": "Access control"
        }, 
        {
            "location": "/usage/advanced/clients/#client-management", 
            "text": "Client management  Enable the Clients feature  Configure the Client feature options  Create clients  Adding new users to a client  Clients accessing the system      In some situations you may wish to allow different people access to Aegir, but restrict which sites they can manage.   Use Case 1: \n  As a developer you may simply wish to segregate your sites in Aegir by different clients for your own internal management reasons.  Use Case 2: \n  If you have many staff working on different projects, you may wish to issue them with different logins and restrict which sites they can access on the Aegir system.  Use Case 3: \n  As a drupal hosting company you might allow clients to sign up via your promotional website (using the 'Signup Form' feature in Aegir!), and then have their own account created on Aegir, with their newly provisioned site. They can then login and manage their own upgrades (by migrating to new platforms).  This functionality is provided by the Client feature in Aegir. Here's a brief guide to using it...   To grant clients secure access to the CLI, see the page on  Provision ACL", 
            "title": "Client management"
        }, 
        {
            "location": "/usage/advanced/clients/#enable-the-clients-feature", 
            "text": "If you didn't enable this feature during installation, you can do so now by choosing the following from the menu bar at the very top of the page:  Hosting   Features . On this page, click on 'Experimental' to expand these feature options. You can tick 'Clients' and click on the 'Save Configuration' button.  NOTE:  Experimental features are designed to be for developer preview only, although we do have reports of them being successfully used in production environments - but do so at your own risk!", 
            "title": "Enable the Clients feature"
        }, 
        {
            "location": "/usage/advanced/clients/#configure-the-client-feature-options", 
            "text": "From the top admin menu select  Hosting Clients . On this page you can configure how you want this feature to operate, with the following options:  Automatically Create User Accounts for New Clients  -- If you tick this option, whenever you setup a new Client within Aegir, they will have a drupal user account created for them to be able to access their sites within the Aegir site. You will definitely want to leave this unticked for Use Case 1, perhaps also for Use Case 2, but may want to tick this for Use Case 3.  Send Welcome Mail to New Clients  -- If this setting is ticked, the client will be sent an email when you create their drupal user account allowing them access to the system. Below this you can configure the email that will be sent.", 
            "title": "Configure the Client feature options"
        }, 
        {
            "location": "/usage/advanced/clients/#create-clients", 
            "text": "Creating a new Client on Aegir is as simple as selecting  Create Content Client . Then enter their email address (twice for confirmation), Name and Organization. Now click 'Save'.   A  bug  was introduced in Aegir 3 preventing capture of email addresses and organization names. For now, it's only possible to enter client names.  Depending on the options you selected above they might also have a user account created for them at this stage by Aegir, and then be emailed with their login details.  Otherwise the Client record will just be stored in the database and you will be able to assign sites to this client in the future.", 
            "title": "Create clients"
        }, 
        {
            "location": "/usage/advanced/clients/#adding-new-users-to-a-client", 
            "text": "Perhaps you didn't initially allow clients to access their own Client area within Aegir and just kept it for your own internal use, or perhaps you now want to add additional users to a Client on the system.  To do this visit the Client page and select the 'Edit' tab. You'll see a list of allowed users. You can add users to this list by typing their username in the autocomplete field, or you can remove users by tciking the box next to their username and saving the form.  If the user you wish to add doesn't yet have a drupal user account on the Aegir site, you can create one as normal by going to the following on the top admin menu:  User Management Users Add User . Then you can return to the client page and add their username to give them access to that client's area.", 
            "title": "Adding new users to a client"
        }, 
        {
            "location": "/usage/advanced/clients/#clients-accessing-the-system", 
            "text": "If you have selected above that new Clients should also have an Aegir account setup for them, then they will be able to access the Aegir site.  Within Aegir they will ONLY be able to see details about their own sites.", 
            "title": "Clients accessing the system"
        }, 
        {
            "location": "/usage/advanced/provisionacl/", 
            "text": "Provision ACL\n\n\n\n\n\n\nProvision ACL\n\n\nInstall instructions\n\n\nInstall provisionacl\n\n\nInstall ACL support package\n\n\nEnable ACLs on your filesystem\n\n\nCreate a UNIX group\n\n\nAdd users to the group\n\n\nCreate a client\n\n\nCreate a site\n\n\n\n\n\n\nWhat ProvisionACL does\n\n\nLDAP integration\n\n\nProvisionACL API\n\n\nCaveats (ie. what it does not do)\n\n\n\n\n\n\n\n\n\n\nThis section documents the \nProvision ACL extension\n to Aegir which allows more granular access control over your sites files and directories. While this extension does not ship with Aegir by default, it can be extremely useful in securing access to resources on the CLI.\n\n\nInstall instructions\n\n\nMost (if not all) of these commands will have to be run as root (or using sudo, etc.)\n\n\nInstall provisionacl\n\n\nFirst, download and install provisionacl:\n\n\ndrush dl provisionacl\ndrush cc drush\n\n\n\nInstall ACL support package\n\n\nACL support usually requires the installation of a system package:\n\n\napt-get install acl\n\n\n\nEnable ACLs on your filesystem\n\n\nTo enable ACLs on you filesystem, it will have to be re-mounted with ACL support:\n\n\nmount -o remount,acl /\n\n\n\nHere we assume everything is under the root (\n/\n) filesystem here, otherwise run this command for every filesystem Aegir will work on (e.g. \n/srv\n, \n/var\n or \n/home\n).\n\n\nYou also need to edit your \n/etc/fstab\n for this configuration to survive reboots.\n\n\nCreate a UNIX group\n\n\nIn this case we choose a group called \"devs\" but you can choose another name.\n\n\ngroupadd devs\n\n\n\nAdd users to the group\n\n\nAdd one or more UNIX users that you want to give access to that group. For an existing user, this would look like:\n\n\nusermod -a -G devs \nusername\n\n\n\n\nFor a new user, this would look like:\n\n\nuseradd -G devs \nusername\n\n\n\n\nCreate a client\n\n\nCreate a client (should be called \"devs\" for this example) in the frontend at \n/node/add/client\n. The client name (in the front-end) and the user group (on the system) should match. Each new client that you want to grant such CLI access to will require its own user group.\n\n\nCreate a site\n\n\nCreate a site for the client in the frontend at \n/node/add/site\n.\n\n\nWhat ProvisionACL does\n\n\nWhen the site is installed, members of the \"devs\" group will be able to write to the sites' directories (e.g. upload files and modules) and run drush commands on the site (yes, including site aliases, although see caveats below).\n\n\nThis works also for existing sites; make sure you create a group matching the internal name of the existing client and reverify the site.\n\n\nLDAP integration\n\n\nProvisionacl supports LDAP groups as well. Ensure that an LDAP client is running and that the 'aegir' user can see the LDAP-provided groups:\n\n\ngetent groups\n\n\n\nYou may need to restart the Name Service Cache Daemon (nscd):\n\n\n/etc/init.d/nscd restart\n\n\n\nProvisionACL API\n\n\nACL support can be integrated into contrib or custom Aegir extensions.\n\n\nTo change ACLs on files, you should use something like this:\n\n\nif (function_exists('provisionacl_set_acl')) {\n  provisionacl_files_acls(d()-\nsite_path . '/mysettings.php');\n}\n\n\n\nYou can optionnally pass a group as an argument, but it will guess that from the client name of the site. Also note that this will raise a drush error if setfacl fails, but just set a warning if the group doesn't exist.\n\n\nCaveats (ie. what it does not do)\n\n\nGiving shell access to users in Aegir is still insecure, see \nthis upstream issue\n.\n\n\nWe may refactor this into Aegir core in the future, but in the meantime this should provide a good workaround for the limitations of the existing permission system.\n\n\nYou may need to change your $HOME variable for aliases to work, because of \nthis bug in Drush\n. Example:\n\n\nenv HOME=/var/aegir drush @hostmaster cc all\n\n\n\nSee also \nthis post\n for context and design.", 
            "title": "ProvisionACL"
        }, 
        {
            "location": "/usage/advanced/provisionacl/#provision-acl", 
            "text": "Provision ACL  Install instructions  Install provisionacl  Install ACL support package  Enable ACLs on your filesystem  Create a UNIX group  Add users to the group  Create a client  Create a site    What ProvisionACL does  LDAP integration  ProvisionACL API  Caveats (ie. what it does not do)      This section documents the  Provision ACL extension  to Aegir which allows more granular access control over your sites files and directories. While this extension does not ship with Aegir by default, it can be extremely useful in securing access to resources on the CLI.", 
            "title": "Provision ACL"
        }, 
        {
            "location": "/usage/advanced/provisionacl/#install-instructions", 
            "text": "Most (if not all) of these commands will have to be run as root (or using sudo, etc.)  Install provisionacl  First, download and install provisionacl:  drush dl provisionacl\ndrush cc drush  Install ACL support package  ACL support usually requires the installation of a system package:  apt-get install acl  Enable ACLs on your filesystem  To enable ACLs on you filesystem, it will have to be re-mounted with ACL support:  mount -o remount,acl /  Here we assume everything is under the root ( / ) filesystem here, otherwise run this command for every filesystem Aegir will work on (e.g.  /srv ,  /var  or  /home ).  You also need to edit your  /etc/fstab  for this configuration to survive reboots.  Create a UNIX group  In this case we choose a group called \"devs\" but you can choose another name.  groupadd devs  Add users to the group  Add one or more UNIX users that you want to give access to that group. For an existing user, this would look like:  usermod -a -G devs  username   For a new user, this would look like:  useradd -G devs  username   Create a client  Create a client (should be called \"devs\" for this example) in the frontend at  /node/add/client . The client name (in the front-end) and the user group (on the system) should match. Each new client that you want to grant such CLI access to will require its own user group.  Create a site  Create a site for the client in the frontend at  /node/add/site .", 
            "title": "Install instructions"
        }, 
        {
            "location": "/usage/advanced/provisionacl/#what-provisionacl-does", 
            "text": "When the site is installed, members of the \"devs\" group will be able to write to the sites' directories (e.g. upload files and modules) and run drush commands on the site (yes, including site aliases, although see caveats below).  This works also for existing sites; make sure you create a group matching the internal name of the existing client and reverify the site.", 
            "title": "What ProvisionACL does"
        }, 
        {
            "location": "/usage/advanced/provisionacl/#ldap-integration", 
            "text": "Provisionacl supports LDAP groups as well. Ensure that an LDAP client is running and that the 'aegir' user can see the LDAP-provided groups:  getent groups  You may need to restart the Name Service Cache Daemon (nscd):  /etc/init.d/nscd restart", 
            "title": "LDAP integration"
        }, 
        {
            "location": "/usage/advanced/provisionacl/#provisionacl-api", 
            "text": "ACL support can be integrated into contrib or custom Aegir extensions.  To change ACLs on files, you should use something like this:  if (function_exists('provisionacl_set_acl')) {\n  provisionacl_files_acls(d()- site_path . '/mysettings.php');\n}  You can optionnally pass a group as an argument, but it will guess that from the client name of the site. Also note that this will raise a drush error if setfacl fails, but just set a warning if the group doesn't exist.", 
            "title": "ProvisionACL API"
        }, 
        {
            "location": "/usage/advanced/provisionacl/#caveats-ie-what-it-does-not-do", 
            "text": "Giving shell access to users in Aegir is still insecure, see  this upstream issue .  We may refactor this into Aegir core in the future, but in the meantime this should provide a good workaround for the limitations of the existing permission system.  You may need to change your $HOME variable for aliases to work, because of  this bug in Drush . Example:  env HOME=/var/aegir drush @hostmaster cc all  See also  this post  for context and design.", 
            "title": "Caveats (ie. what it does not do)"
        }, 
        {
            "location": "/extend/", 
            "text": "Extending Aegir\n\n\n\n\n\n\nExtending Aegir\n\n\nWhat can I extend exactly?\n\n\n\n\n\n\n\n\n\n\nThis section shows how to modify Aegir to suit your unique use case.\n\n\nAegir is designed to be easily extendable by developers. As it is made with Drupal and Drush, it is made of the hooks and command you know and love. If you are a user or admin looking to deploy contrib modules, you should perhaps look into the \ncontrib modules list\n and \nuser documentation\n instead.\n\n\nWhat can I extend exactly?\n\n\nThese extensions may come in the form of:\n\n\n\n\nAdding new tasks to be performed against sites\n\n\nAdding new services or implementations of service types (postgres for the DB service, for example)\n\n\nOverriding or hooking into existing forms such as the site form, to send extra data to the backend\n\n\nUsing APIs to inject bits of configuration into configuration files such as settings.php and vhosts.\n\n\nUse the powers of Drupal to extend the content types and views.", 
            "title": "Extending Aegir"
        }, 
        {
            "location": "/extend/#extending-aegir", 
            "text": "Extending Aegir  What can I extend exactly?      This section shows how to modify Aegir to suit your unique use case.  Aegir is designed to be easily extendable by developers. As it is made with Drupal and Drush, it is made of the hooks and command you know and love. If you are a user or admin looking to deploy contrib modules, you should perhaps look into the  contrib modules list  and  user documentation  instead.", 
            "title": "Extending Aegir"
        }, 
        {
            "location": "/extend/#what-can-i-extend-exactly", 
            "text": "These extensions may come in the form of:   Adding new tasks to be performed against sites  Adding new services or implementations of service types (postgres for the DB service, for example)  Overriding or hooking into existing forms such as the site form, to send extra data to the backend  Using APIs to inject bits of configuration into configuration files such as settings.php and vhosts.  Use the powers of Drupal to extend the content types and views.", 
            "title": "What can I extend exactly?"
        }, 
        {
            "location": "/extend/frontend/", 
            "text": "Hosting - the Aegir frontend\n\n\n\n\n\n\nHosting - the Aegir frontend\n\n\nAdding a module\n\n\nUI modules\n\n\n\n\n\n\n\n\n\n\nThe Aegir frontend is a Drupal site in itself. You can use any Drupal module to extend it.\n\n\nAdding a module\n\n\nAdd a new module either to the site specific moduled directory e.g. \n/var/aegir/hostmaster-7.x-3.x/sites/aegir.example.com/modules\n or use \nyour own makefile\n to create the hostmaster platform.\n\n\nUI modules\n\n\nTo change one of the content types of views used in the Aegir frontend make sure you have the views_ui and field_ui core modules enabled.\nYou can enable the like any other Drupal module as they are included with code already.", 
            "title": "Frontend"
        }, 
        {
            "location": "/extend/frontend/#hosting-the-aegir-frontend", 
            "text": "Hosting - the Aegir frontend  Adding a module  UI modules      The Aegir frontend is a Drupal site in itself. You can use any Drupal module to extend it.", 
            "title": "Hosting - the Aegir frontend"
        }, 
        {
            "location": "/extend/frontend/#adding-a-module", 
            "text": "Add a new module either to the site specific moduled directory e.g.  /var/aegir/hostmaster-7.x-3.x/sites/aegir.example.com/modules  or use  your own makefile  to create the hostmaster platform.", 
            "title": "Adding a module"
        }, 
        {
            "location": "/extend/frontend/#ui-modules", 
            "text": "To change one of the content types of views used in the Aegir frontend make sure you have the views_ui and field_ui core modules enabled.\nYou can enable the like any other Drupal module as they are included with code already.", 
            "title": "UI modules"
        }, 
        {
            "location": "/extend/backend/", 
            "text": "Provision - the Aegir backend\n\n\n\n\n\n\nProvision - the Aegir backend\n\n\nAdding a Drush extension\n\n\n\n\n\n\n\n\n\n\nThe Aegir backend is a Drush extension called \"Provision\". It does all the heavy lifting in Aegir, such as writing vhost files and creating new databases. You can use additional Drush extensions to extend Aegir or \nmodify its behaviour\n.\n\n\nAdding a Drush extension\n\n\nThere are a couple ways that you can add a Drush extension. First, and most commonly, you can add it under \n/var/aegir/.drush/\n and clear the Drush cache. Drush will search a number of paths for extensions, but that's the the conventional place to put them on an Aegir install.\n\n\nSince Aegir 3, you can also bundle Drush extensions with front-end modules that expose a \"Hosting Feature.\" This allows for both the frontend module, along with the included backend extension, to be deployed via a makefile, as part of the Hostmaster platform. Upon enabling such a Feature, Aegir will re-write it's drushrc file to dynamically include the backend directory for each Hosting Feature.", 
            "title": "Backend"
        }, 
        {
            "location": "/extend/backend/#provision-the-aegir-backend", 
            "text": "Provision - the Aegir backend  Adding a Drush extension      The Aegir backend is a Drush extension called \"Provision\". It does all the heavy lifting in Aegir, such as writing vhost files and creating new databases. You can use additional Drush extensions to extend Aegir or  modify its behaviour .", 
            "title": "Provision - the Aegir backend"
        }, 
        {
            "location": "/extend/backend/#adding-a-drush-extension", 
            "text": "There are a couple ways that you can add a Drush extension. First, and most commonly, you can add it under  /var/aegir/.drush/  and clear the Drush cache. Drush will search a number of paths for extensions, but that's the the conventional place to put them on an Aegir install.  Since Aegir 3, you can also bundle Drush extensions with front-end modules that expose a \"Hosting Feature.\" This allows for both the frontend module, along with the included backend extension, to be deployed via a makefile, as part of the Hostmaster platform. Upon enabling such a Feature, Aegir will re-write it's drushrc file to dynamically include the backend directory for each Hosting Feature.", 
            "title": "Adding a Drush extension"
        }, 
        {
            "location": "/extend/altering-behaviours/", 
            "text": "Altering Aegir's Behaviours\n\n\n\n\n\n\nAltering Aegir's Behaviours\n\n\nOverriding site-specific PHP values\n\n\nDeveloper Note\n\n\n\n\n\n\nInjecting into settings.php\n\n\nSite Specific Customization\n\n\nAegir-wide Customization\n\n\n\n\n\n\nInjecting into drushrc.php\n\n\nInjecting into site vhosts\n\n\nWhen would I want to do this?\n\n\nA simple example\n\n\nA more advanced example\n\n\n\n\n\n\nInjecting into platform-wide vhosts (.htaccess)\n\n\nInjecting into server-wide vhosts\n\n\n\n\n\n\n\n\n\n\nAegir is capable of installing, deploying and moving your sites around, because of this ability, it has to manage the various configuration files that keep your sites running.\n\n\nThese configurations include the standard Drupal settings.php for a site, .htaccess overrides for your HTTP server, as well as HTTP 'VirtualHost' or 'vhost' configuration files that tell your HTTP server where your site is located on the server.\n\n\nA caveat of this system is that Aegir regularly re-generates these configuration files to apply new changes that have been made to the sites or platforms, as well as doing so as a safety mechanism to ensure these files are 'sane'.\n\n\nFor example, if you make a modification to a site vhost or settings.php and it breaks your site, running a 'Verify' task on the site should restore the file back to how it was.\n\n\nHowever, sometimes it is necessary to add custom configuration or overrides to these files, and you can't do that if Aegir is regularly wiping your changes.\n\n\nFortunately, Aegir provides a series of hooks and inclusions for overriding or injecting customizations into these files safely and persistently.\n\n\nThis chapter shows you how each of these hooks or inclusions work.\n\n\nOverriding site-specific PHP values\n\n\nSometimes it is useful to override certain PHP values on a per-site basis, but changes to php.ini are generally server-wide. Depending on the value you want to override, a couple of options present themselves.\n\n\nFirst, let's consider where PHP values can be changed. The PHP Manual \nlists php.ini\n  directives, and under the \"Changeable\" column, indicates where a configuration setting may be set. If your value shows either PHP_INI_USER or PHP_INI_ALL, then the easiest way to change this value would be using ini_set() in a local.settings.php file:\n\n\n?php\n@ini_set('memory_limit', '128M');\n\n\n\nThe \nlocal.settings.php\n file should be placed in the root of your drupal site, e.g. /sites/sitename/local.settings.php.\n\n\nOn the other hand, if the changes mode is either PHP_INI_PERDIR or PHP_INI_SYSTEM, php_ini() won't work. In this case, the solution is to inject the value into the vhost. Since vhosts are managed by Aegir, manually adding an override to /var/aegir/config/server_master/apache/vhost.d/\n would get blown away the next time that the site is verified.\n\n\nAs described in the \nInjecting into site vhosts\n section, we can inject values into vhosts using a Drush hook. For example, to raise the file upload size limit on http://ergonlogic.com, we add the following code in /var/aegir/.drush/ergonlogiccom.drush.inc:\n\n\n?php\n  function ergonlogiccom_provision_apache_vhost_config($uri, $data) {\n    if ($uri == \"ergonlogic.com\") {\n      drush_log(\"Overriding PHP file size values. See .drush/ergonlogiccom.drush.inc\");\n      return array(\"php_value upload_max_filesize 100M\", \"php_value post_max_size 200M\");\n   }\n}\n\n\n\nThis results in the insertion of the following lines into /var/aegir/config/server_master/apache/vhost.d/ergonlogic.com:\nphp_value upload_max_filesize 100M\nphp_value post_max_size 200M\n\n\nAlso, in the verify task log I get the following informative message:\nOverriding PHP file size values. See .drush/ergonlogiccom.drush.inc\n\n\nDeveloper Note\n\n\nOne challenge this technique may present is inspecting the values of the parameters passed into this function. It appears that the Hostmaster site doesn't get bootstrapped, and so common debugging tools (such as devel.module's dd()) aren't available. However drush_log() is, and when called, will push arbitrary messages back into your Aegir site's verify task log.\n\n\nSo sticking the following into the function above can help:\n\n\n?php\n  drush_log(\"$uri: \" . print_r($uri, TRUE));\n\n\n\nps\n    ?\n\n\nInjecting into settings.php\n\n\nEvery web site in an Aegir environment has a Drupal configuration file settings.php in /sites/example.com directory. Web administrators often need to make changes to this file; however, the Aegir system also manages this file and any manual customizations will be lost when a site is verified.\n\n\nFortunately, there are two mechanisms to ensure that your customizations can be preserved. If you look in the bottom of an Aegir settings.php file you will see references to two files local.settings.php and global.inc.\n\n\n?php\n  # Additional host wide configuration settings. Useful for safely specifying configuration settings.\n  if (file_exists('/var/aegir/config/includes/global.inc')) {\n    include_once('/var/aegir/config/includes/global.inc');\n  }\n\n # Additional site configuration settings. Allows to override global settings.\n if (file_exists('/var/aegir/example-platform/sites/example.com/local.settings.php')) {\n   include_once('/var/aegir/example-platform/sites/example.com/local.settings.php');\n }\n\n\n\nIf these files exist they are loaded at run time by Drupal. As you can probably surmise from the paths to these files, local.settings.php is for site-specific customizations and global.inc is for Aegir-wide customization.\n\n\nLet's look at these files in more detail. We'll use customization of user session cookies as an example. If you look at the settings.php file generated by Aegir you see that it sets more conservative php settings for cookies (@ini_set('session.cookie_lifetime',  0); i.e. cookies expire immediately) than are in the default.settings.php packaged with Drupal (@ini_set('session.cookie_lifetime',  2000000); i.e. 2 million seconds, which is just over 23 days).\nSite-specific Customization\n\n\nSite Specific Customization\n\n\nThe local.settings.php file by default does not exist in a new Aegir site installation so you have to create it. Continuing with our example of user session cookies, let's override the Aegir default.\n\n\n?php\n  # site-specific Drupal customization\n\n  # override Aegir-generated cookie policy for sites - set cookies to expire after a week (604,800 seconds)\n  @ini_set('session.cookie_lifetime', 604800);\n\n\n\nNote that because local.settings.php is included after the variables are set in the main settings.php it's customizations takes precedence.\n\n\nNow, whenever you clone a site or migrate it between platforms, Aegir moves a copy of local.settings.php as well.\nUsing drush_hook_provision_drupal_config\n\n\nYou can also use the API to add module-specific site configurations with hook_provision_drupal_config\n\n\n?php\n  * Append PHP code to Drupal's settings.php file.\n  *\n  * To use templating, return an include statement for the template.\n  *\n  * @param $uri\n  *   URI for the site.\n  * @param $data\n  *   Associative array of data from provisionConfig_drupal_settings::data.\n  *\n  * @return\n  *   Lines to add to the site's settings.php file.\n  *\n  * @see provisionConfig_drupal_settings\n  */\n  function drush_hook_provision_drupal_config($uri, $data, $config) {\n    return '$conf[\\'reverse_proxy\\'] = TRUE;';\n  }\n\n\n\nFor example it could look like this\n\n\n?php\n  function drupalwiki_provision_drupal_config($uri, $data, $config) {\n    $extra = drush_get_option('site_extra_settings', '');\n  // remove window CR\n  $extra = str_replace(\"\\r\",'',$extra);\n    return $extra;\n  }\n\n\n\nThat is used to add the site settings added by the UI in the hosting backend implemented in \nhttps://github.com/EugenMayer/hosting_site_settings\n\n\nAegir-wide Customization\n\n\nIn some situations you may want to implement the same configuration settings on all your Aegir sites. This is where global.inc comes in. Note that global.inc is now included in settings.php before local.settings.php, so that Aegir system administrators no longer retain the ability to override configuration changes in local.settings.php, but instead it is possible to override global settings per site \nread why this has been changed\n: this change is available since 0.4-rc1 release.\n\n\nFor example, say the system administrator wanted to limit users' session lifetimes to a maximum of one day they could create a global.inc as follows:\n\n\n?php\n# Aegir-wide Drupal customization\n\n# override Aegir-generated cookie policy for all sites - set cookies to expire after a day (86,400 seconds)\n  @ini_set('session.cookie_lifetime', 86400);\n\n\n\nYou can even set more granular policy within global.inc (however it makes more sense to keep site-specific overrides in the local.settings.php):\n\n\n?php\n# Aegir-wide Drupal customization\n\n# override Aegir-generated cookie policy for all sites - set cookies to expire after a day (86,400 seconds)\n  @ini_set('session.cookie_lifetime', 86400);\n\n# Make the aegir front-end server more secure by expiring cookies immediately\n  if (preg_match(\"/hostmaster/\", $conf['install_profile'])) {\n# set cookies to expire immediately on hostmaster\n    @ini_set('session.cookie_lifetime', 0);\n  }\n\n\n\nIf you are using Aegir to manage multiple remote webservers, you will need to run the Verify task on the webserver in order to push global.inc to the remote machine.\n\n\nInjecting into drushrc.php\n\n\nThe drushrc.php file can be changed in two ways:\n\n\n\n\nchanging the templates used for the Drushrc context see the \nhook_provision_config_load_templates() hook\n\n\ncreating a local.drushrc.php file in the site-specific folder (e.g. sites/example.com/local.drushrc.php\n\n\n\n\nInjecting into site vhosts\n\n\nAegir provides some hook functions in its API, one of which allows you to inject extra configuration snippets into your Apache vhost files for sites.\n\n\nWhen would I want to do this?\n\n\nA good example for this is when you may need to inject a custom Rewrite rule that goes beyond what the Aegir Aliases 'redirection' feature provides.\n\n\nOr, perhaps you have to inject some htpasswd mod_auth password protection for your site, or perhaps a CustomLog definition. The \nhttp_basic_auth\n module uses this. \ncode\n.\n\n\nTypically you'd just add what you need to the vhost file, but the problem is that Aegir manages these vhosts, and on every Verify task, will rewrite the config from a template, blowing away your changes in the process. Ouch!\n\n\nFortunately there is a very easy and elegant solution to this problem to save your configurations persistently across Verify tasks and the like, by means of invoking the Provision hook provision_apache_vhost_config(), or, if you are using Nginx, provision_nginx_vhost_config() (and just replace the below examples with 'nginx' instead of 'apache' where necessary). Below \"mig5\" is just an example, you can replace this with anything as drush looks for all *.drush.inc files in ~aegir/.drush\n\n\nA simple example\n\n\nIn this example I'll inject a simple 'ErrorLog' apache definition into a vhost to save the site error logs to a file.\n\n\nCreate a file in ~aegir/.drush called mig5.drush.inc. (Choose \n prefix for the file name \n.drush.inc).\n\n\nAdd this snippet of PHP to the file:\n\n\n?php\n  function mig5_provision_apache_vhost_config($uri, $data) {\n     return \"ErrorLog /var/aegir/\" . $uri . \".error.log\";\n  }\n\n\n\nYou can use \nany\n prefix for the function name \nany\n_provision_apache_vhost_config\n\n\nExecute on the server\n\n\ndrush cache-clear drush\n\n\n\nFinally, install a site or verify an existing one\n\n\nCheck your site's vhost config file (in /var/aegir/config/server_master/apache/vhost.d/) and you'll see the line has been injected into the '#Extra configuration' area of the vhost\n\n\nVirtualHost *:80\n\n\n  DocumentRoot /var/aegir/hostmaster-HEAD\n\n  ServerName 1.mig5-forge.net\n  SetEnv db_type  mysqli\n  SetEnv db_name  1mig5forgenet\n  SetEnv db_user  1mig5forgenet\n  SetEnv db_passwd  X7KzsFhxhp\n  SetEnv db_host  tardis\n  SetEnv db_port  3306\n\n\n\n# Extra configuration from modules:\n  ErrorLog /var/aegir/1.mig5-forge.net.error.log\n    # Error handler for Drupal \n 4.6.7\n    \nDirectory \"/var/aegir/hostmaster-HEAD/sites/1.mig5-forge.net/files\"\n\n      SetHandler This_is_a_Drupal_security_line_do_not_remove\n    \n/Directory\n\n\n\n/VirtualHost\n\n\n\n\nIt's that simple! You can see that via the hook, we pass $uri and the drush data to the function, allowing me to abstract the site url so that each site will get its own error log. You could do extra PHP conditionals to ensure certain data only gets inserted into certain sites of a specific name.\n\n\nTo inject multiple lines instead of one, use an array, i.e\n\n\n?php\n  function mig5_provision_apache_vhost_config($uri, $data) {\n    return array(\"ErrorLog /var/aegir/\" . $uri . \".error.log\", \"LogLevel warn\");\n  }\n\n\n\nThe key point of this is that the file ~aegir/.drush/mig5.drush.inc file will never be touched by Aegir, so you can rest assured your changes will be respected.\n\n\nIf you want to only inject code into a specific site, wrap your code with an if statement, i.e\n\n\n?php\n  function mig5_provision_apache_vhost_config($uri, $data) {\n    if ($uri === \"\nsite-name-in-aegir\n\") {\n      return array(\"ErrorLog /var/aegir/\" . $uri . \".error.log\", \"LogLevel warn\");\n    }\n  }\n\n\n\nA more advanced example\n\n\nManaging multiple versions of a production site can be a tricky proposition, even in Aegir. This is particularly true when you want to use the same canonical domain name to allow users to access one such site of your choosing at any given moment. For instance, in Aegir I might have a site named www.example.com (with an alias of example.com,) and a couple of alternates with the site names of test1.example.com and test2.example.com. If I suddenly decide that I want my primary domain to access test1.example.com, Aegir forces me into a tedious process that ultimately results in site downtime \u2013 I have to delete or migrate the existing www.example.com site to a new unused site name (or clone it to an unused site name, and delete the original) and then I have to migrate test1.example.com to the vacated site name www.example.com. Alternatively, I could add the www.example.com and example.com aliases to test1.example.com but then my users would just be redirected to test1.example.com.\n\n\nGiven the way Aegir manages aliases, it would actually be easier to make this switch if the desired address was never used as a site name to begin with. Instead of having the site name www.example.com alongside of the two other test sites, we might have live.example.com, with in-use aliases of www.example.com and example.com, and a rewrite instruction in the vhost that rewrites live.example.com to www.example.com. If we could easily change the rewrite instructions in that vhost, all we would need to do is move the aliases from one site to the next in the GUI (with the requisite verify tasks executed on each site in question) in order to quickly change which site was being loaded at any given moment by www.example.com. For example, if I wanted to move to test2.example.com, I would remove the www.example.com and example.com aliases from live.example.com and verify, add those aliases to test2.example.com and verify, and change my vhost so that test2 .example.com is rewritten as www.example.com. Since as previously mentioned Aegir overwrites changes to the vhost during the verify process, the solution is to use the provision_apache_vhost_config hook in a drush.inc file to selectively add the rewrite information to the vhost when verifying the site that we want our canonical domain to refer to.\n\n\n?php\n  function aliasredirects_provision_apache_vhost_config($uri, $data) {\n    // the uri to check here is the name of the site in Aegir\n    if ($uri === \"test2.example.com\") {\n        $rval[] = \"\";\n        $rval[] = \"# Forces redirect to one uri\";\n        $rval[] = \"RewriteEngine On\";\n        // if the host is not example.com\n        $rval[] = \"RewriteCond %{HTTP_HOST} !^example.com$ [NC]\";\n        // rewrite to example.com with a 301 redirect\n        $rval[] = \"RewriteRule ^(.*)$ http://example.com$1 [R=301,L]\";\n        $rval[] = \"\";\n        return $rval;\n    }\n}\n\n\n\nWhen we want to switch again, say to test1.example.com, We could update the code to look for the test1.example.com uri.\n\n\nInjecting into platform-wide vhosts (.htaccess)\n\n\nUsing a .htaccess with an Allow Override all directive in Apache can be a major performance killer, because it requires Apache to stat each subdirectory of the codebase looking for overrides in .htaccess.\n\n\nAs a result, Aegir disables the reading of the Drupal .htaccess in the runtime environment.\n\n\nThis does not mean that the .htaccess is not needed. Instead, when you run the Verify task against a Platform, the .htaccess is studied by Aegir and its contents are copied into the platform-wide Apache vhost configuration, typically located in /var/aegir/config/server_master/apache/platform.d\n\n\nNeed to make a modification to the .htaccess? Simple: you can simply edit it in-place as you normally would, but you must re-Verify the platform in Aegir afterward, in order for those new or modified settings to be 'loaded in' to the platform vhost file.\n\n\nThe end result is improved performance for your sites, without losing any functionality, as you can still customize the .htaccess to your liking.\n\n\nInjecting into server-wide vhosts\n\n\nChanging maximum filesize upload is common when setting up sites in Drupal. As described in \nOverriding site-specific PHP values\n you can change value for each site created with Aegir by adding a .drush.inc file in /var/aegir/.drush directory. But wouldn\u00b4t it be nice to be able to do it server-wide?\n\n\nFor instance, you could create a file called global_settings.drush.inc, place it in /var/aegir/.drush and put in the following code:\n\n\n?php\n  function globalsettings_provision_apache_vhost_config($uri, $data) {\n  drush_log(\"Overriding PHP file size values. See .drush/global_settings.drush.inc\");\n  return array(\"php_value upload_max_filesize 100M\", \"php_value post_max_size 200M\");\n}\n\n\n\nHere below is the same code from ergonlogic demonstrating how to create a domainname.drush.inc file using the domain name as a condition before the code injection. This then would only affect the specific site and not apply server wide.\n\n\n?php\nfunction ergonlogiccom_provision_apache_vhost_config($uri, $data) {\nif ($uri == \"ergonlogic.com\") {\n  drush_log(\"Overriding PHP file size values. See .drush/ergonlogiccom.drush.inc\");\n  return array(\"php_value upload_max_filesize 100M\", \"php_value post_max_size 200M\");\n }\n}\n\n\n\nOne further example from staceyb on injecting a rewrite rule. Name the file the same as the function and place it in /var/aegir/.drush\n\n\n?php\n  function aliasredirects_provision_apache_vhost_config($uri, $data) {\n  // the uri to check here is the name of the site in Aegir\n  if ($uri === \"example.com\") {\n    $rval[] = \"\";\n    $rval[] = \"RewriteEngine On\";\n    // check to see if https is not on first\n    $rval[] = \"RewriteCond %{HTTPS} !=on\";\n    // rewrite to https with a 301 redirect\n    $rval[] = \"RewriteRule ^(.*)$ https://%{HTTP_HOST}$1 [R=301,L]\";\n    $rval[] = \"\";\n    return $rval;\n  }\n}\n\n\n\nMake sure you Verify your site after you create the file. Then scroll through the log and find the message you added in the code.", 
            "title": "Altering behaviours"
        }, 
        {
            "location": "/extend/altering-behaviours/#altering-aegirs-behaviours", 
            "text": "Altering Aegir's Behaviours  Overriding site-specific PHP values  Developer Note    Injecting into settings.php  Site Specific Customization  Aegir-wide Customization    Injecting into drushrc.php  Injecting into site vhosts  When would I want to do this?  A simple example  A more advanced example    Injecting into platform-wide vhosts (.htaccess)  Injecting into server-wide vhosts      Aegir is capable of installing, deploying and moving your sites around, because of this ability, it has to manage the various configuration files that keep your sites running.  These configurations include the standard Drupal settings.php for a site, .htaccess overrides for your HTTP server, as well as HTTP 'VirtualHost' or 'vhost' configuration files that tell your HTTP server where your site is located on the server.  A caveat of this system is that Aegir regularly re-generates these configuration files to apply new changes that have been made to the sites or platforms, as well as doing so as a safety mechanism to ensure these files are 'sane'.  For example, if you make a modification to a site vhost or settings.php and it breaks your site, running a 'Verify' task on the site should restore the file back to how it was.  However, sometimes it is necessary to add custom configuration or overrides to these files, and you can't do that if Aegir is regularly wiping your changes.  Fortunately, Aegir provides a series of hooks and inclusions for overriding or injecting customizations into these files safely and persistently.  This chapter shows you how each of these hooks or inclusions work.", 
            "title": "Altering Aegir's Behaviours"
        }, 
        {
            "location": "/extend/altering-behaviours/#overriding-site-specific-php-values", 
            "text": "Sometimes it is useful to override certain PHP values on a per-site basis, but changes to php.ini are generally server-wide. Depending on the value you want to override, a couple of options present themselves.  First, let's consider where PHP values can be changed. The PHP Manual  lists php.ini   directives, and under the \"Changeable\" column, indicates where a configuration setting may be set. If your value shows either PHP_INI_USER or PHP_INI_ALL, then the easiest way to change this value would be using ini_set() in a local.settings.php file:  ?php\n@ini_set('memory_limit', '128M');  The  local.settings.php  file should be placed in the root of your drupal site, e.g. /sites/sitename/local.settings.php.  On the other hand, if the changes mode is either PHP_INI_PERDIR or PHP_INI_SYSTEM, php_ini() won't work. In this case, the solution is to inject the value into the vhost. Since vhosts are managed by Aegir, manually adding an override to /var/aegir/config/server_master/apache/vhost.d/  would get blown away the next time that the site is verified.  As described in the  Injecting into site vhosts  section, we can inject values into vhosts using a Drush hook. For example, to raise the file upload size limit on http://ergonlogic.com, we add the following code in /var/aegir/.drush/ergonlogiccom.drush.inc:  ?php\n  function ergonlogiccom_provision_apache_vhost_config($uri, $data) {\n    if ($uri == \"ergonlogic.com\") {\n      drush_log(\"Overriding PHP file size values. See .drush/ergonlogiccom.drush.inc\");\n      return array(\"php_value upload_max_filesize 100M\", \"php_value post_max_size 200M\");\n   }\n}  This results in the insertion of the following lines into /var/aegir/config/server_master/apache/vhost.d/ergonlogic.com:\nphp_value upload_max_filesize 100M\nphp_value post_max_size 200M  Also, in the verify task log I get the following informative message:\nOverriding PHP file size values. See .drush/ergonlogiccom.drush.inc  Developer Note  One challenge this technique may present is inspecting the values of the parameters passed into this function. It appears that the Hostmaster site doesn't get bootstrapped, and so common debugging tools (such as devel.module's dd()) aren't available. However drush_log() is, and when called, will push arbitrary messages back into your Aegir site's verify task log.  So sticking the following into the function above can help:  ?php\n  drush_log(\"$uri: \" . print_r($uri, TRUE));  ps\n    ?", 
            "title": "Overriding site-specific PHP values"
        }, 
        {
            "location": "/extend/altering-behaviours/#injecting-into-settingsphp", 
            "text": "Every web site in an Aegir environment has a Drupal configuration file settings.php in /sites/example.com directory. Web administrators often need to make changes to this file; however, the Aegir system also manages this file and any manual customizations will be lost when a site is verified.  Fortunately, there are two mechanisms to ensure that your customizations can be preserved. If you look in the bottom of an Aegir settings.php file you will see references to two files local.settings.php and global.inc.  ?php\n  # Additional host wide configuration settings. Useful for safely specifying configuration settings.\n  if (file_exists('/var/aegir/config/includes/global.inc')) {\n    include_once('/var/aegir/config/includes/global.inc');\n  }\n\n # Additional site configuration settings. Allows to override global settings.\n if (file_exists('/var/aegir/example-platform/sites/example.com/local.settings.php')) {\n   include_once('/var/aegir/example-platform/sites/example.com/local.settings.php');\n }  If these files exist they are loaded at run time by Drupal. As you can probably surmise from the paths to these files, local.settings.php is for site-specific customizations and global.inc is for Aegir-wide customization.  Let's look at these files in more detail. We'll use customization of user session cookies as an example. If you look at the settings.php file generated by Aegir you see that it sets more conservative php settings for cookies (@ini_set('session.cookie_lifetime',  0); i.e. cookies expire immediately) than are in the default.settings.php packaged with Drupal (@ini_set('session.cookie_lifetime',  2000000); i.e. 2 million seconds, which is just over 23 days).\nSite-specific Customization  Site Specific Customization  The local.settings.php file by default does not exist in a new Aegir site installation so you have to create it. Continuing with our example of user session cookies, let's override the Aegir default.  ?php\n  # site-specific Drupal customization\n\n  # override Aegir-generated cookie policy for sites - set cookies to expire after a week (604,800 seconds)\n  @ini_set('session.cookie_lifetime', 604800);  Note that because local.settings.php is included after the variables are set in the main settings.php it's customizations takes precedence.  Now, whenever you clone a site or migrate it between platforms, Aegir moves a copy of local.settings.php as well.\nUsing drush_hook_provision_drupal_config  You can also use the API to add module-specific site configurations with hook_provision_drupal_config  ?php\n  * Append PHP code to Drupal's settings.php file.\n  *\n  * To use templating, return an include statement for the template.\n  *\n  * @param $uri\n  *   URI for the site.\n  * @param $data\n  *   Associative array of data from provisionConfig_drupal_settings::data.\n  *\n  * @return\n  *   Lines to add to the site's settings.php file.\n  *\n  * @see provisionConfig_drupal_settings\n  */\n  function drush_hook_provision_drupal_config($uri, $data, $config) {\n    return '$conf[\\'reverse_proxy\\'] = TRUE;';\n  }  For example it could look like this  ?php\n  function drupalwiki_provision_drupal_config($uri, $data, $config) {\n    $extra = drush_get_option('site_extra_settings', '');\n  // remove window CR\n  $extra = str_replace(\"\\r\",'',$extra);\n    return $extra;\n  }  That is used to add the site settings added by the UI in the hosting backend implemented in  https://github.com/EugenMayer/hosting_site_settings  Aegir-wide Customization  In some situations you may want to implement the same configuration settings on all your Aegir sites. This is where global.inc comes in. Note that global.inc is now included in settings.php before local.settings.php, so that Aegir system administrators no longer retain the ability to override configuration changes in local.settings.php, but instead it is possible to override global settings per site  read why this has been changed : this change is available since 0.4-rc1 release.  For example, say the system administrator wanted to limit users' session lifetimes to a maximum of one day they could create a global.inc as follows:  ?php\n# Aegir-wide Drupal customization\n\n# override Aegir-generated cookie policy for all sites - set cookies to expire after a day (86,400 seconds)\n  @ini_set('session.cookie_lifetime', 86400);  You can even set more granular policy within global.inc (however it makes more sense to keep site-specific overrides in the local.settings.php):  ?php\n# Aegir-wide Drupal customization\n\n# override Aegir-generated cookie policy for all sites - set cookies to expire after a day (86,400 seconds)\n  @ini_set('session.cookie_lifetime', 86400);\n\n# Make the aegir front-end server more secure by expiring cookies immediately\n  if (preg_match(\"/hostmaster/\", $conf['install_profile'])) {\n# set cookies to expire immediately on hostmaster\n    @ini_set('session.cookie_lifetime', 0);\n  }  If you are using Aegir to manage multiple remote webservers, you will need to run the Verify task on the webserver in order to push global.inc to the remote machine.", 
            "title": "Injecting into settings.php"
        }, 
        {
            "location": "/extend/altering-behaviours/#injecting-into-drushrcphp", 
            "text": "The drushrc.php file can be changed in two ways:   changing the templates used for the Drushrc context see the  hook_provision_config_load_templates() hook  creating a local.drushrc.php file in the site-specific folder (e.g. sites/example.com/local.drushrc.php", 
            "title": "Injecting into drushrc.php"
        }, 
        {
            "location": "/extend/altering-behaviours/#injecting-into-site-vhosts", 
            "text": "Aegir provides some hook functions in its API, one of which allows you to inject extra configuration snippets into your Apache vhost files for sites.  When would I want to do this?  A good example for this is when you may need to inject a custom Rewrite rule that goes beyond what the Aegir Aliases 'redirection' feature provides.  Or, perhaps you have to inject some htpasswd mod_auth password protection for your site, or perhaps a CustomLog definition. The  http_basic_auth  module uses this.  code .  Typically you'd just add what you need to the vhost file, but the problem is that Aegir manages these vhosts, and on every Verify task, will rewrite the config from a template, blowing away your changes in the process. Ouch!  Fortunately there is a very easy and elegant solution to this problem to save your configurations persistently across Verify tasks and the like, by means of invoking the Provision hook provision_apache_vhost_config(), or, if you are using Nginx, provision_nginx_vhost_config() (and just replace the below examples with 'nginx' instead of 'apache' where necessary). Below \"mig5\" is just an example, you can replace this with anything as drush looks for all *.drush.inc files in ~aegir/.drush  A simple example  In this example I'll inject a simple 'ErrorLog' apache definition into a vhost to save the site error logs to a file.  Create a file in ~aegir/.drush called mig5.drush.inc. (Choose   prefix for the file name  .drush.inc).  Add this snippet of PHP to the file:  ?php\n  function mig5_provision_apache_vhost_config($uri, $data) {\n     return \"ErrorLog /var/aegir/\" . $uri . \".error.log\";\n  }  You can use  any  prefix for the function name  any _provision_apache_vhost_config  Execute on the server  drush cache-clear drush  Finally, install a site or verify an existing one  Check your site's vhost config file (in /var/aegir/config/server_master/apache/vhost.d/) and you'll see the line has been injected into the '#Extra configuration' area of the vhost  VirtualHost *:80 \n\n  DocumentRoot /var/aegir/hostmaster-HEAD\n\n  ServerName 1.mig5-forge.net\n  SetEnv db_type  mysqli\n  SetEnv db_name  1mig5forgenet\n  SetEnv db_user  1mig5forgenet\n  SetEnv db_passwd  X7KzsFhxhp\n  SetEnv db_host  tardis\n  SetEnv db_port  3306\n\n\n\n# Extra configuration from modules:\n  ErrorLog /var/aegir/1.mig5-forge.net.error.log\n    # Error handler for Drupal   4.6.7\n     Directory \"/var/aegir/hostmaster-HEAD/sites/1.mig5-forge.net/files\" \n      SetHandler This_is_a_Drupal_security_line_do_not_remove\n     /Directory  /VirtualHost   It's that simple! You can see that via the hook, we pass $uri and the drush data to the function, allowing me to abstract the site url so that each site will get its own error log. You could do extra PHP conditionals to ensure certain data only gets inserted into certain sites of a specific name.  To inject multiple lines instead of one, use an array, i.e  ?php\n  function mig5_provision_apache_vhost_config($uri, $data) {\n    return array(\"ErrorLog /var/aegir/\" . $uri . \".error.log\", \"LogLevel warn\");\n  }  The key point of this is that the file ~aegir/.drush/mig5.drush.inc file will never be touched by Aegir, so you can rest assured your changes will be respected.  If you want to only inject code into a specific site, wrap your code with an if statement, i.e  ?php\n  function mig5_provision_apache_vhost_config($uri, $data) {\n    if ($uri === \" site-name-in-aegir \") {\n      return array(\"ErrorLog /var/aegir/\" . $uri . \".error.log\", \"LogLevel warn\");\n    }\n  }  A more advanced example  Managing multiple versions of a production site can be a tricky proposition, even in Aegir. This is particularly true when you want to use the same canonical domain name to allow users to access one such site of your choosing at any given moment. For instance, in Aegir I might have a site named www.example.com (with an alias of example.com,) and a couple of alternates with the site names of test1.example.com and test2.example.com. If I suddenly decide that I want my primary domain to access test1.example.com, Aegir forces me into a tedious process that ultimately results in site downtime \u2013 I have to delete or migrate the existing www.example.com site to a new unused site name (or clone it to an unused site name, and delete the original) and then I have to migrate test1.example.com to the vacated site name www.example.com. Alternatively, I could add the www.example.com and example.com aliases to test1.example.com but then my users would just be redirected to test1.example.com.  Given the way Aegir manages aliases, it would actually be easier to make this switch if the desired address was never used as a site name to begin with. Instead of having the site name www.example.com alongside of the two other test sites, we might have live.example.com, with in-use aliases of www.example.com and example.com, and a rewrite instruction in the vhost that rewrites live.example.com to www.example.com. If we could easily change the rewrite instructions in that vhost, all we would need to do is move the aliases from one site to the next in the GUI (with the requisite verify tasks executed on each site in question) in order to quickly change which site was being loaded at any given moment by www.example.com. For example, if I wanted to move to test2.example.com, I would remove the www.example.com and example.com aliases from live.example.com and verify, add those aliases to test2.example.com and verify, and change my vhost so that test2 .example.com is rewritten as www.example.com. Since as previously mentioned Aegir overwrites changes to the vhost during the verify process, the solution is to use the provision_apache_vhost_config hook in a drush.inc file to selectively add the rewrite information to the vhost when verifying the site that we want our canonical domain to refer to.  ?php\n  function aliasredirects_provision_apache_vhost_config($uri, $data) {\n    // the uri to check here is the name of the site in Aegir\n    if ($uri === \"test2.example.com\") {\n        $rval[] = \"\";\n        $rval[] = \"# Forces redirect to one uri\";\n        $rval[] = \"RewriteEngine On\";\n        // if the host is not example.com\n        $rval[] = \"RewriteCond %{HTTP_HOST} !^example.com$ [NC]\";\n        // rewrite to example.com with a 301 redirect\n        $rval[] = \"RewriteRule ^(.*)$ http://example.com$1 [R=301,L]\";\n        $rval[] = \"\";\n        return $rval;\n    }\n}  When we want to switch again, say to test1.example.com, We could update the code to look for the test1.example.com uri.", 
            "title": "Injecting into site vhosts"
        }, 
        {
            "location": "/extend/altering-behaviours/#injecting-into-platform-wide-vhosts-htaccess", 
            "text": "Using a .htaccess with an Allow Override all directive in Apache can be a major performance killer, because it requires Apache to stat each subdirectory of the codebase looking for overrides in .htaccess.  As a result, Aegir disables the reading of the Drupal .htaccess in the runtime environment.  This does not mean that the .htaccess is not needed. Instead, when you run the Verify task against a Platform, the .htaccess is studied by Aegir and its contents are copied into the platform-wide Apache vhost configuration, typically located in /var/aegir/config/server_master/apache/platform.d  Need to make a modification to the .htaccess? Simple: you can simply edit it in-place as you normally would, but you must re-Verify the platform in Aegir afterward, in order for those new or modified settings to be 'loaded in' to the platform vhost file.  The end result is improved performance for your sites, without losing any functionality, as you can still customize the .htaccess to your liking.", 
            "title": "Injecting into platform-wide vhosts (.htaccess)"
        }, 
        {
            "location": "/extend/altering-behaviours/#injecting-into-server-wide-vhosts", 
            "text": "Changing maximum filesize upload is common when setting up sites in Drupal. As described in  Overriding site-specific PHP values  you can change value for each site created with Aegir by adding a .drush.inc file in /var/aegir/.drush directory. But wouldn\u00b4t it be nice to be able to do it server-wide?  For instance, you could create a file called global_settings.drush.inc, place it in /var/aegir/.drush and put in the following code:  ?php\n  function globalsettings_provision_apache_vhost_config($uri, $data) {\n  drush_log(\"Overriding PHP file size values. See .drush/global_settings.drush.inc\");\n  return array(\"php_value upload_max_filesize 100M\", \"php_value post_max_size 200M\");\n}  Here below is the same code from ergonlogic demonstrating how to create a domainname.drush.inc file using the domain name as a condition before the code injection. This then would only affect the specific site and not apply server wide.  ?php\nfunction ergonlogiccom_provision_apache_vhost_config($uri, $data) {\nif ($uri == \"ergonlogic.com\") {\n  drush_log(\"Overriding PHP file size values. See .drush/ergonlogiccom.drush.inc\");\n  return array(\"php_value upload_max_filesize 100M\", \"php_value post_max_size 200M\");\n }\n}  One further example from staceyb on injecting a rewrite rule. Name the file the same as the function and place it in /var/aegir/.drush  ?php\n  function aliasredirects_provision_apache_vhost_config($uri, $data) {\n  // the uri to check here is the name of the site in Aegir\n  if ($uri === \"example.com\") {\n    $rval[] = \"\";\n    $rval[] = \"RewriteEngine On\";\n    // check to see if https is not on first\n    $rval[] = \"RewriteCond %{HTTPS} !=on\";\n    // rewrite to https with a 301 redirect\n    $rval[] = \"RewriteRule ^(.*)$ https://%{HTTP_HOST}$1 [R=301,L]\";\n    $rval[] = \"\";\n    return $rval;\n  }\n}  Make sure you Verify your site after you create the file. Then scroll through the log and find the message you added in the code.", 
            "title": "Injecting into server-wide vhosts"
        }, 
        {
            "location": "/extend/contrib/", 
            "text": "Contributed extensions\n\n\n\n\n\n\nContributed extensions\n\n\nExtensions to Hostmaster (frontend)\n\n\nIncluded in Aegir package\n\n\nHosting CiviCRM\n\n\nHosting Git\n\n\nHosting Remote Import\n\n\nHosting Site Backup Manager\n\n\nHosting Tasks Extra\n\n\n\n\n\n\nNot included in Aegir package\n\n\nAegir Cloud\n\n\nHosting Dev\n\n\nHosting DNS\n\n\nAegir Config Management\n\n\nAegir Kubernetes\n\n\nAegir Network\n\n\nAegir Reporting\n\n\nAegir Rules\n\n\nAegir Services\n\n\nAegir Site Probes\n\n\nHosting Certificate\n\n\nHosting Drulenium\n\n\nHosting Logs\n\n\nHosting Let's Encrypt\n\n\nHosting Notifications\n\n\nHosting Piwik\n\n\nHosting Site Make\n\n\nHosting Variables\n\n\nHosting Wordpress\n\n\n\n\n\n\n\n\n\n\nExtensions to Provision (backend)\n\n\nProvision STS\n\n\n\n\n\n\nThemes\n\n\nConfiguration management\n\n\nDevelopment\n\n\nValkyrie\n\n\nAegir Development Environment\n\n\nAegir up (deprecated)\n\n\n\n\n\n\nOthers\n\n\nSkynet\n\n\nDevShop\n\n\nAegir Pathologic Files\n\n\nRecurly Aegir\n\n\n\n\n\n\nYour extension here?\n\n\n\n\n\n\n\n\n\n\nPlease note that the support and development status varies for these.\n\n\nExtensions to Hostmaster (frontend)\n\n\nSome of these ship with Aegir (the \n\"golden contrib\"\n suite of modules) so their features simply require enabling if desired.  For the others, manual installation is required.\n\n\nIncluded in Aegir package\n\n\nHosting CiviCRM\n\n\nModule to configure settings and cron jobs specific to CiviCRM.\n\n\nHosting Git\n\n\nThis is a simple module for the Aegir project that adds a 'Git pull', 'Git checkout' and 'Git clone' task for sites.  It's the successor of Hosting Site Git \n Hosting Platform Git.\n\n\nHosting Remote Import\n\n\nProvides a UI for fetching sites from remote Aegir servers.\n\n\nHosting Site Backup Manager\n\n\nExtends the backup functionality of Aegir. It adds a tab to the site content type. The tab shows the backups and enables per backup actions (Restore, Delete and Get).\n\n\nHosting Tasks Extra\n\n\nThis module extends Aegir hostmaster (and drush/provision) with some additional tasks:\n\n\n\n\nRevert features\n\n\nFlush all caches\n\n\nRebuild registry\n\n\nRun cron\n\n\nSync data (between sites)\n\n\nRun DB schema updates\n\n\n\n\nIt also includes site functionality for:\n\n\n\n\nHTTP basic authentication\n\n\nGenerating and showing Drush aliases\n\n\n\n\nNot included in Aegir package\n\n\nAegir Cloud\n\n\nAegir Cloud allows Aegir to create servers directly in cloud hosting providers like IBM Softlayer and Amazon Web Services.\n\n\nHosting Dev\n\n\nThis is a suite of tools to enable smoother development using Aegir. It is currently simply a port of the hosting_reinstall module to Aegir 3.\n\n\nHosting DNS\n\n\nDNS server integration for Aegir, previously included in core.\n\n\nAegir Config Management\n\n\nThis module provides config-export and config-import commands for Aegir.\n\n\nAegir Kubernetes\n\n\nThis module adds \nKubernetes\n support by allowing for hosting of any \ncontainerized\n application (via \nDocker\n for now) with resource definition files.\n\n\nAegir Network\n\n\nAllow inter-communication between Aegir servers (to address the \"smart nodes\" use case). The point is to centralize information to facilitate management of multiple servers.\n\n\nAegir Reporting\n\n\nThis module provides a reporting framework. It builds atop the \nAegir Monitoring API\n to report on the health of hosted sites. It ships with some basic probes, but is intended to be extended, as with \nAegir Site Audit\n.\n\n\nAegir Rules\n\n\nProvides integration with \nthe Rules module\n to enable actions on various triggers.  Related to \nHosting Notifications\n.\n\n\nAegir Services\n\n\nAims to be a one-stop shop for all Web services functionality offered within Aegir. It allows for remote site management via the \nServices\n framework.\n\n\nThe Aegir SaaS sub-module sets up a fully functional endpoint (via the base module's API) allowing for remote administration of sites, notably cloning existing sites, for software-as-a-service (SaaS) / site-factory Aegir set-ups. It fully configures a service endpoint providing common parameters for cloning as configured in the module's settings. Using the API's task resource, sites can also be disabled, enabled, deleted, and have any other task performed on them supported by your Aegir installation. See \nthe module's README\n for more information.\n\n\nAegir Site Probes\n\n\nThis module fetches information from sites for use in other hosting modules.\n\n\nHosting Certificate\n\n\nSSL certificate handling as a Hosting Service. A prototype to restyle SSL handling in Aegir.\n\n\nHosting Drulenium\n\n\nThis module adds \nDrulenium\n tasks to be performed on an Aegir managed site.\n\n\nHosting Logs\n\n\nThis is a simple module for the Aegir project that adds a 'Logs' tab to sites and platforms. Showing Apache error, Git commit and watchdog logs.\n\n\nHosting Let's Encrypt\n\n\nThis module replaces self-generated Aegir certificates with Let's Encrypt ones.\n\n\nHosting Notifications\n\n\nIntegrates with \nthe Notifications framework\n. This allows you to receive notifications about task execution in various formats, Email, Twitter, iPhone etc.  Related to \nAegir Rules\n.\n\n\nHosting Piwik\n\n\nIntegrates with an instance of the \nPiwik analytic software package\n and the \nDrupal Piwik module\n.\n\n\nHosting Site Make\n\n\nAllows a site to have its modules built from a makefile in the sites directory.\n\n\nHosting Variables\n\n\nAllows you to set arbitrary custom Drupal variables for each site, such as site name and slogan.  These variables will be put in settings.php so can't be overriden (or changed) through the site interface.\n\n\nHosting Wordpress\n\n\nModule to manage WordPress sites. It aims to support the main Aegir functionality, such as installation, upgrade, migration and backups.\n\n\nExtensions to Provision (backend)\n\n\nStarting from Aegir 7.x-3.x the Drush component can be included in a 'drush' directory in the same git repository as the hosting module.\n\n\nTherefore this list will be shorter then for previous versions.\n\n\nProvision STS\n\n\nAdds the Strict Transport Security header to hosts that require SSL.\n\n\nThemes\n\n\n\n\nSaeven\n\n\nEldir\n. (The default theme)\n\n\nBara\n\n\n\n\nConfiguration management\n\n\nThose projects allow you to manage Aegir instance(s) through a configaration management tool.\n\n\n\n\nAegir Puppet module\n\n\nDrush Puppet module\n\n\nAegir3 Chef Cookbook\n\n\nAnsible role\n\n\nAegir Ansible\n\n\n\n\nDevelopment\n\n\nValkyrie\n\n\nValkyrie is an opinionated development stack that makes features/git based Drupal development easy.\n\n\nFeatures include:\n\n   Everything is wrapped up neatly in a VM. This keeps your computer tidy and Valkyrie consistent across various machines.\n\n   Folders in the VM are mounted from your computer via NFS to make developing with your favorite editor easy (we like Vim).\n\n   Automatic domain resolution using vagrant-dns on Macs or Avahi on Linux systems (we haven't tested this on Windows, sorry). Each site you create on Valkyrie will get an automatically resolving domain name which keeps you from needing to hack your /etc/hosts file.\n\n   Drush extensions to make all kinds of common development tasks easy.\n*   Automatic Drush aliases for running commands against sites inside the VM.\nDevelopment \n Support\n\n\nWhile provide release on drupal.org, mostly to allow for installation via: drush dl valkyrie, development happens on Github at: \nGetValkyrie\n\n\nAegir Development Environment\n\n\nA couple of scripts for easier Aegir development using Docker.\n\n\nAegir up\n (deprecated)\n\n\nThis tool is deprecated, having been replaced by \nValkyrie\n, above.\n\n\nAegir-up is a Drush extension that deploys a local instance of the Aegir Hosting System atop Vagrant and Virtualbox, for development and testing purposes.\n\n\nOthers\n\n\nSkynet\n\n\nSkynet is an experimental replacement for the Aegir Hosting System's Queue Daemon. It is written in Python using \nCement\n.\n\n\nDevShop\n\n\nDevShop is a Drupal Development Environment Manager built on Aegir.\n\n\nDevShop creates Aegir platforms and sites automatically from Git URLs. It tracks multiple Projects and allows multiple environments to be created for each Project, such as dev, test, and live. It provides tools to Pull Code, Sync Data, Commit Features, and Run Tests on these environments, and provides a dashboard with useful links and information for developers.\n\n\nAegir Pathologic Files\n\n\nA tiny Drupal Module to simplify file paths in content. This helps prevent broken images when the site directory name changes. Requires an apache rewrite rule to point /files to /sites/example.com/files, which Aegir provides by default.\n\n\nThis module is not for hostmaster, but for the sites hosted under Aegir.\n\n\nRecurly Aegir\n\n\nAutomatically manages \nAegir\n sites from another Drupal instance with \nRecurly\n subscriptions / recurring billing / e-commerce.  Communicates with an Aegir instance via \nAegir SaaS\n.\n\n\nThis Drupal 8+ module allows clients to pay for their hosted Drupal sites. When a new subscription notification from Recurly is received, a new site will be provisioned. If a subscription is \ncancelled\n or \nexpired\n, the site will be disabled. If it gets \nreactivated\n or \nre-added\n, the site will be re-enabled. Sites can be deleted after subscription expiration if not renewed.\n\n\nYour extension here?\n\n\nDevelopers:\n Please add your contributed extensions here. Pull requests welcome on \nGitHub\n.", 
            "title": "Contributed projects"
        }, 
        {
            "location": "/extend/contrib/#contributed-extensions", 
            "text": "Contributed extensions  Extensions to Hostmaster (frontend)  Included in Aegir package  Hosting CiviCRM  Hosting Git  Hosting Remote Import  Hosting Site Backup Manager  Hosting Tasks Extra    Not included in Aegir package  Aegir Cloud  Hosting Dev  Hosting DNS  Aegir Config Management  Aegir Kubernetes  Aegir Network  Aegir Reporting  Aegir Rules  Aegir Services  Aegir Site Probes  Hosting Certificate  Hosting Drulenium  Hosting Logs  Hosting Let's Encrypt  Hosting Notifications  Hosting Piwik  Hosting Site Make  Hosting Variables  Hosting Wordpress      Extensions to Provision (backend)  Provision STS    Themes  Configuration management  Development  Valkyrie  Aegir Development Environment  Aegir up (deprecated)    Others  Skynet  DevShop  Aegir Pathologic Files  Recurly Aegir    Your extension here?      Please note that the support and development status varies for these.", 
            "title": "Contributed extensions"
        }, 
        {
            "location": "/extend/contrib/#extensions-to-hostmaster-frontend", 
            "text": "Some of these ship with Aegir (the  \"golden contrib\"  suite of modules) so their features simply require enabling if desired.  For the others, manual installation is required.  Included in Aegir package  Hosting CiviCRM  Module to configure settings and cron jobs specific to CiviCRM.  Hosting Git  This is a simple module for the Aegir project that adds a 'Git pull', 'Git checkout' and 'Git clone' task for sites.  It's the successor of Hosting Site Git   Hosting Platform Git.  Hosting Remote Import  Provides a UI for fetching sites from remote Aegir servers.  Hosting Site Backup Manager  Extends the backup functionality of Aegir. It adds a tab to the site content type. The tab shows the backups and enables per backup actions (Restore, Delete and Get).  Hosting Tasks Extra  This module extends Aegir hostmaster (and drush/provision) with some additional tasks:   Revert features  Flush all caches  Rebuild registry  Run cron  Sync data (between sites)  Run DB schema updates   It also includes site functionality for:   HTTP basic authentication  Generating and showing Drush aliases   Not included in Aegir package  Aegir Cloud  Aegir Cloud allows Aegir to create servers directly in cloud hosting providers like IBM Softlayer and Amazon Web Services.  Hosting Dev  This is a suite of tools to enable smoother development using Aegir. It is currently simply a port of the hosting_reinstall module to Aegir 3.  Hosting DNS  DNS server integration for Aegir, previously included in core.  Aegir Config Management  This module provides config-export and config-import commands for Aegir.  Aegir Kubernetes  This module adds  Kubernetes  support by allowing for hosting of any  containerized  application (via  Docker  for now) with resource definition files.  Aegir Network  Allow inter-communication between Aegir servers (to address the \"smart nodes\" use case). The point is to centralize information to facilitate management of multiple servers.  Aegir Reporting  This module provides a reporting framework. It builds atop the  Aegir Monitoring API  to report on the health of hosted sites. It ships with some basic probes, but is intended to be extended, as with  Aegir Site Audit .  Aegir Rules  Provides integration with  the Rules module  to enable actions on various triggers.  Related to  Hosting Notifications .  Aegir Services  Aims to be a one-stop shop for all Web services functionality offered within Aegir. It allows for remote site management via the  Services  framework.  The Aegir SaaS sub-module sets up a fully functional endpoint (via the base module's API) allowing for remote administration of sites, notably cloning existing sites, for software-as-a-service (SaaS) / site-factory Aegir set-ups. It fully configures a service endpoint providing common parameters for cloning as configured in the module's settings. Using the API's task resource, sites can also be disabled, enabled, deleted, and have any other task performed on them supported by your Aegir installation. See  the module's README  for more information.  Aegir Site Probes  This module fetches information from sites for use in other hosting modules.  Hosting Certificate  SSL certificate handling as a Hosting Service. A prototype to restyle SSL handling in Aegir.  Hosting Drulenium  This module adds  Drulenium  tasks to be performed on an Aegir managed site.  Hosting Logs  This is a simple module for the Aegir project that adds a 'Logs' tab to sites and platforms. Showing Apache error, Git commit and watchdog logs.  Hosting Let's Encrypt  This module replaces self-generated Aegir certificates with Let's Encrypt ones.  Hosting Notifications  Integrates with  the Notifications framework . This allows you to receive notifications about task execution in various formats, Email, Twitter, iPhone etc.  Related to  Aegir Rules .  Hosting Piwik  Integrates with an instance of the  Piwik analytic software package  and the  Drupal Piwik module .  Hosting Site Make  Allows a site to have its modules built from a makefile in the sites directory.  Hosting Variables  Allows you to set arbitrary custom Drupal variables for each site, such as site name and slogan.  These variables will be put in settings.php so can't be overriden (or changed) through the site interface.  Hosting Wordpress  Module to manage WordPress sites. It aims to support the main Aegir functionality, such as installation, upgrade, migration and backups.", 
            "title": "Extensions to Hostmaster (frontend)"
        }, 
        {
            "location": "/extend/contrib/#extensions-to-provision-backend", 
            "text": "Starting from Aegir 7.x-3.x the Drush component can be included in a 'drush' directory in the same git repository as the hosting module.  Therefore this list will be shorter then for previous versions.  Provision STS  Adds the Strict Transport Security header to hosts that require SSL.", 
            "title": "Extensions to Provision (backend)"
        }, 
        {
            "location": "/extend/contrib/#themes", 
            "text": "Saeven  Eldir . (The default theme)  Bara", 
            "title": "Themes"
        }, 
        {
            "location": "/extend/contrib/#configuration-management", 
            "text": "Those projects allow you to manage Aegir instance(s) through a configaration management tool.   Aegir Puppet module  Drush Puppet module  Aegir3 Chef Cookbook  Ansible role  Aegir Ansible", 
            "title": "Configuration management"
        }, 
        {
            "location": "/extend/contrib/#development", 
            "text": "Valkyrie  Valkyrie is an opinionated development stack that makes features/git based Drupal development easy.  Features include:    Everything is wrapped up neatly in a VM. This keeps your computer tidy and Valkyrie consistent across various machines.    Folders in the VM are mounted from your computer via NFS to make developing with your favorite editor easy (we like Vim).    Automatic domain resolution using vagrant-dns on Macs or Avahi on Linux systems (we haven't tested this on Windows, sorry). Each site you create on Valkyrie will get an automatically resolving domain name which keeps you from needing to hack your /etc/hosts file.    Drush extensions to make all kinds of common development tasks easy.\n*   Automatic Drush aliases for running commands against sites inside the VM.\nDevelopment   Support  While provide release on drupal.org, mostly to allow for installation via: drush dl valkyrie, development happens on Github at:  GetValkyrie  Aegir Development Environment  A couple of scripts for easier Aegir development using Docker.  Aegir up  (deprecated)  This tool is deprecated, having been replaced by  Valkyrie , above.  Aegir-up is a Drush extension that deploys a local instance of the Aegir Hosting System atop Vagrant and Virtualbox, for development and testing purposes.", 
            "title": "Development"
        }, 
        {
            "location": "/extend/contrib/#others", 
            "text": "Skynet  Skynet is an experimental replacement for the Aegir Hosting System's Queue Daemon. It is written in Python using  Cement .  DevShop  DevShop is a Drupal Development Environment Manager built on Aegir.  DevShop creates Aegir platforms and sites automatically from Git URLs. It tracks multiple Projects and allows multiple environments to be created for each Project, such as dev, test, and live. It provides tools to Pull Code, Sync Data, Commit Features, and Run Tests on these environments, and provides a dashboard with useful links and information for developers.  Aegir Pathologic Files  A tiny Drupal Module to simplify file paths in content. This helps prevent broken images when the site directory name changes. Requires an apache rewrite rule to point /files to /sites/example.com/files, which Aegir provides by default.  This module is not for hostmaster, but for the sites hosted under Aegir.  Recurly Aegir  Automatically manages  Aegir  sites from another Drupal instance with  Recurly  subscriptions / recurring billing / e-commerce.  Communicates with an Aegir instance via  Aegir SaaS .  This Drupal 8+ module allows clients to pay for their hosted Drupal sites. When a new subscription notification from Recurly is received, a new site will be provisioned. If a subscription is  cancelled  or  expired , the site will be disabled. If it gets  reactivated  or  re-added , the site will be re-enabled. Sites can be deleted after subscription expiration if not renewed.", 
            "title": "Others"
        }, 
        {
            "location": "/extend/contrib/#your-extension-here", 
            "text": "Developers:  Please add your contributed extensions here. Pull requests welcome on  GitHub .", 
            "title": "Your extension here?"
        }, 
        {
            "location": "/develop/", 
            "text": "Developing Aegir\n\n\n\n\n\n\nDeveloping Aegir\n\n\nAegir API documentation\n\n\nExample modules\n\n\nAegir Development Environment\n\n\n\n\n\n\n\n\n\n\nThis devoted to teaching you how to extend and develop for Aegir to encourage contributions to the Aegir project or to help you modify Aegir to suit your unique use case.\n\n\nAegir is built on Drupal and Drush, as well as implementing it's own API. As such, a familiarity with the \nDrupal API\n and the \nDrush API\n is pretty much assumed.\n\n\nThis section documents methods and best-practices for hacking on Aegir core or building a \ncontrib module\n. You should probably become familiar with the \nExtending Aegir\n section before proceeding much further.\n\n\nAegir API documentation\n\n\nThe inline documentation is a good start to understand the various hooks and internals that allow you to extend and customize Aegir to your liking. The documentation is rendered on \napi.aegirproject.org\n daily.\n\n\nSee also the \ndeveloper cheat sheet\n.\n\n\nPlease submit any suggestions or bug reports to the Aegir Project issue queue of your choice, under the \"documentation\" component.\n\n\nExample modules\n\n\nAegir ships with a set of example modules that illustrate how to extend Aegir in various ways. These are fully functional, and are often used as a template to get the required boilerplate in place.\n\n\nIn addition, the \nContributed Extensions\n page documents all known Aegir extensions in existence. Reading through some of these modules' code is a good way to familiarize yourself with how the Aegir API works.\n\n\nAegir Development Environment\n\n\nThere are multiple ways you can setup a development environment to get working on Aegir itself.\n\n\nSee \nContributed Extensions - Development\n for the options.", 
            "title": "Developing Aegir"
        }, 
        {
            "location": "/develop/#developing-aegir", 
            "text": "Developing Aegir  Aegir API documentation  Example modules  Aegir Development Environment      This devoted to teaching you how to extend and develop for Aegir to encourage contributions to the Aegir project or to help you modify Aegir to suit your unique use case.  Aegir is built on Drupal and Drush, as well as implementing it's own API. As such, a familiarity with the  Drupal API  and the  Drush API  is pretty much assumed.  This section documents methods and best-practices for hacking on Aegir core or building a  contrib module . You should probably become familiar with the  Extending Aegir  section before proceeding much further.", 
            "title": "Developing Aegir"
        }, 
        {
            "location": "/develop/#aegir-api-documentation", 
            "text": "The inline documentation is a good start to understand the various hooks and internals that allow you to extend and customize Aegir to your liking. The documentation is rendered on  api.aegirproject.org  daily.  See also the  developer cheat sheet .  Please submit any suggestions or bug reports to the Aegir Project issue queue of your choice, under the \"documentation\" component.", 
            "title": "Aegir API documentation"
        }, 
        {
            "location": "/develop/#example-modules", 
            "text": "Aegir ships with a set of example modules that illustrate how to extend Aegir in various ways. These are fully functional, and are often used as a template to get the required boilerplate in place.  In addition, the  Contributed Extensions  page documents all known Aegir extensions in existence. Reading through some of these modules' code is a good way to familiarize yourself with how the Aegir API works.", 
            "title": "Example modules"
        }, 
        {
            "location": "/develop/#aegir-development-environment", 
            "text": "There are multiple ways you can setup a development environment to get working on Aegir itself.  See  Contributed Extensions - Development  for the options.", 
            "title": "Aegir Development Environment"
        }, 
        {
            "location": "/develop/terminology/", 
            "text": "Design \n Terminology\n\n\n\n\n\n\nDesign \n Terminology\n\n\nTerminology\n\n\nFront End\n\n\nEntities\n\n\nClient\n\n\nSite\n\n\nTask\n\n\nPlatform\n\n\nServer\n\n\nService\n\n\nService type\n\n\nPackage\n\n\nPackage Release\n\n\nPackage Instance\n\n\nTask types\n\n\nVerify platform\n\n\nImport sites\n\n\nInstall site\n\n\nSync site\n\n\nBackup site\n\n\nRestore backup\n\n\nDisable site\n\n\nEnable site\n\n\n\n\n\n\nQueues\n\n\nTask Queue\n\n\nCron Queue\n\n\nBackup Queue\n\n\nStatistics Queue\n\n\n\n\n\n\nBack End\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis page documents many of the different terms used when referring to components of the Aegir Hosting System, and how the different entities relate to each other.\n\n\nTerminology\n\n\nFront End\n\n\nThe user interface used to administrate your sites. The front end is provided by the Hostmaster install profile, and the Hosting contributed module. It defines a complete Drupal based data model for managing the various aspects of your installation.\n\n\nEntities\n\n\nThese entities are used primarily in the front end to manage the configuration and data. Upon calling the back end, the system breaks down the properties of these entities to be passed as options for the command line, so the back end only has a flat data structure to work with. During this process, all relationships are automatically retrieved, making it a one step process for the developer.\n\n\nClient\n\n\nThe person or group that runs the site. This information is usually required for billing and access purposes, to assure that only certain people are able to view the information for sites they run. If you do not intend on having more than one client access the system, you will not need to create any additional clients for your purposes.\n\n\nSite\n\n\nAn instance of a hosted site. It contains information relating to the site, most notably the domain name, database server and platform it is being published on. A site may also have several aliases for additional domains the site needs to be accessible on.\n\n\nTask\n\n\nThe mechanism whereby Hostmaster keeps track of all changes that occur to the system. Each task acts as a command for the back end, and contains a full log of all changes that have occurred. If a task should fail, the administrator will be notified with an explanation of exactly what went wrong, and how to fix it.\n\n\nPlatform\n\n\nThe file system location on a specific web server on which to publish sites.  Multiple platforms can co-exist on the same web server, and need to do so for upgrades to be managed, as this is accomplished by moving the site to a platform hosting an updated release. Platforms are most commonly built for specific releases of Drupal.\n\n\nServer\n\n\nThe server that provides various services.\n\n\nService\n\n\nThe service that runs on the server. This might be HTTP or a Database server.  Each web server hosts one or more platforms, which act as publishing points for the hosted sites. If you are not intending to use Hostmaster in a distributed fashion, you will not need to create additional web servers for your purposes. Most web servers and database servers are on the same machine, but for performance reasons external database servers might be required. It is not uncommon for one database server to be shared amongst all site instances. If you are not intending to use an external database server, or multiple database servers, you will not need to create any additional database servers for your purposes.\n\n\nService type\n\n\nThe type of service that runs on the server. In the example of 'HTTP' as a service, a service \ntype\n is Apache or Nginx, for example. MySQL is a \ntype\n of service 'Database'.\n\n\nPackage\n\n\nAn installable component for a site. Hostmaster keeps tracks of all the modules, themes and install profiles installed across your entire network.  These packages most commonly link to their project on drupal.org, but might not in the case of custom modules. Users are not able to create nodes of this type, as they are generated automatically during verify and sync tasks.\n\n\nPackage Release\n\n\nThe release of a specific package. Each package on your network has at least one installed release, and each platform (including Drupal itself) may have several releases installed across your network.\n\n\nPackage Instance\n\n\nWhere a package release has been installed. A package release may be installed in multiple places on a platform, and sites may have access to multiple versions of packages. This entity also tracks which modules are enabled, and what version of the schema (if any) they have installed.\n\n\n\n\nTask types\n\n\nThese are \"hosting commands\" that the server can accomplish. These are mapped to back end commands by the task queue processor.\n\n\nVerify platform\n\n\nVerify that a platform is correctly installed. Automatically created when new platforms are added, to ensure that they are capable of having new sites installed on them. Operates on: platforms\n\n\nImport sites\n\n\nImport existing sites onto a platform. Operates on: platforms\n\n\nInstall site\n\n\nInstall a new site. This is automatically generated when a site node is created. Operates on: sites\n\n\nSync site\n\n\nSynchronize changes to the site record with the back end. Automatically generated on editing of the site node. Operates on: sites\n\n\nBackup site\n\n\nGenerate a backup of an existing site. This backup contains everything needed to run the site. Operates on: sites\n\n\nRestore backup\n\n\nRestore a site to a previous backed up version. Operates on: sites\n\n\nDisable site\n\n\nDisable a running site. This is commonly used in the case of non-payment\nfrom clients. Operates on: sites\n\n\nEnable site\n\n\nEnable a disabled site. The opposite of Disable. Operates on: sites\n\n\nThis is an incomplete list, and will be updated as more tasks are added\n\n\nQueues\n\n\nThe front end uses and maintains several queues, which are then processed through the drush.php hosting dispatch command. More queues can be added by optional contributed modules, and are often used to provide regularly scheduled back end commands, such as backing up sites.\n\n\nTask Queue\n\n\nThe primary and most important queue. Whenever a change is made to the data set, the front end creates a \"Task\" node. These task relate to such things as installing new sites, regenerating the configuration files of sites, verifying that a platform has been correctly configured and importing existing sites on a newly added platform.\n\n\nCron Queue\n\n\nThis queue is used to manage the regular execution of the cron process required by most sites. It is configurable with a frequency you want all the sites to be cronned within. This is commonly 1 hour, but might be higher or lower. Higher frequency will cause higher system load. This command will iterate through all enabled sites, and batch the cron calls, based on how many sites are available, and how frequently it is running.\n\n\nBackup Queue\n\n\nThis queue operates in the same way as the cron queue, in that it iterates through all installed sites, based on a configurable frequency. This executes the same functionality as requesting a site backup through the user interface. You are able to revert back to a previous backup of your sites.\n\n\nStatistics Queue\n\n\nThis queue operates on the same mechanism as the cron queue, and alows you to retrieve statistics of your installed sites. This will retrieve such metrics as number of registered and active users, and number of posts / comments, which will then be viewable on the front end.\n\n\nBack End\n\n\nThe back end is a command line interface provided by the Provisioning Framework, of all the tasks it is capable of performing.\n\n\nIt is designed to operate separately from the front end, so that you can have multiple back ends on one or more servers.\n\n\nThe back end handles the server level configuration of the system, such as creating new databases and virtual host records and restarting the apache process for new installations to take effect.\n\n\nWhen the queues are processed by the front end, these are turned into calls to the back end, for whichever server they happen to be on. The back end communicates to the front end through a very simple mechanism, whereby it returns a serialized string containing state information and log messages / error return codes.", 
            "title": "Design and terminology"
        }, 
        {
            "location": "/develop/terminology/#design-terminology", 
            "text": "Design   Terminology  Terminology  Front End  Entities  Client  Site  Task  Platform  Server  Service  Service type  Package  Package Release  Package Instance  Task types  Verify platform  Import sites  Install site  Sync site  Backup site  Restore backup  Disable site  Enable site    Queues  Task Queue  Cron Queue  Backup Queue  Statistics Queue    Back End        This page documents many of the different terms used when referring to components of the Aegir Hosting System, and how the different entities relate to each other.", 
            "title": "Design &amp; Terminology"
        }, 
        {
            "location": "/develop/terminology/#terminology", 
            "text": "Front End  The user interface used to administrate your sites. The front end is provided by the Hostmaster install profile, and the Hosting contributed module. It defines a complete Drupal based data model for managing the various aspects of your installation.  Entities  These entities are used primarily in the front end to manage the configuration and data. Upon calling the back end, the system breaks down the properties of these entities to be passed as options for the command line, so the back end only has a flat data structure to work with. During this process, all relationships are automatically retrieved, making it a one step process for the developer.  Client  The person or group that runs the site. This information is usually required for billing and access purposes, to assure that only certain people are able to view the information for sites they run. If you do not intend on having more than one client access the system, you will not need to create any additional clients for your purposes.  Site  An instance of a hosted site. It contains information relating to the site, most notably the domain name, database server and platform it is being published on. A site may also have several aliases for additional domains the site needs to be accessible on.  Task  The mechanism whereby Hostmaster keeps track of all changes that occur to the system. Each task acts as a command for the back end, and contains a full log of all changes that have occurred. If a task should fail, the administrator will be notified with an explanation of exactly what went wrong, and how to fix it.  Platform  The file system location on a specific web server on which to publish sites.  Multiple platforms can co-exist on the same web server, and need to do so for upgrades to be managed, as this is accomplished by moving the site to a platform hosting an updated release. Platforms are most commonly built for specific releases of Drupal.  Server  The server that provides various services.  Service  The service that runs on the server. This might be HTTP or a Database server.  Each web server hosts one or more platforms, which act as publishing points for the hosted sites. If you are not intending to use Hostmaster in a distributed fashion, you will not need to create additional web servers for your purposes. Most web servers and database servers are on the same machine, but for performance reasons external database servers might be required. It is not uncommon for one database server to be shared amongst all site instances. If you are not intending to use an external database server, or multiple database servers, you will not need to create any additional database servers for your purposes.  Service type  The type of service that runs on the server. In the example of 'HTTP' as a service, a service  type  is Apache or Nginx, for example. MySQL is a  type  of service 'Database'.  Package  An installable component for a site. Hostmaster keeps tracks of all the modules, themes and install profiles installed across your entire network.  These packages most commonly link to their project on drupal.org, but might not in the case of custom modules. Users are not able to create nodes of this type, as they are generated automatically during verify and sync tasks.  Package Release  The release of a specific package. Each package on your network has at least one installed release, and each platform (including Drupal itself) may have several releases installed across your network.  Package Instance  Where a package release has been installed. A package release may be installed in multiple places on a platform, and sites may have access to multiple versions of packages. This entity also tracks which modules are enabled, and what version of the schema (if any) they have installed.   Task types  These are \"hosting commands\" that the server can accomplish. These are mapped to back end commands by the task queue processor.  Verify platform  Verify that a platform is correctly installed. Automatically created when new platforms are added, to ensure that they are capable of having new sites installed on them. Operates on: platforms  Import sites  Import existing sites onto a platform. Operates on: platforms  Install site  Install a new site. This is automatically generated when a site node is created. Operates on: sites  Sync site  Synchronize changes to the site record with the back end. Automatically generated on editing of the site node. Operates on: sites  Backup site  Generate a backup of an existing site. This backup contains everything needed to run the site. Operates on: sites  Restore backup  Restore a site to a previous backed up version. Operates on: sites  Disable site  Disable a running site. This is commonly used in the case of non-payment\nfrom clients. Operates on: sites  Enable site  Enable a disabled site. The opposite of Disable. Operates on: sites  This is an incomplete list, and will be updated as more tasks are added  Queues  The front end uses and maintains several queues, which are then processed through the drush.php hosting dispatch command. More queues can be added by optional contributed modules, and are often used to provide regularly scheduled back end commands, such as backing up sites.  Task Queue  The primary and most important queue. Whenever a change is made to the data set, the front end creates a \"Task\" node. These task relate to such things as installing new sites, regenerating the configuration files of sites, verifying that a platform has been correctly configured and importing existing sites on a newly added platform.  Cron Queue  This queue is used to manage the regular execution of the cron process required by most sites. It is configurable with a frequency you want all the sites to be cronned within. This is commonly 1 hour, but might be higher or lower. Higher frequency will cause higher system load. This command will iterate through all enabled sites, and batch the cron calls, based on how many sites are available, and how frequently it is running.  Backup Queue  This queue operates in the same way as the cron queue, in that it iterates through all installed sites, based on a configurable frequency. This executes the same functionality as requesting a site backup through the user interface. You are able to revert back to a previous backup of your sites.  Statistics Queue  This queue operates on the same mechanism as the cron queue, and alows you to retrieve statistics of your installed sites. This will retrieve such metrics as number of registered and active users, and number of posts / comments, which will then be viewable on the front end.  Back End  The back end is a command line interface provided by the Provisioning Framework, of all the tasks it is capable of performing.  It is designed to operate separately from the front end, so that you can have multiple back ends on one or more servers.  The back end handles the server level configuration of the system, such as creating new databases and virtual host records and restarting the apache process for new installations to take effect.  When the queues are processed by the front end, these are turned into calls to the back end, for whichever server they happen to be on. The back end communicates to the front end through a very simple mechanism, whereby it returns a serialized string containing state information and log messages / error return codes.", 
            "title": "Terminology"
        }, 
        {
            "location": "/develop/architecture/", 
            "text": "Aegir Architecture\n\n\n\n\n\n\nAegir Architecture\n\n\nSchematic\n\n\nFile system structure\n\n\nScripts and configuration files\n\n\nHostmaster platform and Aegir site\n\n\nDeployed Platforms\n\n\nOwnership and permissions\n\n\nFixing ownership and permissions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSchematic\n\n\nBelow is a representation of the Aegir architecture in schematic form. It is intented to complement the section further down on the typical \nfile system structure\n on an Aegir installation.\n\n\n\nClick on image for a larger version.\n\n\nFile system structure\n\n\nThis section documents the typical file system structure on an Aegir installation.  It is intended to complement the \nAegir architecture schematic\n above. The following paths are based on an Aegir 3.x installation and assume that all directories are within the \n/var/aegir\n folder.\n\n\nScripts and configuration files\n\n\n\n\n\n\n\n\nPath\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n~/backups\n\n\nSite-specific tar balls containing a database dump and folders under \npath/to/platform/sites/example.com\n\n\n\n\n\n\n~/config\n\n\n\n\n\n\n\n\n~/config/server_master\n\n\n\n\n\n\n\n\n~/config/server_master/apache\n\n\n\n\n\n\n\n\n~/config/server_master/apache/conf.d\n\n\nnon-aegir or non-drupal virtual hosts files\n\n\n\n\n\n\n~/config/server_master/apache/platform.d\n\n\ncontains \n.htaccess\n information for each aegir platform\n\n\n\n\n\n\n~/config/server_master/apache/vhost.d\n\n\nApache virtual host files for Aegir sites\n\n\n\n\n\n\n~/config/server_master/apache/vhost.d/aegir.example.com\n\n\nVirtual host file for Aegir front-end site - specifies path to platform directory and site database settings (so that database credentials are not exposed directly in site \nsettings.php\n file)\n\n\n\n\n\n\n~/config/server_master/apache/vhost.d/site-1.com\n\n\nvirtual host file for deployed web site\n\n\n\n\n\n\n~/config/server_master/apache/vhost.d/site-2.com\n\n\n\n\n\n\n\n\n~/config/server_master/apache/vhost.d/site-3.com\n\n\n\n\n\n\n\n\n~/.drush\n\n\nDrush extensions and server, platform and site aliases\n\n\n\n\n\n\n~/.drush/provision\n\n\nProvision folder\n\n\n\n\n\n\n~/.drush/server_master.alias.drushrc.php\n\n\nSettings for the master server where the main aegir database, hosting platform and aegir site reside\n\n\n\n\n\n\n~/.drush/platform_hostmaster.alias.drushrc.php\n\n\nSettings for the hostmaster platform on which the aegir site is based\n\n\n\n\n\n\n~/.drush/hostmaster.alias.drushrc.php\n\n\nSettings for the Aegir front-end site\n\n\n\n\n\n\n~/.drush/platform_platform1.alias.drushrc.php\n\n\nSettings for platform1 on which site-1.com is based\n\n\n\n\n\n\n~/.drush/site-1.com.alias.drushrc.php\n\n\nSettings for site-1.com\n\n\n\n\n\n\n\n\nHostmaster platform and Aegir site\n\n\n\n\n\n\n\n\nPath\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n~/hostmaster-3.x\n\n\nHostmaster platform\n\n\n\n\n\n\n~/hostmaster-3.x/profiles\n\n\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/default\n\n\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/\n\n\nhostmaster profile\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/modules\n\n\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/modules/contrib/\n\n\nContrib modules bundled with the distribution\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/modules/aegir\n\n\nAegir core and \"Golden Contrib\" modules\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/modules/aegir/hosting\n\n\nHosting module \u2013 provides core Aegir front-end functionality.\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/themes/\n\n\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/themes/eldir\n\n\nEldir theme \u2013 provides Aegir front end look and feel\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/hostmaster.profile\n\n\nProfile file \u2013 used in site provisioning to configure a drupal database\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/build-hostmaster.make\n\n\nStub Drush make file \u2013 used to build a working Aegir platform. Includes core and drupal-org.make\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/drupal-org.make\n\n\ndrupal.org distribution packaging Drush make file \u2013 used to build the tarballs hosted on drupal.org. Includes Aegir core and \"Golden Contrib\" modules, Eldir and contrib modules.\n\n\n\n\n\n\n~/hostmaster-3.x/profiles/hostmaster/hostmaster.make\n\n\nDrush make file \u2013 This makefile includes drupal-org.make, but overrides the versions to ensure we build from development code instead of the tagged releases.\n\n\n\n\n\n\n~/hostmaster-3.x/sites/\n\n\n\n\n\n\n\n\n~/hostmaster-3.x/sites/aegir.example.com\n\n\nAegir front-end site folders\n\n\n\n\n\n\n\n\nDeployed Platforms\n\n\n\n\n\n\n\n\nPath\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n~/platforms/\n\n\nTechnically, the \n~/platforms\n directory is optional. It is however used by convention to separate deployed platforms from directories for scripts, config files and hostmaster platform.\n\n\n\n\n\n\n~/platforms/platform-1/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/profiles/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/profiles/default/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/profiles/custom-profile/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/profiles/custom-profile/modules/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/profiles/custom-profile/themes/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/profiles/custom-profile/custom.profile\n\n\nProfile file \u2013 used in site provisioning to configure a drupal database\n\n\n\n\n\n\n~/platforms/platform-1/profiles/custom-profile/custom.make\n\n\nDrush Make file \u2013 used to include modules, themes, libraries etc. from various sources\n\n\n\n\n\n\n~/platforms/platform-1/modules/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/themes/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/sites/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-1.com/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-1.com/modules/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-1.com/themes/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-1.com/files/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-1.com/settings.php\n\n\nSite-specific drupal configuration file\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-1.com/drushrc.php\n\n\nSite- and Aegir-specific configuration file\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-2.com/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-3.com/\n\n\n\n\n\n\n\n\n~/platforms/platform-1/sites/site-n.com/\n\n\n\n\n\n\n\n\n~/platforms/platform-2/\n\n\n\n\n\n\n\n\n~/platforms/platform-3/\n\n\n\n\n\n\n\n\n~/platforms/platform-n/\n\n\n\n\n\n\n\n\n\n\nOwnership and permissions\n\n\nFrom the platform root (e.g. \n~/platforms/drupal-7.41/\n):\n\n\n\n\n\n\n\n\nPath\n\n\nOwnership\n\n\nPermissions\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n./*/\n\n\naegir:aegir\n\n\ndrwxr-xr-x\n\n\nThe webserver has no business writing or moving \ndirectories\n in the Drupal codebase.\n\n\n\n\n\n\n./*\n\n\naegir:aegir\n\n\n-rw-r--r--\n\n\nThe webserver has no business writing or moving \nfiles\n in the Drupal codebase.\n\n\n\n\n\n\n./sites/all/drush/drushrc.php\n\n\naegir:aegir\n\n\n-r--------\n\n\nWeb server shouldn't be able to read drushrc.php, it's not a component of the Drupal platform.\n\n\n\n\n\n\n\n\nInside \n./sites/example.com\n:\n\n\n\n\n\n\n\n\nPath\n\n\nOwnership\n\n\nPermissions\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\ndrushrc.php\n\n\naegir:aegir\n\n\n-r--------\n\n\nWeb server shouldn't be able to read drushrc.php, it's not a component of the Drupal site.\n\n\n\n\n\n\nsettings.php\n\n\naegir:www-data\n\n\n-r--r-----\n\n\nWeb server can read this file, but otherwise tight control over this file which can contain sensitive information.\n\n\n\n\n\n\nlibraries/\n\n\naegir:aegir\n\n\ndrwxrwsr-x\n\n\n\n\n\n\n\n\nlibraries/*\n\n\naegir:aegir\n\n\n-rw-r--r--\n\n\nBecause of the sticky bit (s) on the parent directory, each child directory will inherit attributes of the parent. The attribute that is consistently inherited is the group. This means that a developer in the \"aegir\" group can add files which will retain the \"aegir\" group ownership of the parent\n\n\n\n\n\n\nmodules/\n\n\naegir:aegir\n\n\ndrwxrwsr-x\n\n\n\n\n\n\n\n\nmodules/*\n\n\naegir:aegir\n\n\n-rw-r--r--\n\n\nSame as \nlibraries/*\n\n\n\n\n\n\nthemes/\n\n\naegir:aegir\n\n\ndrwxrwsr-x\n\n\n\n\n\n\n\n\nthemes/*\n\n\naegir:aegir\n\n\n-rw-r--r--\n\n\nSame as \nlibraries/*\n\n\n\n\n\n\nfiles/\n\n\naegir:www-data\n\n\ndrwxrws---\n\n\nAegir sets these directories with a sticky bit (s) so that under certain conditions new folders and files will inherit parent permissions. There are only a few cases where this happens though.\n\n\n\n\n\n\nfiles/*/\n\n\nwww-data:www-data\n\n\ndrwxr-sr-x\n\n\nThe permissions shown here are how \ndirectories\n created by www-data will look. When verifying a platform, Aegir won't \"correct\" these files and directories to match the parents.  See the next section if you need to fix file ownership or permissions.\n\n\n\n\n\n\nfiles/*\n\n\nwww-data:www-data\n\n\n-rw-r--r--\n\n\nThe permissions shown here are how \nfiles\n created by www-data will look. When verifying a platform, Aegir won't \"correct\" these files and directories to match the parents. See the next section if you need to fix file ownership or permissions.\n\n\n\n\n\n\nprivate/\n\n\naegir:www-data\n\n\ndrwxrws---\n\n\nSame as \nfiles/\n\n\n\n\n\n\nprivate/*/\n\n\nwww-data:www-data\n\n\ndrwxr-sr-x\n\n\nSame as \nfiles/*/\n\n\n\n\n\n\nprivate/*\n\n\nwww-data:www-data\n\n\n-rw-r--r--\n\n\nSame as \nfiles/*\n\n\n\n\n\n\n\n\nFixing ownership and permissions\n\n\nIf you have trouble with permissions/ownership on the \nfiles/\n or \nprivate/\n directories, you can safely run the following commands (in this case on the files directory):\n\n\n# chown -R aegir:www-data /path/to/site/files/*\n# chmod -R 775 /path/to/site/files/*", 
            "title": "Architecture"
        }, 
        {
            "location": "/develop/architecture/#aegir-architecture", 
            "text": "Aegir Architecture  Schematic  File system structure  Scripts and configuration files  Hostmaster platform and Aegir site  Deployed Platforms  Ownership and permissions  Fixing ownership and permissions", 
            "title": "Aegir Architecture"
        }, 
        {
            "location": "/develop/architecture/#schematic", 
            "text": "Below is a representation of the Aegir architecture in schematic form. It is intented to complement the section further down on the typical  file system structure  on an Aegir installation.  \nClick on image for a larger version.", 
            "title": "Schematic"
        }, 
        {
            "location": "/develop/architecture/#file-system-structure", 
            "text": "This section documents the typical file system structure on an Aegir installation.  It is intended to complement the  Aegir architecture schematic  above. The following paths are based on an Aegir 3.x installation and assume that all directories are within the  /var/aegir  folder.  Scripts and configuration files     Path  Notes      ~/backups  Site-specific tar balls containing a database dump and folders under  path/to/platform/sites/example.com    ~/config     ~/config/server_master     ~/config/server_master/apache     ~/config/server_master/apache/conf.d  non-aegir or non-drupal virtual hosts files    ~/config/server_master/apache/platform.d  contains  .htaccess  information for each aegir platform    ~/config/server_master/apache/vhost.d  Apache virtual host files for Aegir sites    ~/config/server_master/apache/vhost.d/aegir.example.com  Virtual host file for Aegir front-end site - specifies path to platform directory and site database settings (so that database credentials are not exposed directly in site  settings.php  file)    ~/config/server_master/apache/vhost.d/site-1.com  virtual host file for deployed web site    ~/config/server_master/apache/vhost.d/site-2.com     ~/config/server_master/apache/vhost.d/site-3.com     ~/.drush  Drush extensions and server, platform and site aliases    ~/.drush/provision  Provision folder    ~/.drush/server_master.alias.drushrc.php  Settings for the master server where the main aegir database, hosting platform and aegir site reside    ~/.drush/platform_hostmaster.alias.drushrc.php  Settings for the hostmaster platform on which the aegir site is based    ~/.drush/hostmaster.alias.drushrc.php  Settings for the Aegir front-end site    ~/.drush/platform_platform1.alias.drushrc.php  Settings for platform1 on which site-1.com is based    ~/.drush/site-1.com.alias.drushrc.php  Settings for site-1.com     Hostmaster platform and Aegir site     Path  Notes      ~/hostmaster-3.x  Hostmaster platform    ~/hostmaster-3.x/profiles     ~/hostmaster-3.x/profiles/default     ~/hostmaster-3.x/profiles/hostmaster/  hostmaster profile    ~/hostmaster-3.x/profiles/hostmaster/modules     ~/hostmaster-3.x/profiles/hostmaster/modules/contrib/  Contrib modules bundled with the distribution    ~/hostmaster-3.x/profiles/hostmaster/modules/aegir  Aegir core and \"Golden Contrib\" modules    ~/hostmaster-3.x/profiles/hostmaster/modules/aegir/hosting  Hosting module \u2013 provides core Aegir front-end functionality.    ~/hostmaster-3.x/profiles/hostmaster/themes/     ~/hostmaster-3.x/profiles/hostmaster/themes/eldir  Eldir theme \u2013 provides Aegir front end look and feel    ~/hostmaster-3.x/profiles/hostmaster/hostmaster.profile  Profile file \u2013 used in site provisioning to configure a drupal database    ~/hostmaster-3.x/profiles/hostmaster/build-hostmaster.make  Stub Drush make file \u2013 used to build a working Aegir platform. Includes core and drupal-org.make    ~/hostmaster-3.x/profiles/hostmaster/drupal-org.make  drupal.org distribution packaging Drush make file \u2013 used to build the tarballs hosted on drupal.org. Includes Aegir core and \"Golden Contrib\" modules, Eldir and contrib modules.    ~/hostmaster-3.x/profiles/hostmaster/hostmaster.make  Drush make file \u2013 This makefile includes drupal-org.make, but overrides the versions to ensure we build from development code instead of the tagged releases.    ~/hostmaster-3.x/sites/     ~/hostmaster-3.x/sites/aegir.example.com  Aegir front-end site folders     Deployed Platforms     Path  Notes      ~/platforms/  Technically, the  ~/platforms  directory is optional. It is however used by convention to separate deployed platforms from directories for scripts, config files and hostmaster platform.    ~/platforms/platform-1/     ~/platforms/platform-1/profiles/     ~/platforms/platform-1/profiles/default/     ~/platforms/platform-1/profiles/custom-profile/     ~/platforms/platform-1/profiles/custom-profile/modules/     ~/platforms/platform-1/profiles/custom-profile/themes/     ~/platforms/platform-1/profiles/custom-profile/custom.profile  Profile file \u2013 used in site provisioning to configure a drupal database    ~/platforms/platform-1/profiles/custom-profile/custom.make  Drush Make file \u2013 used to include modules, themes, libraries etc. from various sources    ~/platforms/platform-1/modules/     ~/platforms/platform-1/themes/     ~/platforms/platform-1/sites/     ~/platforms/platform-1/sites/site-1.com/     ~/platforms/platform-1/sites/site-1.com/modules/     ~/platforms/platform-1/sites/site-1.com/themes/     ~/platforms/platform-1/sites/site-1.com/files/     ~/platforms/platform-1/sites/site-1.com/settings.php  Site-specific drupal configuration file    ~/platforms/platform-1/sites/site-1.com/drushrc.php  Site- and Aegir-specific configuration file    ~/platforms/platform-1/sites/site-2.com/     ~/platforms/platform-1/sites/site-3.com/     ~/platforms/platform-1/sites/site-n.com/     ~/platforms/platform-2/     ~/platforms/platform-3/     ~/platforms/platform-n/      Ownership and permissions  From the platform root (e.g.  ~/platforms/drupal-7.41/ ):     Path  Ownership  Permissions  Notes      ./*/  aegir:aegir  drwxr-xr-x  The webserver has no business writing or moving  directories  in the Drupal codebase.    ./*  aegir:aegir  -rw-r--r--  The webserver has no business writing or moving  files  in the Drupal codebase.    ./sites/all/drush/drushrc.php  aegir:aegir  -r--------  Web server shouldn't be able to read drushrc.php, it's not a component of the Drupal platform.     Inside  ./sites/example.com :     Path  Ownership  Permissions  Notes      drushrc.php  aegir:aegir  -r--------  Web server shouldn't be able to read drushrc.php, it's not a component of the Drupal site.    settings.php  aegir:www-data  -r--r-----  Web server can read this file, but otherwise tight control over this file which can contain sensitive information.    libraries/  aegir:aegir  drwxrwsr-x     libraries/*  aegir:aegir  -rw-r--r--  Because of the sticky bit (s) on the parent directory, each child directory will inherit attributes of the parent. The attribute that is consistently inherited is the group. This means that a developer in the \"aegir\" group can add files which will retain the \"aegir\" group ownership of the parent    modules/  aegir:aegir  drwxrwsr-x     modules/*  aegir:aegir  -rw-r--r--  Same as  libraries/*    themes/  aegir:aegir  drwxrwsr-x     themes/*  aegir:aegir  -rw-r--r--  Same as  libraries/*    files/  aegir:www-data  drwxrws---  Aegir sets these directories with a sticky bit (s) so that under certain conditions new folders and files will inherit parent permissions. There are only a few cases where this happens though.    files/*/  www-data:www-data  drwxr-sr-x  The permissions shown here are how  directories  created by www-data will look. When verifying a platform, Aegir won't \"correct\" these files and directories to match the parents.  See the next section if you need to fix file ownership or permissions.    files/*  www-data:www-data  -rw-r--r--  The permissions shown here are how  files  created by www-data will look. When verifying a platform, Aegir won't \"correct\" these files and directories to match the parents. See the next section if you need to fix file ownership or permissions.    private/  aegir:www-data  drwxrws---  Same as  files/    private/*/  www-data:www-data  drwxr-sr-x  Same as  files/*/    private/*  www-data:www-data  -rw-r--r--  Same as  files/*     Fixing ownership and permissions  If you have trouble with permissions/ownership on the  files/  or  private/  directories, you can safely run the following commands (in this case on the files directory):  # chown -R aegir:www-data /path/to/site/files/*\n# chmod -R 775 /path/to/site/files/*", 
            "title": "File system structure"
        }, 
        {
            "location": "/develop/provision/", 
            "text": "Provision - the Aegir backend\n\n\n\n\n\n\nProvision - the Aegir backend\n\n\nCreating or updating named contexts\n\n\nDeleting named contexts\n\n\nUsing named contexts\n\n\nContext types\n\n\nServer contexts\n\n\nPlatform contexts\n\n\nSite contexts\n\n\n\n\n\n\nImporting contexts into the front end\n\n\n\n\n\n\n\n\n\n\nEach of the major entities managed by Aegir (namely servers, platforms and sites) are represented by nodes in the front end, which in turn generate Drush 'named contexts' in the backend. Named contexts are similar to what Drush refers to as 'site aliases', but are more structured and cover more than just sites.\n\n\nWhenever you create or edit a node on the front end, Aegir will create or update the named context on the backend, and any tasks run on the entity will be run on that named context, ie:\n\n\n$ drush @server_master provision-verify\n\n\n\nAll of the actual work related to managing your system is done by the backend, and the front end primarily serves as a way to manage these aliases. You can very easily use the backend on it's own if you so choose.\n\n\nCreating or updating named contexts\n\n\nContexts are created and updated through the provision-save command. The format of the command is:\n\n\n$ drush provision-save @contextname --context_type=type --property=value --other_property=value\n\n\n\nEvery time this command is called, it will update the named context and only modify the properties that have been specified. It is important to note that the provision-save command never has a site alias or context name before the command, but requires you to specify which context you are modifying as the first argument.\n\n\nDeleting named contexts\n\n\nTo delete an existing named context, you simply need to pass the '--delete' option to the provision-save command, i.e.:\n\n\n$ drush provision-save @contextname --delete\n\n\n\nUsing named contexts\n\n\nNamed contexts are used in 3 ways in provision: as aliases, arguments or options:\n\n\n\n\nAliases\n: Aliases appear to the left of the drush command, and are making use of the Drush 'site alias' functionality.\n\n\n\n\n    # Verify the site represented by @example.com\n    $ drush @example.com provision-verify\n\n\n\n\n\n\nOptions\n: Certain options to provision-save require you to pass the alias of another named context of a specific type, and uses this information to build relationships between objects.\n\n\n\n\n    # generate a new site context in the directory represented by @platform_test\n    $ drush provision-save @example.com --context_type=site --uri=example.com --platform=@platform_example\n\n\n\n\n\n\nArguments\n: A select few provision commands require you to pass the alias of another specific type of named context as an argument.\n\n\n\n\n    # Migrate the site to the platform represented by @platform_newversion\n    $ drush @example.com provision-migrate @platform_newversion\n\n\n\n\nContext types\n\n\nThere are (currently) 3 different entities represented as named contexts in the aegir backend. You determine which type of entity you are working with by specifying the context_type option to the provision-save command. You dont need to specify it every time, but it is best to always explicitly specify it, just in case.\n\n\nBecause the namespace of all contexts is shared, they each have different naming conventions to avoid collisions. There are certain named contexts of each type which are always present in the system.\n\n\nEach of the context types have different semantics and properties, and certain provision commands will only operate on certain types of entities.\n\n\nServer contexts\n\n\nNaming guideline\n: Server with a hostname of server.example.com becomes @server_serverexamplecom.\n\n\nSpecial contexts\n: @server_master always refers to the local server where aegir is installed.\n\n\nRequired properties\n:\n\n\n\n\nremote_host\n: This should always be set to the FQDN of the server being managed.\n\n\n\n\nServices\n: Servers are the only entities which have services associated to them. Services are things such as http, db or dns.\n\n\nEach service may select one service_type, which chooses which implementation to load for this service. Examples of these are the 'mysql' implementation of the 'db' service, or the 'apache' and 'apache_ssl' implementations of the http service.\n\n\nAll services that are found by Aegir are enabled, but unless you specifically select one of the implementations, the 'null' service type is loaded. Each service type has additional required properties and values that can be passed to it, but describing them all is outside of the scope of this document.\n\n\nImportant commands\n:\n\n\n\n\nprovision-verify\n: Verify that the configuration is correct and fix them if they aren't.\n\n\n\n\n    # Enable a new remote server hosting sites with apache on port 8080\n    $ drush provision-save @server_webexamplecom --context_type=server \\\n    --remote_host=web.example.com \\\n    --http_service_type='apache' \\\n    --http_port=8080\n\n    # Verify that the settings are correct\n    $ drush @server_webexamplecom provision-verify --debug\n\n\n\n\nPlatform contexts\n\n\nPlatforms are how aegir refers to a specific copy of Drupal checked out on a file system. Platforms are hosted on web servers and sites are hosted on platforms.\n\n\nNaming guideline\n: A platform in /var/aegir/codebase-6.1 becomes @platform_codebase61 , but this is not strictly enforced. We only use that naming convention when we do not have a node representing the platform available. If a node is available, we use the title of the node to generate the context name.\n\n\nBasically, you can name your platform anything but it should still be prefixed with 'platform_'.\n\n\nSpecial contexts\n: There are no special contexts per se, but the hostmaster-install and hostmaster-migrate commands generate aliases for the hostmaster platform in the form of '@platform_hostmaster$version'. If the front end is present, one or more of these contexts are usually available too.\n\n\nRequired properties\n:\n\n\n\n\nroot\n: The absolute path to a Drupal directory, generally in the form * \n/var/aegir/platformdir\n.\n\n\n\n\nOptional properties\n:\n\n\n\n\nweb_server\n: The name of a server context that provides the http service. The default is to @server_master makefile : The absolute path or url to a drush make makefile. If the root directory does not exist and the makefile property does, provision will call drush_make to attempt to create the directory.\n\n\n\n\nImportant commands\n:\n\n\n\n\nprovision-verify\n: This will ensure that all the files are the correct permissions, and are all present on the correct remote servers. Also rebuild package database. Run this command whenever the contents of the platform changes.\n\n\n\n\n    # New open atrium platform in /var/aegir/atrium-head that will be built from a\n    # remotely hosted\n    # makefile and published on an external web server.\n    $ drush provision-save @platform_atriumhead --context_type=platform \\\n    --root=/var/aegir/atrium-head \\\n    --web_server=@server_webexamplecom \\\n    --makefile='http://omega8.cc/dev/atrium_stub.make.txt'\n\n    # Verify settings and generate the directory with drush make, pushing to the\n    # remote server after.\n    $ drush provision-verify @platform_atriumhead\n\n\n\n\nSite contexts\n\n\nNaming guidelines\n: A site with the url 'site1.example.com' becomes @site1.example.com. The context name is always the url.\n\n\nSpecial contexts\n: @hostmaster and @hm always refer to the site running the hostmaster front end. This helps with debugging and makes it more easily scriptable.\n\n\nRequired properties\n:\n\n\n\n\nuri\n: The FQDN of the site. should match the context name.\n\n\nplatform\n: The name of a platform context that the site will be hosted on.\n\n\n\n\nOptional properties\n:\n\n\n\n\ndb_server\n: The name of a server context which provides the db server. defaults to @server_master.\n\n\nclient_email\n: The email address to send the login information for the admin user.\n\n\nprofile\n: The installation profile the site is running. Dependent on the platform supporting it.\n\n\nlanguage\n: The ISO language code of the site. Dependent on the platform and profile supporting it.\n\n\n\n\nImportant commands\n:\n\n\nAlmost all of the provision commands are related to sites, so this is just the very core of them. Check Drush help for more.\n\n\n\n\nprovision-install\n: Install the site represented by the context. Just creating the context doesn't install the site yet.\n\n\n\n\n    # Set up a new site to be installed on the open atrium platform (hosted on a\n    # remote server), using an external database server, with the openatrium profile\n    # and localize it into spanish.\n    $ drush provision-save @atrium.example.com\n    --context_type=site \\\n    --uri=atrium.example.com \\\n    --platform=@platform_atriumhead \\\n    --db_server=@server_dbexamplecom \\\n    --client_email=client@example.com \\\n    --profile=openatrium \\\n    --language=es\n\n    # Install the new site to the specifications requested above.\n    drush @atrium.example.com provision-install --debug\n\n\n\n\n\n\nprovision-verify\n: Verify the site is running correctly, and ensure the files are all published to the correct servers.\n\n\n\n\n    # Verify the site to make sure everything is ok.\n    $drush @atrium.example.com provision-verify --debug\n\n\n\n\n\n\nprovision-delete\n: Delete the site and all it's information. The context will still be there.\n\n\n\n\nImporting contexts into the front end\n\n\nHostmaster provides a drush command which will attempt to generate or updates front end nodes that match your defined contexts. To import a context into the front end, just run :\n\n\n$ drush @hostmaster hosting-import @contextname\n\n\n\nThis will import that context, and every context it depends on into the front end. This is useful for integration with other systems such as the puppet-aegir module for Puppet, which can add newly configured servers directly to the front end.", 
            "title": "Provision"
        }, 
        {
            "location": "/develop/provision/#provision-the-aegir-backend", 
            "text": "Provision - the Aegir backend  Creating or updating named contexts  Deleting named contexts  Using named contexts  Context types  Server contexts  Platform contexts  Site contexts    Importing contexts into the front end      Each of the major entities managed by Aegir (namely servers, platforms and sites) are represented by nodes in the front end, which in turn generate Drush 'named contexts' in the backend. Named contexts are similar to what Drush refers to as 'site aliases', but are more structured and cover more than just sites.  Whenever you create or edit a node on the front end, Aegir will create or update the named context on the backend, and any tasks run on the entity will be run on that named context, ie:  $ drush @server_master provision-verify  All of the actual work related to managing your system is done by the backend, and the front end primarily serves as a way to manage these aliases. You can very easily use the backend on it's own if you so choose.", 
            "title": "Provision - the Aegir backend"
        }, 
        {
            "location": "/develop/provision/#creating-or-updating-named-contexts", 
            "text": "Contexts are created and updated through the provision-save command. The format of the command is:  $ drush provision-save @contextname --context_type=type --property=value --other_property=value  Every time this command is called, it will update the named context and only modify the properties that have been specified. It is important to note that the provision-save command never has a site alias or context name before the command, but requires you to specify which context you are modifying as the first argument.", 
            "title": "Creating or updating named contexts"
        }, 
        {
            "location": "/develop/provision/#deleting-named-contexts", 
            "text": "To delete an existing named context, you simply need to pass the '--delete' option to the provision-save command, i.e.:  $ drush provision-save @contextname --delete", 
            "title": "Deleting named contexts"
        }, 
        {
            "location": "/develop/provision/#using-named-contexts", 
            "text": "Named contexts are used in 3 ways in provision: as aliases, arguments or options:   Aliases : Aliases appear to the left of the drush command, and are making use of the Drush 'site alias' functionality.       # Verify the site represented by @example.com\n    $ drush @example.com provision-verify   Options : Certain options to provision-save require you to pass the alias of another named context of a specific type, and uses this information to build relationships between objects.       # generate a new site context in the directory represented by @platform_test\n    $ drush provision-save @example.com --context_type=site --uri=example.com --platform=@platform_example   Arguments : A select few provision commands require you to pass the alias of another specific type of named context as an argument.       # Migrate the site to the platform represented by @platform_newversion\n    $ drush @example.com provision-migrate @platform_newversion", 
            "title": "Using named contexts"
        }, 
        {
            "location": "/develop/provision/#context-types", 
            "text": "There are (currently) 3 different entities represented as named contexts in the aegir backend. You determine which type of entity you are working with by specifying the context_type option to the provision-save command. You dont need to specify it every time, but it is best to always explicitly specify it, just in case.  Because the namespace of all contexts is shared, they each have different naming conventions to avoid collisions. There are certain named contexts of each type which are always present in the system.  Each of the context types have different semantics and properties, and certain provision commands will only operate on certain types of entities.  Server contexts  Naming guideline : Server with a hostname of server.example.com becomes @server_serverexamplecom.  Special contexts : @server_master always refers to the local server where aegir is installed.  Required properties :   remote_host : This should always be set to the FQDN of the server being managed.   Services : Servers are the only entities which have services associated to them. Services are things such as http, db or dns.  Each service may select one service_type, which chooses which implementation to load for this service. Examples of these are the 'mysql' implementation of the 'db' service, or the 'apache' and 'apache_ssl' implementations of the http service.  All services that are found by Aegir are enabled, but unless you specifically select one of the implementations, the 'null' service type is loaded. Each service type has additional required properties and values that can be passed to it, but describing them all is outside of the scope of this document.  Important commands :   provision-verify : Verify that the configuration is correct and fix them if they aren't.       # Enable a new remote server hosting sites with apache on port 8080\n    $ drush provision-save @server_webexamplecom --context_type=server \\\n    --remote_host=web.example.com \\\n    --http_service_type='apache' \\\n    --http_port=8080\n\n    # Verify that the settings are correct\n    $ drush @server_webexamplecom provision-verify --debug  Platform contexts  Platforms are how aegir refers to a specific copy of Drupal checked out on a file system. Platforms are hosted on web servers and sites are hosted on platforms.  Naming guideline : A platform in /var/aegir/codebase-6.1 becomes @platform_codebase61 , but this is not strictly enforced. We only use that naming convention when we do not have a node representing the platform available. If a node is available, we use the title of the node to generate the context name.  Basically, you can name your platform anything but it should still be prefixed with 'platform_'.  Special contexts : There are no special contexts per se, but the hostmaster-install and hostmaster-migrate commands generate aliases for the hostmaster platform in the form of '@platform_hostmaster$version'. If the front end is present, one or more of these contexts are usually available too.  Required properties :   root : The absolute path to a Drupal directory, generally in the form *  /var/aegir/platformdir .   Optional properties :   web_server : The name of a server context that provides the http service. The default is to @server_master makefile : The absolute path or url to a drush make makefile. If the root directory does not exist and the makefile property does, provision will call drush_make to attempt to create the directory.   Important commands :   provision-verify : This will ensure that all the files are the correct permissions, and are all present on the correct remote servers. Also rebuild package database. Run this command whenever the contents of the platform changes.       # New open atrium platform in /var/aegir/atrium-head that will be built from a\n    # remotely hosted\n    # makefile and published on an external web server.\n    $ drush provision-save @platform_atriumhead --context_type=platform \\\n    --root=/var/aegir/atrium-head \\\n    --web_server=@server_webexamplecom \\\n    --makefile='http://omega8.cc/dev/atrium_stub.make.txt'\n\n    # Verify settings and generate the directory with drush make, pushing to the\n    # remote server after.\n    $ drush provision-verify @platform_atriumhead  Site contexts  Naming guidelines : A site with the url 'site1.example.com' becomes @site1.example.com. The context name is always the url.  Special contexts : @hostmaster and @hm always refer to the site running the hostmaster front end. This helps with debugging and makes it more easily scriptable.  Required properties :   uri : The FQDN of the site. should match the context name.  platform : The name of a platform context that the site will be hosted on.   Optional properties :   db_server : The name of a server context which provides the db server. defaults to @server_master.  client_email : The email address to send the login information for the admin user.  profile : The installation profile the site is running. Dependent on the platform supporting it.  language : The ISO language code of the site. Dependent on the platform and profile supporting it.   Important commands :  Almost all of the provision commands are related to sites, so this is just the very core of them. Check Drush help for more.   provision-install : Install the site represented by the context. Just creating the context doesn't install the site yet.       # Set up a new site to be installed on the open atrium platform (hosted on a\n    # remote server), using an external database server, with the openatrium profile\n    # and localize it into spanish.\n    $ drush provision-save @atrium.example.com\n    --context_type=site \\\n    --uri=atrium.example.com \\\n    --platform=@platform_atriumhead \\\n    --db_server=@server_dbexamplecom \\\n    --client_email=client@example.com \\\n    --profile=openatrium \\\n    --language=es\n\n    # Install the new site to the specifications requested above.\n    drush @atrium.example.com provision-install --debug   provision-verify : Verify the site is running correctly, and ensure the files are all published to the correct servers.       # Verify the site to make sure everything is ok.\n    $drush @atrium.example.com provision-verify --debug   provision-delete : Delete the site and all it's information. The context will still be there.", 
            "title": "Context types"
        }, 
        {
            "location": "/develop/provision/#importing-contexts-into-the-front-end", 
            "text": "Hostmaster provides a drush command which will attempt to generate or updates front end nodes that match your defined contexts. To import a context into the front end, just run :  $ drush @hostmaster hosting-import @contextname  This will import that context, and every context it depends on into the front end. This is useful for integration with other systems such as the puppet-aegir module for Puppet, which can add newly configured servers directly to the front end.", 
            "title": "Importing contexts into the front end"
        }, 
        {
            "location": "/develop/provision/contexts/", 
            "text": "Provision Contexts\n\n\n\n\n\n\nProvision Contexts\n\n\nPurpose\n\n\nDrush contexts\n\n\n\n\n\n\nImplementation\n\n\nUsing contexts in your code\n\n\nLoading a named context\n\n\nSubcontexts\n\n\n\n\n\n\nProperties and services\n\n\n\n\n\n\n\n\n\n\nPurpose\n\n\nContexts are simply a way for Aegir to store certain pieces of information that it thinks may be useful later. They are named so that they can be referred to easily.\n\n\nEvery server, platform and site in Aegir has an associated context. Each one of these contexts stores information about the associated entity. So, for example, a site context stores the base URI of the site. Later, the code responsible for informing the web server of the site's existence can look at this context and determine the requested URI.\n\n\nIn theory contexts allow most of the back-end commands in Aegir to operate just on the name of the context. This is an important concept: the alternative would be to try to guess everything that the command being invoked might want to know and pass it in as a series of command line arguments.\n\n\nFor example, the command that Aegir uses to clone a site just needs to be given the context of the site to clone and the platform to clone it to. From there the code can work out where the destination platform actually is, what servers it needs to talk to, and with what credentials.\n\n\nDrush contexts\n\n\nNote that Drush also has the concept of a context, but this is not to be confused with Aegir contexts which are different. Aegir contexts are closer to, and stored as, Drush 'aliases'.\n\n\nImplementation\n\n\nContexts are always named to start with a '@' symbol, except for in the filename of the file in which they are stored.\n\n\nContexts in Aegir are stored as a simple array of data in a file within the backend of Aegir. However this array of data is accessed and modified with a set of objects and accessors. Here is an example of what a context file looks like:\n\n\n?php\n$aliases['hostmaster'] = array (\n  'context_type' =\n 'site',\n  'platform' =\n '@platform_hostmaster',\n  'server' =\n '@server_master',\n  'db_server' =\n '@server_localhost',\n  'uri' =\n 'aegir.example.com',\n  'root' =\n '/var/aegir/hostmaster-0.4-beta2',\n  'site_path' =\n '/var/aegir/hostmaster-0.4-beta2/sites/aegir.example.com',\n  'site_enabled' =\n true,\n  'language' =\n 'en',\n  'client_email' =\n 'aegir@example.com',\n  'aliases' =\n array (),\n  'redirection' =\n false,\n  'profile' =\n 'hostmaster',\n);\n\n\n\nThese files are stored in the \n/var/aegir/.drush\n directory on the master Aegir server.\n\n\nIn the above example we can see the properties of the context, like the 'uri' of the site, and the 'profile' that the site is running.\n\n\nThere are also a number of more interesting properties in the example, note the 'db_server' property, which has a value that is another context. We shall see later that these properties are special, and allow developers to easily access functions of the 'db_server' without needing to care which db server they are talking to.\n\n\nContexts are used within Drush commands as objects, which subclass provision_context. This allows much more flexibility and cleverness, though can make them very confusing to use sometimes! As a developer you will only need to worry about the context objects, as Aegir handles storing them in the files for you. But it is important to note that each context must be representable in a flat text file (or be prepared to do some serious leg-work) by that I mean you probably don't want to be storing massive amounts of relational data in them, use a database for that!\n\n\nUsing contexts in your code\n\n\nGetting the current context is really easy, just call the 'd' accessor:\n\n\n?php\n  $current_context = d();\n?\n\n\n\n\nWhat the current context is will depend on the drush command that is running and the context that was passed into that drush command. For example if you ran a site verify task, then the caller would name a site context, and thus initially calls to d() would return the site context. The values of the context are accessible as simple properties of this object.  So, suppose a verify task is started for the main Aegir frontend, which has a context that is always called '@hostmaster', the drush command invocation would look like this:\n\n\n$ drush @hostmaster provision-verify\n\n\n\nThen the drush command for provision-verify could do this:\n\n\n?php\nfunction drush_provision_verify() {\n  $context = d();\n  drush_print('Passed context of type: ' . d()-\ntype);\n}\n?\n\n\n\n\nWhich would print the type of the context passed to the verify command, in this case 'site'.\n\n\nThe \nd()\n accessor is not to be feared! It is used all over the place in Aegir and if you're not sure what context you're going to get then you can always print d()-\nname and you'll get the name of the context that you're dealing with.\n\n\nLoading a named context\n\n\nYou can pass an optional argument to the d accessor of the name of the context that you want. So, if you feel compelled to access a property about the main Aegir frontend site anywhere you can do this:\n\n\n?php\n  $hostmaster_context = d('@hostmaster');\n?\n\n\n\n\nThough most of the time you'll be dealing with the current context, and contexts that it references.\n\n\nSubcontexts\n\n\nHere's an example context:\n\n\n?php\n$aliases['hostmaster'] = array (\n  'context_type' =\n 'site',\n  'platform' =\n '@platform_hostmaster',\n  'server' =\n '@server_master',\n  'db_server' =\n '@server_localhost',\n  'uri' =\n 'aegir.example.com',\n  'root' =\n '/var/aegir/hostmaster-0.4-beta2',\n  'site_path' =\n '/var/aegir/hostmaster-0.4-beta2/sites/aegir.example.com',\n  'site_enabled' =\n true,\n  'language' =\n 'en',\n  'client_email' =\n 'aegir@example.com',\n  'aliases' =\n array (),\n  'redirection' =\n false,\n  'profile' =\n 'hostmaster',\n);\n\n\n\nNotice that some of the properties are the name of contexts, such as 'db_server' which has a value of '@server_localhost'.\n\n\nSuppose now that I have some code that wants to get a property of the db_server associated with the @hostmaster context, I can simply do this:\n\n\n?php\n  $db_server_context = d('@hostmaster')-\ndb_server;\n  // $db_server_context is now a fully populated context object, not the string\n  // '@server_localhost'\n  drush_print('DB server on port: . $db_server_context-\ndb_port);\n?\n\n\n\n\nThe provisionContext object will return full context objects for properties that store the names of other contexts. The how and why of determining which to return as strings and which to return as a context object will be covered later. It is entirely possible to have the name of a context stored as a property in a context, that when accessed returns the string, rather than the context named in the string.\n\n\nProperties and services\n\n\nServices are the way in which new properties are added to contexts, in fact if you wish to indicate you want to store additional properties in a context, this must be done by a service. There is no other way to store data in a context.  One might assume that you can just ask provision to save an additional value on a context, but this will not work, and you'll probably get very frustrated indeed!\n\n\nFor example, the \nprovisionService_pdo\n service adds a 'master_db' property to the server context, it does this in a method thus:\n\n\n?php\n  function init_server() {\n    parent::init_server();\n    $this-\nserver-\nsetProperty('master_db');\n  }\n?\n\n\n\n\nThis means that the 'master_db' property can now be set in a \nprovison-save\n Drush command, and will be persisted when the context is saved.\n\n\nA service may also define properties on the context as actually representing another context, so that you may access that subcontext directly. You can see an example of using this subcontext in the \nImplementation section\n above, but the an example of how you let provision know that a property name is not just a string, but a named context is with a method on the service:\n\n\n?php\n  /**\n   * Register the http handler for platforms, based on the web_server option.\n   */\n  static function subscribe_platform($context) {\n    $context-\nsetProperty('web_server', '@server_master');\n    $context-\nis_oid('web_server');\n    $context-\nservice_subscribe('http',\n    $context-\nweb_server-\nname);\n  }\n?\n\n\n\n\nHere the \nprovisionService_http\n service is being asked to 'subscribe' to a platform, it sets a property on the context, as above, but additionally uses the \nis_oid()\n method to indicate that the property is a named context. It then uses that immediately when it gets the name of the web_server context: \n$context-\nweb_server-\nname\n. We'll worry about what 'subscribing' to a platform means later.", 
            "title": "Contexts"
        }, 
        {
            "location": "/develop/provision/contexts/#provision-contexts", 
            "text": "Provision Contexts  Purpose  Drush contexts    Implementation  Using contexts in your code  Loading a named context  Subcontexts    Properties and services", 
            "title": "Provision Contexts"
        }, 
        {
            "location": "/develop/provision/contexts/#purpose", 
            "text": "Contexts are simply a way for Aegir to store certain pieces of information that it thinks may be useful later. They are named so that they can be referred to easily.  Every server, platform and site in Aegir has an associated context. Each one of these contexts stores information about the associated entity. So, for example, a site context stores the base URI of the site. Later, the code responsible for informing the web server of the site's existence can look at this context and determine the requested URI.  In theory contexts allow most of the back-end commands in Aegir to operate just on the name of the context. This is an important concept: the alternative would be to try to guess everything that the command being invoked might want to know and pass it in as a series of command line arguments.  For example, the command that Aegir uses to clone a site just needs to be given the context of the site to clone and the platform to clone it to. From there the code can work out where the destination platform actually is, what servers it needs to talk to, and with what credentials.  Drush contexts  Note that Drush also has the concept of a context, but this is not to be confused with Aegir contexts which are different. Aegir contexts are closer to, and stored as, Drush 'aliases'.", 
            "title": "Purpose"
        }, 
        {
            "location": "/develop/provision/contexts/#implementation", 
            "text": "Contexts are always named to start with a '@' symbol, except for in the filename of the file in which they are stored.  Contexts in Aegir are stored as a simple array of data in a file within the backend of Aegir. However this array of data is accessed and modified with a set of objects and accessors. Here is an example of what a context file looks like:  ?php\n$aliases['hostmaster'] = array (\n  'context_type' =  'site',\n  'platform' =  '@platform_hostmaster',\n  'server' =  '@server_master',\n  'db_server' =  '@server_localhost',\n  'uri' =  'aegir.example.com',\n  'root' =  '/var/aegir/hostmaster-0.4-beta2',\n  'site_path' =  '/var/aegir/hostmaster-0.4-beta2/sites/aegir.example.com',\n  'site_enabled' =  true,\n  'language' =  'en',\n  'client_email' =  'aegir@example.com',\n  'aliases' =  array (),\n  'redirection' =  false,\n  'profile' =  'hostmaster',\n);  These files are stored in the  /var/aegir/.drush  directory on the master Aegir server.  In the above example we can see the properties of the context, like the 'uri' of the site, and the 'profile' that the site is running.  There are also a number of more interesting properties in the example, note the 'db_server' property, which has a value that is another context. We shall see later that these properties are special, and allow developers to easily access functions of the 'db_server' without needing to care which db server they are talking to.  Contexts are used within Drush commands as objects, which subclass provision_context. This allows much more flexibility and cleverness, though can make them very confusing to use sometimes! As a developer you will only need to worry about the context objects, as Aegir handles storing them in the files for you. But it is important to note that each context must be representable in a flat text file (or be prepared to do some serious leg-work) by that I mean you probably don't want to be storing massive amounts of relational data in them, use a database for that!", 
            "title": "Implementation"
        }, 
        {
            "location": "/develop/provision/contexts/#using-contexts-in-your-code", 
            "text": "Getting the current context is really easy, just call the 'd' accessor:  ?php\n  $current_context = d();\n?   What the current context is will depend on the drush command that is running and the context that was passed into that drush command. For example if you ran a site verify task, then the caller would name a site context, and thus initially calls to d() would return the site context. The values of the context are accessible as simple properties of this object.  So, suppose a verify task is started for the main Aegir frontend, which has a context that is always called '@hostmaster', the drush command invocation would look like this:  $ drush @hostmaster provision-verify  Then the drush command for provision-verify could do this:  ?php\nfunction drush_provision_verify() {\n  $context = d();\n  drush_print('Passed context of type: ' . d()- type);\n}\n?   Which would print the type of the context passed to the verify command, in this case 'site'.  The  d()  accessor is not to be feared! It is used all over the place in Aegir and if you're not sure what context you're going to get then you can always print d()- name and you'll get the name of the context that you're dealing with.  Loading a named context  You can pass an optional argument to the d accessor of the name of the context that you want. So, if you feel compelled to access a property about the main Aegir frontend site anywhere you can do this:  ?php\n  $hostmaster_context = d('@hostmaster');\n?   Though most of the time you'll be dealing with the current context, and contexts that it references.  Subcontexts  Here's an example context:  ?php\n$aliases['hostmaster'] = array (\n  'context_type' =  'site',\n  'platform' =  '@platform_hostmaster',\n  'server' =  '@server_master',\n  'db_server' =  '@server_localhost',\n  'uri' =  'aegir.example.com',\n  'root' =  '/var/aegir/hostmaster-0.4-beta2',\n  'site_path' =  '/var/aegir/hostmaster-0.4-beta2/sites/aegir.example.com',\n  'site_enabled' =  true,\n  'language' =  'en',\n  'client_email' =  'aegir@example.com',\n  'aliases' =  array (),\n  'redirection' =  false,\n  'profile' =  'hostmaster',\n);  Notice that some of the properties are the name of contexts, such as 'db_server' which has a value of '@server_localhost'.  Suppose now that I have some code that wants to get a property of the db_server associated with the @hostmaster context, I can simply do this:  ?php\n  $db_server_context = d('@hostmaster')- db_server;\n  // $db_server_context is now a fully populated context object, not the string\n  // '@server_localhost'\n  drush_print('DB server on port: . $db_server_context- db_port);\n?   The provisionContext object will return full context objects for properties that store the names of other contexts. The how and why of determining which to return as strings and which to return as a context object will be covered later. It is entirely possible to have the name of a context stored as a property in a context, that when accessed returns the string, rather than the context named in the string.", 
            "title": "Using contexts in your code"
        }, 
        {
            "location": "/develop/provision/contexts/#properties-and-services", 
            "text": "Services are the way in which new properties are added to contexts, in fact if you wish to indicate you want to store additional properties in a context, this must be done by a service. There is no other way to store data in a context.  One might assume that you can just ask provision to save an additional value on a context, but this will not work, and you'll probably get very frustrated indeed!  For example, the  provisionService_pdo  service adds a 'master_db' property to the server context, it does this in a method thus:  ?php\n  function init_server() {\n    parent::init_server();\n    $this- server- setProperty('master_db');\n  }\n?   This means that the 'master_db' property can now be set in a  provison-save  Drush command, and will be persisted when the context is saved.  A service may also define properties on the context as actually representing another context, so that you may access that subcontext directly. You can see an example of using this subcontext in the  Implementation section  above, but the an example of how you let provision know that a property name is not just a string, but a named context is with a method on the service:  ?php\n  /**\n   * Register the http handler for platforms, based on the web_server option.\n   */\n  static function subscribe_platform($context) {\n    $context- setProperty('web_server', '@server_master');\n    $context- is_oid('web_server');\n    $context- service_subscribe('http',\n    $context- web_server- name);\n  }\n?   Here the  provisionService_http  service is being asked to 'subscribe' to a platform, it sets a property on the context, as above, but additionally uses the  is_oid()  method to indicate that the property is a named context. It then uses that immediately when it gets the name of the web_server context:  $context- web_server- name . We'll worry about what 'subscribing' to a platform means later.", 
            "title": "Properties and services"
        }, 
        {
            "location": "/develop/repositories/", 
            "text": "Git Repositories\n\n\nAegir consists of a number of components each living in their own Git repository.\n\n\nTo make thinks more interresting (or complex) we also have these spread over \nDrupal.org\n, \nGitHub\n and \nGitLab.com\n.\n\n\nThis document is intended to give some guidelines as to what should go where. It's intended for Aegir core, but we welcome any contributed project to follow. Just to have some consistency.\n\n\n\n\nDrupal.org is the canonical repository for the stable branches and releases.\n\n\nIssues should be on Drupal.org\n\n\nFeature branches can best be pushed to GitHub to facilitate testing with Travis.\n\n\nPull Requests on GitHub are very welcome, please just add a link to them in an issue on Drupal.org.\n\n\n\n\nBranch naming\n\n\n7.x-3.x is the main branch for all the core projects. This follows the Drupal default.\n\n\nFeature branches can best be prefixed with 'feature/' resulting in 'feature/[issue number]-some-change'. Pushing them to GitHub and creating a PR for it lets us test the results with Travis.\nThease feature branches don't have to be pushed to D.o, and can be removed after being merged.\n\n\nPull requests\n\n\n\n\nWhen a PR is not ready you can prefix the title with: \n[WIP]\n.", 
            "title": "Projects repositories"
        }, 
        {
            "location": "/develop/repositories/#git-repositories", 
            "text": "Aegir consists of a number of components each living in their own Git repository.  To make thinks more interresting (or complex) we also have these spread over  Drupal.org ,  GitHub  and  GitLab.com .  This document is intended to give some guidelines as to what should go where. It's intended for Aegir core, but we welcome any contributed project to follow. Just to have some consistency.   Drupal.org is the canonical repository for the stable branches and releases.  Issues should be on Drupal.org  Feature branches can best be pushed to GitHub to facilitate testing with Travis.  Pull Requests on GitHub are very welcome, please just add a link to them in an issue on Drupal.org.   Branch naming  7.x-3.x is the main branch for all the core projects. This follows the Drupal default.  Feature branches can best be prefixed with 'feature/' resulting in 'feature/[issue number]-some-change'. Pushing them to GitHub and creating a PR for it lets us test the results with Travis.\nThease feature branches don't have to be pushed to D.o, and can be removed after being merged.  Pull requests   When a PR is not ready you can prefix the title with:  [WIP] .", 
            "title": "Git Repositories"
        }, 
        {
            "location": "/community/release-process/", 
            "text": "Release Process\n\n\n\n\n\n\nRelease Process\n\n\nThe release cycle\n\n\nSteps for a release\n\n\n1. Make sure our tests are all green\n\n\n1.1 Disable Debian dev builds\n\n\n\n\n\n\n2. Verify drupal-org.make\n\n\n3. Generating the release notes\n\n\n4. Running the release.sh script\n\n\n5. Test the manual install in Jenkins\n\n\n6. Build the Debian packages\n\n\n6.1 Fix Debian packages only\n\n\n\n\n\n\n7. Creating release nodes on Drupal.org\n\n\n8. Test the upgrade in Jenkins\n\n\n9. Manually test install and upgrade\n\n\n9.1. Quick test VMs\n\n\n\n\n\n\n10. Publish the Debian packages\n\n\n11. Publish the release notes widely\n\n\n12. Re-enable the debian dev build job\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis page aims to document our release process. It documents the release cycle, but also the steps required to make a release.\n\n\nThe release cycle\n\n\nIn general, each major Aegir release comprises a simultaneous release of all the modules that are part of the project. We generally go through several testing releases (alphas, betas \n RCs) before doing the first stable release on a branch.\n\n\n\n\nFirst an \nalpha\n is released to test new functionalities and to accomplish the goals decided in the project roadmap for that major version. Example: \n3.0-alpha1\n\n\nWhen we have covered most of the functionalities outlined in the roadmap, we push out \nbeta releases\n until no more critical issues show up. This is generally considered a \nsoft feature freeze\n. Example: \n3.0-beta1\n\n\nThen we go into \nfull feature freeze\n and release a \nfirst release candidate\n (RC). Then a stable release branch is created, and the development branch is kept opened for development for the next stable release. This is generally considered a \nsoft API freeze\n. Release candidates are made as long as critical bugs are found. Example: \n3.0-rc1\n.\n\n\nOnce the development branch has no known critical bugs, the \nstable release\n is announced. From there on only critical fixes (security, critical performance and critical bugfixes) are committed to the stable branch, and stable releases are published (without alpha/beta/RC) directly on the stable branch. The stable branch is in \nfull API freeze\n. New features are generally committed to the development branch.\n\n\n\n\nSteps for a release\n\n\n1. Make sure our tests are all green\n\n\nLook into \nJenkins\n and \nTravis\n to see if all tasks have been performed without errors since the last commit. If there is an error, fix it before the release.\n\n\n1.1 Disable Debian dev builds\n\n\nIt is important to disable the Jenkins job named \nD_aegir-debian-build-3x\n. This prevents later troubles in the \nPublish the Debian packages\n section. Otherwise a dev package may be built after the stable one, but before it has been promoted to the \ntesting\n and \nstable\n repositories. As this will have a higher version number, it would take precedence when publishing to the \nstable\n repo.\n\n\n2. Verify drupal-org.make\n\n\nIn the hostmaster project we maintain our own drupal-org.make file. Verify that drupal-org.make specifies up-to-date versions. Check that e.g. the ctools version specified is not out-dated.\n\n\n3. Generating the release notes\n\n\nWe build complete release notes for every release. Those are made up of a summary of the release, an outline of key changes, of known issues, install and upgrade instructions and a full list of bugfixes and new features.\nAs we have a number of Drupal.org projects to cover we try to centralize our release notes combined with the documentation. Published under the release notes section.\nOn Drupal.org we add a link to the version specific release notes page on the release nodes for all projects we cover.\n\n\nUsing \nGit Release Notes for Drush\n\n with \na patch for the MD format\n:\n\n\ndrush rn --baseurl=https://www.drupal.org/ --md 7.x-3.3 HEAD\n\n\nor after placing the tags\n\n\ndrush rn --baseurl=https://www.drupal.org/ --md 7.x-3.3 7.x-3.4\n\n\nThis is done for the different git projects. Changing the first line to add 'to $name'.\nThe developers then proceed to format/edit the list of fixes as well as list other significant information/changes for this release. These notes end up becoming the Release Notes for the release.\n\n\nAdd it as a new file under \nrelease-notes\n, and add a line to \nmkdocs.yml\n. And update the default page for the 'Release notes' section.\n\n\n4. Running the release.sh script\n\n\nEach time we make a new release, we run a script called \nrelease.sh\n in provision. This script does all the 'hard' work in that it doesn't forget all the very many places to edit version numbers etc of relevant documentation and other scripts. This includes install.sh.txt and upgrade.sh.txt.\n\n\nParaphrasing from the script itself:\n\n\n$ ./release.sh 3.4\n\nAegir release script\n====================\n\nThis script should only be used by the core dev team when doing an\nofficial release. If you are not one of those people, you probably\nshouldn't be running this.\n\nThis script is going to modify the configs and documentation to\nrelease 7.x-3.7.\n\nThe following operations will be done:\n 0. prompt you for a debian/changelog entry\n 1. change the makefile to download tarball\n 2. change the upgrade.sh.txt version\n 3. display the resulting diff\n 4. commit those changes to git\n 5. lay down the tag\n 6. revert the commit\n 7. clone fresh copies of hosting/hostmaster and eldir to lay down the tag\n 8. (optionally) push those changes\n 9. clone fresh copies of golden contrib to lay down the tag\n10. (optionally) push those changes\n\n ARE YOU SURE you disabled the D_aegir-debian-build-3x job in Jenkins?\n\nThe operation can be aborted before step 8. Don't forget that as\nlong as changes are not pushed upstream, this can all be reverted (see\ngit-reset(1) and git-revert(1) ).\n\n\n\n\nNotice how we just provide the Aegir release number (\n3.4\n) to the release script, not the Drupal branch (\n7.x\n), which is hardcoded in the script to remove potential confusion.\n\n\n5. Test the manual install in Jenkins\n\n\nBefore making a full release, test the release in Jenkins. To do so, start a build of the \nP_Aegir_Puppet_Module_functional_test_Aegir3-dev-Drush8\n job. Similar job exist for \nDrush7\n and \nDrush6\n\n\nIf any of these builds fail, delete the remote tags (using \ngit push origin :7.x-3.4\n, for example), fix the bugs and start again.\n\n\n6. Build the Debian packages\n\n\nBuild the package and upload to \nhttp://debian.aegirproject.org/\n. Jenkins can build and upload a Debian package for you with \nthe S_aegir-debian-official-3.x job\n. Enter the latest tag in the \nJENKINS_AEGIR_TAG\n field (e.g. \n7.x-3.4\n).\n\n\nIf you need to move the tags again, you will need to clear the testing archive using the \nR clear repo job\n, with the testing argument.\n\n\nYou can also build and upload the package yourself as explained in these \ndetailed instructions\n. We first upload the package to the \ntesting\n distribution, and it gets migrated down into \nstable\n after tests.\n\n\n6.1 Fix Debian packages only\n\n\nWhen there's a bug in the Debian packaging itself we can do a minor package version update. \nUSE WITH CARE!\n\n\ncd \nprovision source\n\n\nFix\n\ngit commit\ngit tag \nprevious version tag\n.1\ngit push --tags\n\n\n\nTODO: We also need to update version numbers(as release.sh does), but only for provision. Maybe the script can get an option for it...\n\n\nWe don't create a release node on Drupal.org, just run the \nS_aegir-debian-official-3.x job\n job. And publish as listed below.\n\n\n7. Creating release nodes on Drupal.org\n\n\nOnce the tags are pushed and release notes published, we create a release node with an excerpt of (and a link to) the release notes so that tarballs are created and issue queue versions updated.\n\n\nUsing the template (change the version number):\n\n\nSee the full release notes at: http://docs.aegirproject.org/en/3.x/release-notes/3.7/\n\n\n\n\nThis needs to be done in the \nprovision\n and \nhosting\n and (maybe) \neldir\n projects on Drupal.org.\nAnd for Golden Contrib...\n\nhosting_civicrm\n,\n\nhosting_git\n,\n\nhosting_remote_import\n,\n\nhosting_site_backup_manager\n and\n\nhosting_tasks_extra\n\n\nWAIT.... And after those are fully build... in the \nhostmaster\n project.\n\n\nNote: this could be \nautomated\n with the right stuff on Drupal.org.\n\n\n8. Test the upgrade in Jenkins\n\n\nOnce all release nodes have been created you can test the upgrade of the Debian packages by running the following Jenkins job:\n\n\n\n\n7.x-3.x-stable-to-unstable\n\n\n6.x-2.x_to_7.x-3.x_upgrade\n\n\n\n\n9. Manually test install and upgrade\n\n\nIf the Jenkins tests are disabled in one of the early steps, you should test the install and upgrade to the new version in a local VM. (Vagrant is very useful for this, the provision repo has a Vagrantfile.)\n\n\nAt this point, the unstable repo actually contains the future stable version (ie 3.1 instead of 3.1-dev-abc). Check that it actually does: \nhttp://debian.aegirproject.org/dists/unstable/main/binary-amd64/Packages\n\n\nTo test the install, just use the instructions on http://www.aegirproject.org but replace \"stable\" by \"unstable\". You should end up with a stable version.\n\n\nTo test the upgrade, create a new VM, install normally with the aegirproject.org instructions, then replace stable by unstable in your lists (/etc/apt/), and run\n\n\napt-get update \n apt-get upgrade\n\n\n\nIt should ask you if you want to upgrade Aegir3. Say yes and make sure there are no errors.\n\n\nIf you don't encounter errors in this procedure, you're good to go.\n\n\n9.1. Quick test VMs\n\n\nYou can use an Vagrant base box to quickly test the install and upgrade. Some such boxes are optimized for Aegir development and testing:\n\n\n\n\nDebian VirtualBox: \nPraxisLabs/jessie64-aegir3-dev.box\n\n\n\n\n(Please add your base box to the list if relevant.)\n\n\n10. Publish the Debian packages\n\n\nFinally, when the Debian packages are tested you will need to pull them into the stable release channel:\n\n\nWe pull to stable (since the betas), manually:\n\n\nssh jenkins@ci.aegirproject.org\nsudo su - reprepro\nreprepro@zeus:~$\nreprepro copy stable unstable aegir3\nreprepro copy stable unstable aegir3-hostmaster\nreprepro copy stable unstable aegir3-provision\nreprepro copy stable unstable aegir3-cluster-slave\n\n\n\nIf Jenkins has managed to build .debs and upload them before you've have a chance to pull them into testing/stable, you can manually remove them like so:\n\n\nreprepro remove unstable aegir3-cluster-slave aegir3 aegir3-provision aegir3-hostmaster\n\n\n\nThis should be prevented by disabling the Jenkins jobs named \nD_aegir-debian*\n before starting to push the release tags.\n\n\nYou can then re-upload the new .debs you've generated, using the '-f' (force) flag:\n\n\ndput -f aegir build-area/aegir2-provision_2.3_amd64.changes\n\n\n\nAfter doing that, you can re-run the 'copy' commands to publish the .debs to the appropriate releases.\n\n\n11. Publish the release notes widely\n\n\nOnce all this is done and the tarballs are generated, the release notes are published in:\n\n\n\n\nThe \ndocs\n\n\nUpdate the upgrade.sh link in the \ndocumentation\n\n\nThe topic of the IRC channel\n\n\nThe aegir-announce mailing list (\nannounce@lists.aegirproject.org\n.)\n\n\nTwitter as @aegirproject\n\n\nTemplate: \"#aegir 3.? released! Release notes at http://docs.aegirproject.org/en/3.x/release-notes/3.?/\"\n\n\n\n\n\n\n\n\nOptionally, blog posts on \nkoumbit.org\n, \nmig5.net\n, and elsewhere may go into further detail about significant changes, screencasts etc.\n\n\n12. Re-enable the debian dev build job\n\n\nThe job that was disabled in section 2.1.1 can now be enabled again.", 
            "title": "Release process"
        }, 
        {
            "location": "/community/release-process/#release-process", 
            "text": "Release Process  The release cycle  Steps for a release  1. Make sure our tests are all green  1.1 Disable Debian dev builds    2. Verify drupal-org.make  3. Generating the release notes  4. Running the release.sh script  5. Test the manual install in Jenkins  6. Build the Debian packages  6.1 Fix Debian packages only    7. Creating release nodes on Drupal.org  8. Test the upgrade in Jenkins  9. Manually test install and upgrade  9.1. Quick test VMs    10. Publish the Debian packages  11. Publish the release notes widely  12. Re-enable the debian dev build job        This page aims to document our release process. It documents the release cycle, but also the steps required to make a release.", 
            "title": "Release Process"
        }, 
        {
            "location": "/community/release-process/#the-release-cycle", 
            "text": "In general, each major Aegir release comprises a simultaneous release of all the modules that are part of the project. We generally go through several testing releases (alphas, betas   RCs) before doing the first stable release on a branch.   First an  alpha  is released to test new functionalities and to accomplish the goals decided in the project roadmap for that major version. Example:  3.0-alpha1  When we have covered most of the functionalities outlined in the roadmap, we push out  beta releases  until no more critical issues show up. This is generally considered a  soft feature freeze . Example:  3.0-beta1  Then we go into  full feature freeze  and release a  first release candidate  (RC). Then a stable release branch is created, and the development branch is kept opened for development for the next stable release. This is generally considered a  soft API freeze . Release candidates are made as long as critical bugs are found. Example:  3.0-rc1 .  Once the development branch has no known critical bugs, the  stable release  is announced. From there on only critical fixes (security, critical performance and critical bugfixes) are committed to the stable branch, and stable releases are published (without alpha/beta/RC) directly on the stable branch. The stable branch is in  full API freeze . New features are generally committed to the development branch.", 
            "title": "The release cycle"
        }, 
        {
            "location": "/community/release-process/#steps-for-a-release", 
            "text": "1. Make sure our tests are all green  Look into  Jenkins  and  Travis  to see if all tasks have been performed without errors since the last commit. If there is an error, fix it before the release.  1.1 Disable Debian dev builds  It is important to disable the Jenkins job named  D_aegir-debian-build-3x . This prevents later troubles in the  Publish the Debian packages  section. Otherwise a dev package may be built after the stable one, but before it has been promoted to the  testing  and  stable  repositories. As this will have a higher version number, it would take precedence when publishing to the  stable  repo.  2. Verify drupal-org.make  In the hostmaster project we maintain our own drupal-org.make file. Verify that drupal-org.make specifies up-to-date versions. Check that e.g. the ctools version specified is not out-dated.  3. Generating the release notes  We build complete release notes for every release. Those are made up of a summary of the release, an outline of key changes, of known issues, install and upgrade instructions and a full list of bugfixes and new features.\nAs we have a number of Drupal.org projects to cover we try to centralize our release notes combined with the documentation. Published under the release notes section.\nOn Drupal.org we add a link to the version specific release notes page on the release nodes for all projects we cover.  Using  Git Release Notes for Drush \n with  a patch for the MD format :  drush rn --baseurl=https://www.drupal.org/ --md 7.x-3.3 HEAD  or after placing the tags  drush rn --baseurl=https://www.drupal.org/ --md 7.x-3.3 7.x-3.4  This is done for the different git projects. Changing the first line to add 'to $name'.\nThe developers then proceed to format/edit the list of fixes as well as list other significant information/changes for this release. These notes end up becoming the Release Notes for the release.  Add it as a new file under  release-notes , and add a line to  mkdocs.yml . And update the default page for the 'Release notes' section.  4. Running the release.sh script  Each time we make a new release, we run a script called  release.sh  in provision. This script does all the 'hard' work in that it doesn't forget all the very many places to edit version numbers etc of relevant documentation and other scripts. This includes install.sh.txt and upgrade.sh.txt.  Paraphrasing from the script itself:  $ ./release.sh 3.4\n\nAegir release script\n====================\n\nThis script should only be used by the core dev team when doing an\nofficial release. If you are not one of those people, you probably\nshouldn't be running this.\n\nThis script is going to modify the configs and documentation to\nrelease 7.x-3.7.\n\nThe following operations will be done:\n 0. prompt you for a debian/changelog entry\n 1. change the makefile to download tarball\n 2. change the upgrade.sh.txt version\n 3. display the resulting diff\n 4. commit those changes to git\n 5. lay down the tag\n 6. revert the commit\n 7. clone fresh copies of hosting/hostmaster and eldir to lay down the tag\n 8. (optionally) push those changes\n 9. clone fresh copies of golden contrib to lay down the tag\n10. (optionally) push those changes\n\n ARE YOU SURE you disabled the D_aegir-debian-build-3x job in Jenkins?\n\nThe operation can be aborted before step 8. Don't forget that as\nlong as changes are not pushed upstream, this can all be reverted (see\ngit-reset(1) and git-revert(1) ).  Notice how we just provide the Aegir release number ( 3.4 ) to the release script, not the Drupal branch ( 7.x ), which is hardcoded in the script to remove potential confusion.  5. Test the manual install in Jenkins  Before making a full release, test the release in Jenkins. To do so, start a build of the  P_Aegir_Puppet_Module_functional_test_Aegir3-dev-Drush8  job. Similar job exist for  Drush7  and  Drush6  If any of these builds fail, delete the remote tags (using  git push origin :7.x-3.4 , for example), fix the bugs and start again.  6. Build the Debian packages  Build the package and upload to  http://debian.aegirproject.org/ . Jenkins can build and upload a Debian package for you with  the S_aegir-debian-official-3.x job . Enter the latest tag in the  JENKINS_AEGIR_TAG  field (e.g.  7.x-3.4 ).  If you need to move the tags again, you will need to clear the testing archive using the  R clear repo job , with the testing argument.  You can also build and upload the package yourself as explained in these  detailed instructions . We first upload the package to the  testing  distribution, and it gets migrated down into  stable  after tests.  6.1 Fix Debian packages only  When there's a bug in the Debian packaging itself we can do a minor package version update.  USE WITH CARE!  cd  provision source  Fix \ngit commit\ngit tag  previous version tag .1\ngit push --tags  TODO: We also need to update version numbers(as release.sh does), but only for provision. Maybe the script can get an option for it...  We don't create a release node on Drupal.org, just run the  S_aegir-debian-official-3.x job  job. And publish as listed below.  7. Creating release nodes on Drupal.org  Once the tags are pushed and release notes published, we create a release node with an excerpt of (and a link to) the release notes so that tarballs are created and issue queue versions updated.  Using the template (change the version number):  See the full release notes at: http://docs.aegirproject.org/en/3.x/release-notes/3.7/  This needs to be done in the  provision  and  hosting  and (maybe)  eldir  projects on Drupal.org.\nAnd for Golden Contrib... hosting_civicrm , hosting_git , hosting_remote_import , hosting_site_backup_manager  and hosting_tasks_extra  WAIT.... And after those are fully build... in the  hostmaster  project.  Note: this could be  automated  with the right stuff on Drupal.org.  8. Test the upgrade in Jenkins  Once all release nodes have been created you can test the upgrade of the Debian packages by running the following Jenkins job:   7.x-3.x-stable-to-unstable  6.x-2.x_to_7.x-3.x_upgrade   9. Manually test install and upgrade  If the Jenkins tests are disabled in one of the early steps, you should test the install and upgrade to the new version in a local VM. (Vagrant is very useful for this, the provision repo has a Vagrantfile.)  At this point, the unstable repo actually contains the future stable version (ie 3.1 instead of 3.1-dev-abc). Check that it actually does:  http://debian.aegirproject.org/dists/unstable/main/binary-amd64/Packages  To test the install, just use the instructions on http://www.aegirproject.org but replace \"stable\" by \"unstable\". You should end up with a stable version.  To test the upgrade, create a new VM, install normally with the aegirproject.org instructions, then replace stable by unstable in your lists (/etc/apt/), and run  apt-get update   apt-get upgrade  It should ask you if you want to upgrade Aegir3. Say yes and make sure there are no errors.  If you don't encounter errors in this procedure, you're good to go.  9.1. Quick test VMs  You can use an Vagrant base box to quickly test the install and upgrade. Some such boxes are optimized for Aegir development and testing:   Debian VirtualBox:  PraxisLabs/jessie64-aegir3-dev.box   (Please add your base box to the list if relevant.)  10. Publish the Debian packages  Finally, when the Debian packages are tested you will need to pull them into the stable release channel:  We pull to stable (since the betas), manually:  ssh jenkins@ci.aegirproject.org\nsudo su - reprepro\nreprepro@zeus:~$\nreprepro copy stable unstable aegir3\nreprepro copy stable unstable aegir3-hostmaster\nreprepro copy stable unstable aegir3-provision\nreprepro copy stable unstable aegir3-cluster-slave  If Jenkins has managed to build .debs and upload them before you've have a chance to pull them into testing/stable, you can manually remove them like so:  reprepro remove unstable aegir3-cluster-slave aegir3 aegir3-provision aegir3-hostmaster  This should be prevented by disabling the Jenkins jobs named  D_aegir-debian*  before starting to push the release tags.  You can then re-upload the new .debs you've generated, using the '-f' (force) flag:  dput -f aegir build-area/aegir2-provision_2.3_amd64.changes  After doing that, you can re-run the 'copy' commands to publish the .debs to the appropriate releases.  11. Publish the release notes widely  Once all this is done and the tarballs are generated, the release notes are published in:   The  docs  Update the upgrade.sh link in the  documentation  The topic of the IRC channel  The aegir-announce mailing list ( announce@lists.aegirproject.org .)  Twitter as @aegirproject  Template: \"#aegir 3.? released! Release notes at http://docs.aegirproject.org/en/3.x/release-notes/3.?/\"     Optionally, blog posts on  koumbit.org ,  mig5.net , and elsewhere may go into further detail about significant changes, screencasts etc.  12. Re-enable the debian dev build job  The job that was disabled in section 2.1.1 can now be enabled again.", 
            "title": "Steps for a release"
        }, 
        {
            "location": "/community/release-process/debian-packaging/", 
            "text": "Building and working with the debian packages\n\n\n\n\n\n\nBuilding and working with the debian packages\n\n\nBasic requirements\n\n\nBuilding a package for a new release\n\n\nBuilding a branch package\n\n\nInstalling packages manually\n\n\nDeveloping on Debian\n\n\nPackage versioning\n\n\nAdding a new uploader\n\n\nReplacing an expired key\n\n\nExtending the lifetime of a key\n\n\nHow the archive was built\n\n\n\n\n\n\n\n\n\n\nDebian is one of the main supported operating systems in Aegir. For other\nsystems, see Operating System Support. See also the following instructions:\n\n\n\n\nInstall using Debian packages\n\n\nUpgrade using Debian packages\n\n\n\n\nThe following is aimed at developers wishing to maintain their own Debian\npackages or work within the packaging framework.\n\n\nBasic requirements\n\n\nYou need the following packages to build the Aegir Debian packages:\n\n\napt-get install devscripts git-buildpackage\n\n\n\nSee also the section below on \nAdding a new uploader\n.\n\n\nBuilding a package for a new release\n\n\nAssuming we have just released 3.3, the following instructions will merge that\ncode into the \nupstream\n branch (which is used to create the Debian diff) and\nthen merged again in the debian branch (where the Debian code lives). We then\nuse \ngit-buildpackage\n to build the package and tag it, then push those changes\nback in the repository.\n\n\ncd provision\ngit pull\n# if you previously ran release.sh, run:\ngit reset --hard 7.x-3.4\n# otherwise run this next line:\ndch -v 3.3 -D unstable new upstream release\ngit-buildpackage -kanarcat@koumbit.org\ndput aegir ../build-area/aegir3-provision_3.3_i386.changes\n\n\n\nNote\n: Version numbers are slightly different in Debian - we use the \"magic\"\n\n~\n separator to indicate that 3.0~alpha2 is actually lower than 3.0...\n\n\nPackages are initially uploaded to the \nunstable\n repository for initial\ntest builds. The idea is that this final package can be moved to \ntesting\n for\nbroader testing, using the command:\n\n\nsudo -u reprepro reprepro -b /srv/reprepro/ copy testing unstable aegir2 aegir2-provision aegir2-hostmaster aegir2-cluster-slave\n\n\n\nWhen confirmed as ready, it is migrated to the \nstable\n repository, using the command:\n\n\nsudo -u reprepro reprepro -b /srv/reprepro/ copy stable testing aegir2 aegir2-provision aegir2-hostmaster aegir2-cluster-slave\n\n\n\nBuilding a branch package\n\n\nSometimes you want to have a test package for a given branch without going\nthrough a full release. Here how it's done.\n\n\ngit checkout debian\ngit merge 7.x-3.x\ngit describe\ndch -v 3.4~rc3+28-1\ngit-buildpackage --git-tag -kanarcat@koumbit.org\n\n\n\nThis is also available in the Debian package as:\n\n\n./debian/rules jenkins-build-auto\n\n\n\nInstalling packages manually\n\n\ndpkg -i aegir3-provision_3.4~rc3+g6632e6e-1_all.deb\n\n\n\nWe also make sure our custom makefile fetches the right one from provision:\n\n\n-includes[aegir] = \"http://drupalcode.org/project/provision.git/blob_plain/7.x-3.4-rc3:/aegir.make\"\n+includes[aegir] = \"http://drupalcode.org/project/provision.git/blob_plain/7.x-3.x:/aegir.make\"\n\n\n\nDeveloping on Debian\n\n\nTo develop third party extensions to Aegir on Debian, it is recommended to\ninstall the Debian packages. If you are working on Aegir core, this could be a\nbit trickier since the files are not where you expect them to be and are not\ndeployed as git repositories however.\n\n\nYou can, however, copy in place a .git directory using the following:\n\n\ngit clone --branch=7.x-3.4-rc3 http://git.drupal.org/project/provision\ncp -Rp provision/.git /usr/share/drush/commands/provision/.git\ncd /usr/share/drush/commands/provision\ngit stash\n\n\n\nThis will bring back a bunch of files that are removed from the Debian package,\nso it will yield warnings on uninstall of the Debian package but it should\notherwise work.\n\n\nYou can do something similar with the frontend.\n\n\nPackage versioning\n\n\nThe stable repository should contain the latest release. The testing repository\nwill also contain the latest release (unless we're in the process of building a\nrelease) but could have fixes to the Debian package that are being tested. The\nunstable repository is automatically built from the stable branch and may be\nbroken.\n\n\nTo see what changes are done to the Debian package, see the\n\ndebian/changelog\n\nwhich is maintained on the \ndebian\nbranch\n.\nTo see which version of the package is currently available in the repository,\nyou will unfortunately need to parse\nthe Packages file for\n\nunstable\n,\n\ntesting\n\nor\n\nstable\n.\n\n\nAdding a new uploader\n\n\nTo enable a new maintainer to upload to the Debian repository at\ndebian.aegirproject.org, something like the following steps will have to be\nfollowed:\n\n\nCreate a \n~/.dput.cfg\n with the following entry:\n\n\n# See /etc/dput.cf for examples\n[aegir]\nlogin     = *\n# login     = another_username\nfqdn      = debian.aegirproject.org\nmethod      = scp\nincoming    = ~reprepro/incoming\n\n\n\nNext, GPG keys will have to be authorized to upload to the repository:\n\n\nsudo -u reprepro -i\ngpg --search-keys foo@bar.com\ngpg --fingerprint foo@bar.com ; gpg --check-sigs foo@bar.com # check if this is the real key\necho allow * by key 1234ABCD \n /srv/reprepro/conf/uploaders\n\n\n\nReplacing an expired key\n\n\ngpg --gen-key\ngpg --list-keys\ngpg --keyserver pgp.mit.edu --send-keys \nkey id\n\nsudo -u reprepro -i\ngpg --search-keys \nkey id\n\ngpg --fingerprint foo@bar.com ; gpg --check-sigs foo@bar.com # check if this is the real key\necho allow * by key \nkey id\n \n /srv/reprepro/conf/uploaders\n\n\n\nThis new key.asc should be placed on http://debian.aegirproject.org/key.asc and http://cgit.drupalcode.org/provision/tree/debian/key.asc\n\n\nExtending the lifetime of a key\n\n\nreprepro@zeus:~$ gpg --edit-key 3376CCF9\n\ngpg\n expire\nChanging expiration time for the primary key.\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      \nn\n  = key expires in n days\n      \nn\nw = key expires in n weeks\n      \nn\nm = key expires in n months\n      \nn\ny = key expires in n years\nKey is valid for? (0) 3y\nKey expires at Sat 12 Oct 2019 09:12:54 AM EDT\nIs this correct? (y/N) y\ngpg\n save\n\ngpg --armor --export 3376CCF9 \n key.asc\n\n\n\nThis new key.asc should be placed on http://debian.aegirproject.org/key.asc and http://cgit.drupalcode.org/provision/tree/debian/key.asc\n\n\nHow the archive was built\n\n\nThe following documentation was used: \nhttps://wiki.koumbit.net/RepreproConfiguration", 
            "title": "Debian packaging"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#building-and-working-with-the-debian-packages", 
            "text": "Building and working with the debian packages  Basic requirements  Building a package for a new release  Building a branch package  Installing packages manually  Developing on Debian  Package versioning  Adding a new uploader  Replacing an expired key  Extending the lifetime of a key  How the archive was built      Debian is one of the main supported operating systems in Aegir. For other\nsystems, see Operating System Support. See also the following instructions:   Install using Debian packages  Upgrade using Debian packages   The following is aimed at developers wishing to maintain their own Debian\npackages or work within the packaging framework.", 
            "title": "Building and working with the debian packages"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#basic-requirements", 
            "text": "You need the following packages to build the Aegir Debian packages:  apt-get install devscripts git-buildpackage  See also the section below on  Adding a new uploader .", 
            "title": "Basic requirements"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#building-a-package-for-a-new-release", 
            "text": "Assuming we have just released 3.3, the following instructions will merge that\ncode into the  upstream  branch (which is used to create the Debian diff) and\nthen merged again in the debian branch (where the Debian code lives). We then\nuse  git-buildpackage  to build the package and tag it, then push those changes\nback in the repository.  cd provision\ngit pull\n# if you previously ran release.sh, run:\ngit reset --hard 7.x-3.4\n# otherwise run this next line:\ndch -v 3.3 -D unstable new upstream release\ngit-buildpackage -kanarcat@koumbit.org\ndput aegir ../build-area/aegir3-provision_3.3_i386.changes  Note : Version numbers are slightly different in Debian - we use the \"magic\" ~  separator to indicate that 3.0~alpha2 is actually lower than 3.0...  Packages are initially uploaded to the  unstable  repository for initial\ntest builds. The idea is that this final package can be moved to  testing  for\nbroader testing, using the command:  sudo -u reprepro reprepro -b /srv/reprepro/ copy testing unstable aegir2 aegir2-provision aegir2-hostmaster aegir2-cluster-slave  When confirmed as ready, it is migrated to the  stable  repository, using the command:  sudo -u reprepro reprepro -b /srv/reprepro/ copy stable testing aegir2 aegir2-provision aegir2-hostmaster aegir2-cluster-slave", 
            "title": "Building a package for a new release"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#building-a-branch-package", 
            "text": "Sometimes you want to have a test package for a given branch without going\nthrough a full release. Here how it's done.  git checkout debian\ngit merge 7.x-3.x\ngit describe\ndch -v 3.4~rc3+28-1\ngit-buildpackage --git-tag -kanarcat@koumbit.org  This is also available in the Debian package as:  ./debian/rules jenkins-build-auto", 
            "title": "Building a branch package"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#installing-packages-manually", 
            "text": "dpkg -i aegir3-provision_3.4~rc3+g6632e6e-1_all.deb  We also make sure our custom makefile fetches the right one from provision:  -includes[aegir] = \"http://drupalcode.org/project/provision.git/blob_plain/7.x-3.4-rc3:/aegir.make\"\n+includes[aegir] = \"http://drupalcode.org/project/provision.git/blob_plain/7.x-3.x:/aegir.make\"", 
            "title": "Installing packages manually"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#developing-on-debian", 
            "text": "To develop third party extensions to Aegir on Debian, it is recommended to\ninstall the Debian packages. If you are working on Aegir core, this could be a\nbit trickier since the files are not where you expect them to be and are not\ndeployed as git repositories however.  You can, however, copy in place a .git directory using the following:  git clone --branch=7.x-3.4-rc3 http://git.drupal.org/project/provision\ncp -Rp provision/.git /usr/share/drush/commands/provision/.git\ncd /usr/share/drush/commands/provision\ngit stash  This will bring back a bunch of files that are removed from the Debian package,\nso it will yield warnings on uninstall of the Debian package but it should\notherwise work.  You can do something similar with the frontend.", 
            "title": "Developing on Debian"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#package-versioning", 
            "text": "The stable repository should contain the latest release. The testing repository\nwill also contain the latest release (unless we're in the process of building a\nrelease) but could have fixes to the Debian package that are being tested. The\nunstable repository is automatically built from the stable branch and may be\nbroken.  To see what changes are done to the Debian package, see the debian/changelog \nwhich is maintained on the  debian\nbranch .\nTo see which version of the package is currently available in the repository,\nyou will unfortunately need to parse\nthe Packages file for unstable , testing \nor stable .", 
            "title": "Package versioning"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#adding-a-new-uploader", 
            "text": "To enable a new maintainer to upload to the Debian repository at\ndebian.aegirproject.org, something like the following steps will have to be\nfollowed:  Create a  ~/.dput.cfg  with the following entry:  # See /etc/dput.cf for examples\n[aegir]\nlogin     = *\n# login     = another_username\nfqdn      = debian.aegirproject.org\nmethod      = scp\nincoming    = ~reprepro/incoming  Next, GPG keys will have to be authorized to upload to the repository:  sudo -u reprepro -i\ngpg --search-keys foo@bar.com\ngpg --fingerprint foo@bar.com ; gpg --check-sigs foo@bar.com # check if this is the real key\necho allow * by key 1234ABCD   /srv/reprepro/conf/uploaders", 
            "title": "Adding a new uploader"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#replacing-an-expired-key", 
            "text": "gpg --gen-key\ngpg --list-keys\ngpg --keyserver pgp.mit.edu --send-keys  key id \nsudo -u reprepro -i\ngpg --search-keys  key id \ngpg --fingerprint foo@bar.com ; gpg --check-sigs foo@bar.com # check if this is the real key\necho allow * by key  key id    /srv/reprepro/conf/uploaders  This new key.asc should be placed on http://debian.aegirproject.org/key.asc and http://cgit.drupalcode.org/provision/tree/debian/key.asc", 
            "title": "Replacing an expired key"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#extending-the-lifetime-of-a-key", 
            "text": "reprepro@zeus:~$ gpg --edit-key 3376CCF9\n\ngpg  expire\nChanging expiration time for the primary key.\nPlease specify how long the key should be valid.\n         0 = key does not expire\n       n   = key expires in n days\n       n w = key expires in n weeks\n       n m = key expires in n months\n       n y = key expires in n years\nKey is valid for? (0) 3y\nKey expires at Sat 12 Oct 2019 09:12:54 AM EDT\nIs this correct? (y/N) y\ngpg  save\n\ngpg --armor --export 3376CCF9   key.asc  This new key.asc should be placed on http://debian.aegirproject.org/key.asc and http://cgit.drupalcode.org/provision/tree/debian/key.asc", 
            "title": "Extending the lifetime of a key"
        }, 
        {
            "location": "/community/release-process/debian-packaging/#how-the-archive-was-built", 
            "text": "The following documentation was used:  https://wiki.koumbit.net/RepreproConfiguration", 
            "title": "How the archive was built"
        }, 
        {
            "location": "/help/contact/", 
            "text": "Redirecting to \nnew community page URL\n.", 
            "title": "Help"
        }, 
        {
            "location": "/community/", 
            "text": "Contact the community\n\n\n\n\n\n\nContact the community\n\n\nIRC\n\n\nTwitter\n\n\nMailing Lists\n\n\nEvents\n\n\nBlogs\n\n\nQ \n A\n\n\nDrupal.org Issue queue's\n\n\nHistoric data\n\n\n\n\n\n\n\n\n\n\nWant to talk with the Aegir community? There are many channels with various virtues.\n\n\nIRC\n\n\nYou can \njoin the #aegir channel at Freenode\n on IRC. There's a loyal community of Aegir developers and users that frequent this channel. Much development discussion also takes place here, and support questions are welcomed.\n\n\nThe core developers also are reachable in #aegir on IRC.\n\n\nRemember that Aegir, like Drupal, transcends timezones, and even the developers are many hours apart from each other. Sometimes it's quiet, and sometimes it's very busy. Don't repeat yourself, someone will usually respond in a few hour if not immediately. If you can't hang around for an answer... try one of the other channels.\n\n\nWe try to meet/check-in/scrum there on Thursdays at 8PM GMT.\n\n\nNew to IRC? IRC instructions for Drupal users are at: \nhttps://www.drupal.org/irc\n.\n\n\nTwitter\n\n\n\n\nFollow the project twitter account\n\n\n\n\nMailing Lists\n\n\nThere are mailing lists that can be used for support, general discussion and development or announcements.\n\n\n\n\nannounce\n - the announce mailing list is used to announce new releases or major news\n\n\nusers\n - the user mailing list is used for general discussions and support for Aegir users\n\n\ncore\n - the core mailing list is used for internal discussions in the core team\n\n\ndevelop\n - for discussions about the ongoing development of the project (also AegirNG, the next major version)\n\n\ndiscuss\n - for general technical discussions, how-to questions, etc\n\n\ncoord\n - for coordination of tasks that are not code-related\n\n\nbusiness\n - for discussing business models, partnering opportunities, etc\n\n\n\n\nEvents\n\n\nAegir is often present at many of the popular DrupalCamps and DrupalCons, either as a formal session or in smaller BOF sessions.\n\n\nWe encourage users who are confident in using Aegir to demonstrate it at any relevant events they attend, and to post slides/screencasts so that others can benefit.\n\n\nBlogs\n\n\nAs well as the News/Blog area here, the developers also often blog about new Aegir features or share handy tips for the community. Here are two blogs to stay up to date with:\n\n\n\n\nhttps://developmentseed.org/blog/\n\n\nhttps://mig5.net/tags/aegir\n\n\nhttps://praxis.coop/en/tags/aegir\n\n\n\n\nQ \n A\n\n\n\n\nAskbot\n\n\nThe Aegir tag on Stack Exchange\n\n\n\n\nDrupal.org Issue queue's\n\n\n\n\nHostmaster\n\n\nProvision\n\n\nHosting\n\n\nOr a combined search\n\n\n\n\nHistoric data\n\n\n\n\nArchived community.aegirproject.org site\n (OpenAtrium 1.x)", 
            "title": "Community"
        }, 
        {
            "location": "/community/#contact-the-community", 
            "text": "Contact the community  IRC  Twitter  Mailing Lists  Events  Blogs  Q   A  Drupal.org Issue queue's  Historic data      Want to talk with the Aegir community? There are many channels with various virtues.", 
            "title": "Contact the community"
        }, 
        {
            "location": "/community/#irc", 
            "text": "You can  join the #aegir channel at Freenode  on IRC. There's a loyal community of Aegir developers and users that frequent this channel. Much development discussion also takes place here, and support questions are welcomed.  The core developers also are reachable in #aegir on IRC.  Remember that Aegir, like Drupal, transcends timezones, and even the developers are many hours apart from each other. Sometimes it's quiet, and sometimes it's very busy. Don't repeat yourself, someone will usually respond in a few hour if not immediately. If you can't hang around for an answer... try one of the other channels.  We try to meet/check-in/scrum there on Thursdays at 8PM GMT.  New to IRC? IRC instructions for Drupal users are at:  https://www.drupal.org/irc .", 
            "title": "IRC"
        }, 
        {
            "location": "/community/#twitter", 
            "text": "Follow the project twitter account", 
            "title": "Twitter"
        }, 
        {
            "location": "/community/#mailing-lists", 
            "text": "There are mailing lists that can be used for support, general discussion and development or announcements.   announce  - the announce mailing list is used to announce new releases or major news  users  - the user mailing list is used for general discussions and support for Aegir users  core  - the core mailing list is used for internal discussions in the core team  develop  - for discussions about the ongoing development of the project (also AegirNG, the next major version)  discuss  - for general technical discussions, how-to questions, etc  coord  - for coordination of tasks that are not code-related  business  - for discussing business models, partnering opportunities, etc", 
            "title": "Mailing Lists"
        }, 
        {
            "location": "/community/#events", 
            "text": "Aegir is often present at many of the popular DrupalCamps and DrupalCons, either as a formal session or in smaller BOF sessions.  We encourage users who are confident in using Aegir to demonstrate it at any relevant events they attend, and to post slides/screencasts so that others can benefit.", 
            "title": "Events"
        }, 
        {
            "location": "/community/#blogs", 
            "text": "As well as the News/Blog area here, the developers also often blog about new Aegir features or share handy tips for the community. Here are two blogs to stay up to date with:   https://developmentseed.org/blog/  https://mig5.net/tags/aegir  https://praxis.coop/en/tags/aegir", 
            "title": "Blogs"
        }, 
        {
            "location": "/community/#q-a", 
            "text": "Askbot  The Aegir tag on Stack Exchange", 
            "title": "Q &amp; A"
        }, 
        {
            "location": "/community/#drupalorg-issue-queues", 
            "text": "Hostmaster  Provision  Hosting  Or a combined search", 
            "title": "Drupal.org Issue queue's"
        }, 
        {
            "location": "/community/#historic-data", 
            "text": "Archived community.aegirproject.org site  (OpenAtrium 1.x)", 
            "title": "Historic data"
        }, 
        {
            "location": "/community/code-of-conduct/", 
            "text": "The Aegir Project's members and community strive to live by the Golden\nRule:\n\n\n\n\nDo unto others as you would have them do unto you.\n\n\n\n\nAs such, we believe the following maxims should be adhered to by all\ncommunity members, at all times:\n\n\n\n\nAssume good faith\n\n\nWork collaboratively\n\n\nShow respect\n\n\nValue diversity\n\n\n\n\nIn support of these values, we commit to the \nContributor Covenant Code of Conduct\n. Please\nreport any abuse to the project's maintainers by sending and email to\nconduct at aegirproject dot org. Any such reports will be kept confidential.", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/community/core-team/", 
            "text": "Core Maintainers\n\n\nHow to join the core team\n\n\nIf you are interested in joining the core team, you should provide valuable patches or otherwise contribute to the issue queues significantly. The core team has commit access to all core git repositories, so you will need to prove that you can provide good quality code through the issue queue. We usually notice such people and welcome them in the team directly, but you should also feel free to ask to join.\n\n\nCurrent members\n\n\nThe Aegir maintainers are developer who have commit access to the code. They are responsible for specific parts of the project and are general go-to people for various things.\n\n\n\n\nChristopher Gervais (\nergonlogic\n) - Aegir Project Leader, release engineering, continuous integration testing, community site webmaster, documentation, general bugfixing, ubercart integration co-maintainer, SaaS contrib components.\n\n\nHerman van Rink (\nhelmo\n) - hairy bugfixes and generally great contributions in the queue, maintainer for several contrib components.\n\n\nGuillaume Boudrias (\ngboudrias\n) - Contributor of a number of contrib modules, kplatforms and patches to Aegir core.\n\n\nCameron Eagans (\ncweagans\n) - Maintainer of a number of contrib modules, and contributor to several more, as well as patches to Aegir core.\n\n\nJon Pugh (\nJon Pugh\n) - maintainer of devshop hosting/provision, provision_git, and tons of other contrib modules, submitter of many good patches.\n\n\nColan Schwartz (\ncolan\n) - Documentation, patches to core, contributions to \nAegir Services/SaaS\n and e-commerce integration via \nRecurly Aegir\n.\n\n\nMathieu Lutfy (\nbgm\n) - CiviCRM support lead, contributing and testing many patches.\n\n\nAdam Andrzej Jaworski (\nmemtkmcc\n) - Nginx support, Barracuda Project, and much more.\n\n\n\n\nEmeritus members\n\n\nThese members have decided to take a less active role in the project. However, out of respect for them, and all their previous efforts for the Aegir Project (and the hope that they'll become more active again ;), they continue to have commit access.\n\n\n\n\nAdrian Rossouw (\nadrian\n) - project founder, retired.\n\n\nAntoine Beaupr\u00e9 (\nanarcat\n) - Former project lead, debian packaging, crazy late night coding splurges, general goto guy for everything.\n\n\nMiguel Jaqc (\nmig5\n) - Testing, release engineering, \"migressions\" and general bugfixing.\n\n\nSteven Jones (\nSteven Jones\n) - Documentation, queueing and contexts stuff, Drupal 7 port, general bugfixing.\n\n\nGrazyna \"Grace\" Jaworska (\nomega8cc\n) - Nginx support, much bug-testing and fixing, Barracuda Project.\n\n\n\n\nOther contributors\n\n\nThese people have made significant contributions to the project but do not yet have complete commit access.\n\n\n\n\nStuart Clark (\nDeciphered\n) - views integration and other patches.\n\n\nBrian Gilbert (\nrealityloop\n) - views integration and other patches.\n\n\nThomas Bosviel (\nThomas Bosviel\n) - DNS support improvements.\n\n\nSofian Benaissa (\nsfyn\n) - ubercart integration, quota API.\n\n\nunivate\n - views support and batch operations\n\n\n\n\nSorry if your name isn't here and you have made significant contributions! Feel free to add it or contact us if you feel you have been forgotten...\n\n\nAll contributors of Aegir's history can also be found on \nOpen Hub's Contributors page\n although that doesn't count patches that were sent in the Drupal.org issue queues.", 
            "title": "Core team"
        }, 
        {
            "location": "/community/core-team/#core-maintainers", 
            "text": "How to join the core team  If you are interested in joining the core team, you should provide valuable patches or otherwise contribute to the issue queues significantly. The core team has commit access to all core git repositories, so you will need to prove that you can provide good quality code through the issue queue. We usually notice such people and welcome them in the team directly, but you should also feel free to ask to join.", 
            "title": "Core Maintainers"
        }, 
        {
            "location": "/community/core-team/#current-members", 
            "text": "The Aegir maintainers are developer who have commit access to the code. They are responsible for specific parts of the project and are general go-to people for various things.   Christopher Gervais ( ergonlogic ) - Aegir Project Leader, release engineering, continuous integration testing, community site webmaster, documentation, general bugfixing, ubercart integration co-maintainer, SaaS contrib components.  Herman van Rink ( helmo ) - hairy bugfixes and generally great contributions in the queue, maintainer for several contrib components.  Guillaume Boudrias ( gboudrias ) - Contributor of a number of contrib modules, kplatforms and patches to Aegir core.  Cameron Eagans ( cweagans ) - Maintainer of a number of contrib modules, and contributor to several more, as well as patches to Aegir core.  Jon Pugh ( Jon Pugh ) - maintainer of devshop hosting/provision, provision_git, and tons of other contrib modules, submitter of many good patches.  Colan Schwartz ( colan ) - Documentation, patches to core, contributions to  Aegir Services/SaaS  and e-commerce integration via  Recurly Aegir .  Mathieu Lutfy ( bgm ) - CiviCRM support lead, contributing and testing many patches.  Adam Andrzej Jaworski ( memtkmcc ) - Nginx support, Barracuda Project, and much more.", 
            "title": "Current members"
        }, 
        {
            "location": "/community/core-team/#emeritus-members", 
            "text": "These members have decided to take a less active role in the project. However, out of respect for them, and all their previous efforts for the Aegir Project (and the hope that they'll become more active again ;), they continue to have commit access.   Adrian Rossouw ( adrian ) - project founder, retired.  Antoine Beaupr\u00e9 ( anarcat ) - Former project lead, debian packaging, crazy late night coding splurges, general goto guy for everything.  Miguel Jaqc ( mig5 ) - Testing, release engineering, \"migressions\" and general bugfixing.  Steven Jones ( Steven Jones ) - Documentation, queueing and contexts stuff, Drupal 7 port, general bugfixing.  Grazyna \"Grace\" Jaworska ( omega8cc ) - Nginx support, much bug-testing and fixing, Barracuda Project.", 
            "title": "Emeritus members"
        }, 
        {
            "location": "/community/core-team/#other-contributors", 
            "text": "These people have made significant contributions to the project but do not yet have complete commit access.   Stuart Clark ( Deciphered ) - views integration and other patches.  Brian Gilbert ( realityloop ) - views integration and other patches.  Thomas Bosviel ( Thomas Bosviel ) - DNS support improvements.  Sofian Benaissa ( sfyn ) - ubercart integration, quota API.  univate  - views support and batch operations   Sorry if your name isn't here and you have made significant contributions! Feel free to add it or contact us if you feel you have been forgotten...  All contributors of Aegir's history can also be found on  Open Hub's Contributors page  although that doesn't count patches that were sent in the Drupal.org issue queues.", 
            "title": "Other contributors"
        }, 
        {
            "location": "/community/core-team/criteria/", 
            "text": "Aegir Co-maintainer Criteria\n\n\nThe Aegir core team is somewhat selective about inviting co-maintainers. This is largely due to the complexity of the project, and the crucial functionality it plays for many of its users.\n\n\nBelow we detail the responsibilities of co-maintainership (apart from just commit rights to git), as well as what criteria we feel are important for new team members. Co-maintainership involves taking responsibility for the project's overall well-being. This includes:\n\n\n\n\nParticipation in the community: issue queues, IRC, community site, etc.\n\n\nTechnical involvement: bug-fixing, patch testing, new feature development and roadmap/architecture planning, release engineering, etc.\n\n\nMaintenance of project infrastructure: debian repos, community and API sites, Jenkins, etc.\n\n\nCommunity outreach: presentations and BoFs at Camps and Cons, blogging, screencasts, etc.\n\n\n\n\nWhile this isn't an exhaustive list, nor are all these activities required for membership in the core team. We're looking for new team members with regular, productive activity in one or more of the above domains. This essentially boils down to two criteria:\n\n\n\n\ncode/patches submissions (quality over quantity) and\n\n\ndemonstrated interest in the project.\n\n\n\n\nIf you believe that you'd make a good addition to the core team, don't hesitate to contact any of us to discuss it.", 
            "title": "Criteria"
        }, 
        {
            "location": "/community/core-team/criteria/#aegir-co-maintainer-criteria", 
            "text": "The Aegir core team is somewhat selective about inviting co-maintainers. This is largely due to the complexity of the project, and the crucial functionality it plays for many of its users.  Below we detail the responsibilities of co-maintainership (apart from just commit rights to git), as well as what criteria we feel are important for new team members. Co-maintainership involves taking responsibility for the project's overall well-being. This includes:   Participation in the community: issue queues, IRC, community site, etc.  Technical involvement: bug-fixing, patch testing, new feature development and roadmap/architecture planning, release engineering, etc.  Maintenance of project infrastructure: debian repos, community and API sites, Jenkins, etc.  Community outreach: presentations and BoFs at Camps and Cons, blogging, screencasts, etc.   While this isn't an exhaustive list, nor are all these activities required for membership in the core team. We're looking for new team members with regular, productive activity in one or more of the above domains. This essentially boils down to two criteria:   code/patches submissions (quality over quantity) and  demonstrated interest in the project.   If you believe that you'd make a good addition to the core team, don't hesitate to contact any of us to discuss it.", 
            "title": "Aegir Co-maintainer Criteria"
        }, 
        {
            "location": "/community/core-team/leadership/", 
            "text": "Aegir Project Leadership\n\n\nWith the recent transfer of leadership, the project's core team has decided to move towards a more democratic model, to ensure clearer structure and smoother transitions in the future. Debian is a shining example of this (in particular, the DPL), and so we will model our leadership position(s) after them.\n\n\n\n\nThe Aegir Project Leader (APL) is the official representative of the Aegir Project. They have two main functions, one internal and one external.\n\n\nIn the external function, the Project Leader represents the Aegir Project to others. This involves giving talks and presentations about Aegir and attending trade shows, as well as building good relationships with other organizations and companies.\n\n\nInternally, the Project Leader manages the project and defines its vision. They should talk to other Aegir developers, especially to active contributors to Aegir core, to see how they can assist their work. A main task of the Project Leader therefore involves coordination and communication.\n\n\n\n\nObviously, we're a much smaller project than Debian, and so we're adopting a pretty minimalist organizational structure. That said, Debian has many other structures in place to ensure the ongoing health of a large community driven project. As the Aegir Project grows, we can appropriate additional tools to overcome any new challenges that arise.\n\n\nFinally, the responsibilities inherent in the APL role are not exclusive to it. That is, just because it is the Project Leader's job to give presentations and coordinate our efforts, other community members should not hesitate to continue doing so themselves.", 
            "title": "Leadership"
        }, 
        {
            "location": "/community/core-team/leadership/#aegir-project-leadership", 
            "text": "With the recent transfer of leadership, the project's core team has decided to move towards a more democratic model, to ensure clearer structure and smoother transitions in the future. Debian is a shining example of this (in particular, the DPL), and so we will model our leadership position(s) after them.   The Aegir Project Leader (APL) is the official representative of the Aegir Project. They have two main functions, one internal and one external.  In the external function, the Project Leader represents the Aegir Project to others. This involves giving talks and presentations about Aegir and attending trade shows, as well as building good relationships with other organizations and companies.  Internally, the Project Leader manages the project and defines its vision. They should talk to other Aegir developers, especially to active contributors to Aegir core, to see how they can assist their work. A main task of the Project Leader therefore involves coordination and communication.   Obviously, we're a much smaller project than Debian, and so we're adopting a pretty minimalist organizational structure. That said, Debian has many other structures in place to ensure the ongoing health of a large community driven project. As the Aegir Project grows, we can appropriate additional tools to overcome any new challenges that arise.  Finally, the responsibilities inherent in the APL role are not exclusive to it. That is, just because it is the Project Leader's job to give presentations and coordinate our efforts, other community members should not hesitate to continue doing so themselves.", 
            "title": "Aegir Project Leadership"
        }, 
        {
            "location": "/community/core-team/welcome/", 
            "text": "How to welcome a new member to the core team\n\n\nOnce someone is deemed worthy of joining the core team, you (a core member) should make a proposal on the core mailing list to welcome the new developer. Subject should clearly state the proposal and give ample time for other developers to chime in. Usually all core team members should give their explicit approval as we try to reach consensus (and usually do) over proposals.\n\n\nOnce the member is approved on the mailing list, you should follow this checklist:\n\n\n\n\nGive membership on the mailing list.\n\n\nGrant commit access to the core repositories (Hostmaster, Hosting, Provision and Eldir).\n\n\nInvite on \nGitHub\n\n\nInvite on \nGitLab.com\n\n\nGrant jenkins access (simply create a user then go to the configuration page to give him the same access as others - consider also Vagrant scripts used in Jenkins and maybe the Aegir Jenkins scripts.\n\n\nGrant operator status on the IRC channel (/msg ChanServ flags #aegir user +*).\n\n\nGrant admin access to the community site(s).\n\n\nAdd the new member to the core team page.\n\n\nSend a nice welcome email to the new member and CC the mailing list.\n\n\nLastpass access for project assets.\n\n\n(Optional) Announce the great news in the next release.", 
            "title": "Welcoming a new member"
        }, 
        {
            "location": "/community/core-team/welcome/#how-to-welcome-a-new-member-to-the-core-team", 
            "text": "Once someone is deemed worthy of joining the core team, you (a core member) should make a proposal on the core mailing list to welcome the new developer. Subject should clearly state the proposal and give ample time for other developers to chime in. Usually all core team members should give their explicit approval as we try to reach consensus (and usually do) over proposals.  Once the member is approved on the mailing list, you should follow this checklist:   Give membership on the mailing list.  Grant commit access to the core repositories (Hostmaster, Hosting, Provision and Eldir).  Invite on  GitHub  Invite on  GitLab.com  Grant jenkins access (simply create a user then go to the configuration page to give him the same access as others - consider also Vagrant scripts used in Jenkins and maybe the Aegir Jenkins scripts.  Grant operator status on the IRC channel (/msg ChanServ flags #aegir user +*).  Grant admin access to the community site(s).  Add the new member to the core team page.  Send a nice welcome email to the new member and CC the mailing list.  Lastpass access for project assets.  (Optional) Announce the great news in the next release.", 
            "title": "How to welcome a new member to the core team"
        }, 
        {
            "location": "/community/resources/", 
            "text": "Resources\n\n\n\n\n\n\nResources\n\n\nPresentations\n\n\n2016\n\n\n2015\n\n\n2014\n\n\n2013\n\n\n2012\n\n\n2011\n\n\n2010\n\n\n2009\n\n\n2008\n\n\n\n\n\n\nOther\n\n\n\n\n\n\n\n\n\n\nThis page aims to provide links presentation video's, slides, and other training materials.\n\n\nFound an interesting resource? Please add \na pull request or issue\n\n\nPresentations\n\n\n2016\n\n\n\n\nWhen free is still too expensive\n\n\nChristopher Gervais - ergonlogic | Chris Doten - cdoten, July 2016\n\n\n\n\n\n\nOne Drupal to Rule Them All\n\n\nChristopher Gervais - ergonlogic, July 2016\n\n\n\n\n\n\nAdvanced Drush Make\n\n\nChristopher Gervais - ergonlogic, July 2016\n\n\n\n\n\n\nOne Drupal to Rule Them All\n - \nslides (keynote)\n\n\nChristopher Gervais - ergonlogic - June 2016\n\n\n\n\n\n\nDIY GPL Planet Scale Drupal \"Cloud\"(DrupalCamp Stanford)\n - \nslides\n\n\nNicholas Roberts, April\n\n\n\n\n\n\nDIY Drupal Cloud with Drupal, Drush and Aegir (Southern Californian Linux Expo)\n - \nSlides\n\n\nNicholas Roberts, January 21, 2016\n\n\n\n\n\n\n\n\n2015\n\n\n\n\nAegir: core and contrib - architecture and deep dive\n\n\nChristopher Gervais - ergonlogic | Herman van Rink - helmo, July 2015\n\n\n\n\n\n\nAegir: A Drupal-As-A-Service Secret Weapon (Drupal GovCon)\n\n\nMobomo, July 22, 2015\n\n\n\n\n\n\nDrupal CI with Aegir and TeamCity (Western New York Drupal User Group)\n\n\nGuyPaddock, Apr 8, 2015\n\n\n\n\n\n\n\n\n2014\n\n\n\n\nWeb Stacks for local development (Drupal Melbourne Meetup March 11 --)\n\n\nBrian Gilbert (@BrianGilbert_) of \nRealityloop\n\n\n\n\n\n\nSpidersnet Infinity: Creating a Site Factory with Drupal \n Aegir (DrupalCon Amsterdam)\n\n\n8ballsteve, alickmighall, i_g_wright of \nMiggle\n\n\n\n\n\n\n\n\n2013\n\n\n2012\n\n\n2011\n\n\n\n\nDrupalCamp Spain -- Aegir: One Drupal to Rule Them All (Spanish)\n - \nvideo\n\n\nDrupalCon London -- Aegir Based Business Models\n - \nslides\n\n\nChristopher Gervais (ergonlogic), August 23rd, 2011\n\n\n\n\n\n\nDrupalCon London -- Aegir: One Drupal to Rule Them All\n - \nvideo\n\n\nAntoine Beaupr\u00e9 (anarcat) and Steven Jones (darthsteven), August 24th, 2011\n\n\n\n\n\n\n\n\n2010\n\n\n\n\nAegir: One Drupal to Rule Them All (DrupalCon Copenhagen)\n - \nvideo\n\n\nAegir: One Drupal to Rule Them All (DrupalCamp Montreal) (link dead)\n\n\nAntoine Beaupr\u00e9 (anarcat), October 23rd, 2010\n\n\n\n\n\n\nDrupalCamp LA - How Aegir Will Save Your Sanity\n\n\nJohn Fiala, August 2010\n\n\n\n\n\n\nDrupalCon San Francisco - Aegir - One Drupal to Rule them All!\n\n\nMiguel Jacq, Antoine Beaupr\u00e9, May 2010\n\n\n\n\n\n\n\n\n2009\n\n\n\n\nDrupalCon Paris - Automate your maintenance troubles away with the Aegir hosting system!\n\n\nAdrian Rossouw, Antoine Beaupr\u00e9\n\n\n\n\n\n\nDrupalCon Paris - Aegir: Build Once, Deploy often: Real life use-cases\n\n\nRoel De Meester, September 2009\n\n\n\n\n\n\nDrupalCon DC - Deploying and Maintaining Drupal Sites Using the Aegir Hosting System\n\n\nAdrian Rossouw\n\n\n\n\n\n\n\n\n2008\n\n\n\n\nDeploying and maintaining Drupal sites using Aegir hosting system (DrupalCon Szeged)\n\n\nAdrian Rossouw\n\n\n\n\n\n\n\n\nOther\n\n\nFound an interresting resource? Please add \na pull request or issue", 
            "title": "Resources"
        }, 
        {
            "location": "/community/resources/#resources", 
            "text": "Resources  Presentations  2016  2015  2014  2013  2012  2011  2010  2009  2008    Other      This page aims to provide links presentation video's, slides, and other training materials.  Found an interesting resource? Please add  a pull request or issue", 
            "title": "Resources"
        }, 
        {
            "location": "/community/resources/#presentations", 
            "text": "2016   When free is still too expensive  Christopher Gervais - ergonlogic | Chris Doten - cdoten, July 2016    One Drupal to Rule Them All  Christopher Gervais - ergonlogic, July 2016    Advanced Drush Make  Christopher Gervais - ergonlogic, July 2016    One Drupal to Rule Them All  -  slides (keynote)  Christopher Gervais - ergonlogic - June 2016    DIY GPL Planet Scale Drupal \"Cloud\"(DrupalCamp Stanford)  -  slides  Nicholas Roberts, April    DIY Drupal Cloud with Drupal, Drush and Aegir (Southern Californian Linux Expo)  -  Slides  Nicholas Roberts, January 21, 2016     2015   Aegir: core and contrib - architecture and deep dive  Christopher Gervais - ergonlogic | Herman van Rink - helmo, July 2015    Aegir: A Drupal-As-A-Service Secret Weapon (Drupal GovCon)  Mobomo, July 22, 2015    Drupal CI with Aegir and TeamCity (Western New York Drupal User Group)  GuyPaddock, Apr 8, 2015     2014   Web Stacks for local development (Drupal Melbourne Meetup March 11 --)  Brian Gilbert (@BrianGilbert_) of  Realityloop    Spidersnet Infinity: Creating a Site Factory with Drupal   Aegir (DrupalCon Amsterdam)  8ballsteve, alickmighall, i_g_wright of  Miggle     2013  2012  2011   DrupalCamp Spain -- Aegir: One Drupal to Rule Them All (Spanish)  -  video  DrupalCon London -- Aegir Based Business Models  -  slides  Christopher Gervais (ergonlogic), August 23rd, 2011    DrupalCon London -- Aegir: One Drupal to Rule Them All  -  video  Antoine Beaupr\u00e9 (anarcat) and Steven Jones (darthsteven), August 24th, 2011     2010   Aegir: One Drupal to Rule Them All (DrupalCon Copenhagen)  -  video  Aegir: One Drupal to Rule Them All (DrupalCamp Montreal) (link dead)  Antoine Beaupr\u00e9 (anarcat), October 23rd, 2010    DrupalCamp LA - How Aegir Will Save Your Sanity  John Fiala, August 2010    DrupalCon San Francisco - Aegir - One Drupal to Rule them All!  Miguel Jacq, Antoine Beaupr\u00e9, May 2010     2009   DrupalCon Paris - Automate your maintenance troubles away with the Aegir hosting system!  Adrian Rossouw, Antoine Beaupr\u00e9    DrupalCon Paris - Aegir: Build Once, Deploy often: Real life use-cases  Roel De Meester, September 2009    DrupalCon DC - Deploying and Maintaining Drupal Sites Using the Aegir Hosting System  Adrian Rossouw     2008   Deploying and maintaining Drupal sites using Aegir hosting system (DrupalCon Szeged)  Adrian Rossouw", 
            "title": "Presentations"
        }, 
        {
            "location": "/community/resources/#other", 
            "text": "Found an interresting resource? Please add  a pull request or issue", 
            "title": "Other"
        }, 
        {
            "location": "/release-notes/3.8/", 
            "text": "Aegir 3.8\n\n\nThe Aegir team is proud to announce a new release in the stable 3.x branch!\n\n\nThis release ships with a number of bug fixes and UI improvements.\n\n\nPlease note that we updated the GPG key used for our Debian repository, the following commands help update the key on your system.\n\n\ncurl http://debian.aegirproject.org/key.asc | sudo apt-key add -\nsudo apt-get update\n\n\n\n\nWith this release we also introduce a number of new tools to the ecosystem:\n\n\n\n\nTwo factor authentication, \nissue\n\n\nThe first stable release of the \nhosting_wordpress module\n. \nissue\n\n\nEarly work is being done on \nKubernetes container management\n to allow Aegir to host any containerized application, not just Drupal.\n\n\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\nLinks\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nProvision\n\n\nDrush commands\n\n\ndrupal.org/project/provision\n \n \ngithub.com/aegir-project/provision\n\n\n\n\n\n\n\n\nHosting\n\n\nDrupal Modules\n\n\ndrupal.org/project/hosting\n \n \ngithub.com/aegir-project/hosting\n\n\n\n\n\n\n\n\nHostmaster\n\n\nDrupal Install Profile\n\n\ndrupal.org/project/hostmaster\n \n \ngithub.com/aegir-project/hostmaster\n\n\n\n\n\n\n\n\nDockerfiles\n\n\nDocker image definitions. Used for all tests.\n\n\ngithub.com/aegir-project/dockerfiles\n \nhub.docker.com/r/aegir/hostmaster\n\n\n\n\n\n\n\n\nTests\n\n\nBehat tests and Travis tools\n\n\ngithub.com/aegir-project/tests\n\n\n\n\n\n\n\n\nDevelopment Environment\n\n\nLocal docker-based development environment.\n\n\ngithub.com/aegir-project/development\n\n\n\n\n\n\n\n\n\n\nDrush install from Debian package\n\n\nWe now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following before installing or upgrading the packages:\n\n\n# echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections\n\n\n\nLikewise, to use the latest dev build of Drush (not recommended), you could run:\n\n\n# echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections\n\n\n\nOr to ignore Drush during upgrades of the debian package:\n\n\n# echo aegir3-provision aegir/drush_version string ignore | debconf-set-selections\n\n\n\nWe are considering packaging Drush separately again:\n\n\n\n\nIssue #2585275: Maintain Drush Debian packages\n\n\n\n\nInstalling and upgrading\n\n\nThe canonical source of installation documentation is\n\n\nhttp://docs.aegirproject.org/en/3.x/install/\n\n\nWithin those sections you'll find step-by-step instructions for performing both \nmanual\n and \nautomatic\n upgrade processes.\n\n\nIt is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.\n\n\nNeed help?\n\n\nIf you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.\n\n\nConsult this page for more information: \nhttp://docs.aegirproject.org/en/3.x/community\n\n\nThanks to our awesome \ncommunity\n for their help, support and encouragement as always! Enjoy the new release :)\n\n\nChanges\n\n\nChanges to Hostmaster since 7.x-3.7\n\n\n\n\n#2734589\n by \nhelmo\n: Bundle two factor authentication - tfa\n\n\nUpdate ctools and entity module to their current versions\n\n\nrefactor travis code\n\n\nUpdate to the new ctools version\n\n\n\n\nChanges to Hosting since 7.x-3.7\n\n\n\n\n#2821365\n by \nneograph734\n, \nhelmo\n: Clients cannot create sites because of missing database options\n\n\n#2821366\n by \nneograph734\n: Hosting or hostmaster should suppress error messages by default\n\n\n#2792991\n: hostmaster site not re-verified after enabling feature\n\n\n#2811163\n by \ncolan\n: Switch to checking a node's ID via empty() as it may have not been set.\n\n\nExplain the old and new value for hook_hosting_task_update_status()\n\n\n#2730603\n: Correct options list function\n\n\nrefactor travis code\n\n\n#2697179\n: Only list allowed/unlocked platforms during platform migration.\n\n\nMerge pull request \n#5\n from aegir-project/specify-provision\n\n\nClone provision using the specified version.\n\n\n#1111254\n: Document the Hostmaster API\n\n\nreduce loglevel, nothing to warn about\n\n\n\n\nChanges to Provision since 7.x-3.7\n\n\n\n\n#2347557\n by \nhelmo\n, \ngboudrias\n: Enable the systemd hosting-queued\n\n\n#2757765\n by \nkarel010\n: Incompatible overrides in pack and cluster module\n\n\n#2819021\n by \ncolan\n, \nmemtkmcc\n: Template cleanup\n\n\n#2731471\n by \njon-pugh\n, \nergonlogic\n: Provision backup-delete command is too strict if it doesn't have \"backups\" passed to it\n\n\n#2762701\n by \nergonlogic\n, \nmemtkmcc\n, \nhelmo\n: Fix for minor updates, version_compare would give -1 == TRUE\n\n\nNginx: sync letsencrypt support in vhost.tpl.php (BOA unfork)\n\n\nNginx: sync letsencrypt support (BOA unfork)\n\n\nNginx: sync templates\n\n\nNginx: Sync subdir template\n\n\nNginx: Sync for ssl_dhparam and ssl_stapling\n\n\nNginx: Sync SSL server template\n\n\nNginx: Do not set ssl_stapling on the server level\n\n\nNginx: Do not set ssl_dhparam on the server level\n\n\n#2768869\n by \nmemtkmcc\n: Nginx fastcgi_cache_valid TTL logic is incorrect\n\n\nNginx: Improve fastcgi_cache_valid TTL settings\n\n\nIssue: \n#2791885\n Nginx: default FastCGI cache levels value may exhaust all inodes\n\n\n#2820747\n by \nmemtkmcc\n: Nginx - Support for Accelerated Mobile Pages (AMP)\n\n\n#2820486\n by \nmemtkmcc\n: Nginx - do not log media files requests\n\n\nNginx: Do not hardcode X-Frame-Options header \u2014 see \n#1056\n\n\nNginx: Fix for the add_header inheritance\n\n\n#2595809\n by \ncolan\n, \nhelmo\n: Find (d8) profiles without a .profile\n\n\n#2774029\n by \nergonlogic\n: Allow services to be disabled\n\n\n#2737785\n by \nergonlogic\n: Provide a stable location for Drush overrides\n\n\n#2811377\n by \nbgm\n: CiviCRM and Nginx: block access to the 'custom' directory\n\n\nrefactor travis code\n\n\n#2798127\n by \nmemtkmcc\n: Improve Migrate task reliability with extra sub-tasks and fixes (BOA unfork)\n\n\n#2798129\n by \nmemtkmcc\n: Run extra Verify via frontend during Import task (BOA unfork)\n\n\n#2798147\n by \nmemtkmcc\n: Re-verify @server_master via frontend on migrate (BOA unfork)\n\n\n#2798149\n by \nmemtkmcc\n: Restore client_email option support on hostmaster install (BOA unfork)\n\n\n#2798121\n by \nmemtkmcc\n: Manage extra db GRANT for 127.0.0.1 to allow SSH tunneling for remote SQL access (BOA unfork)\n\n\n#2798143\n by \nmemtkmcc\n: Improve Clone task reliability with extra sub-tasks (BOA unfork)\n\n\nRename README.txt, to .md\n\n\n#2762701\n by \nergonlogic\n, \nmemtkmcc\n: Set the file mode for local.settings.php\n\n\n#2774487\n by \nhelmo\n, \nmemtkmcc\n: Fix command name'\n\n\n#2762701\n by \nergonlogic\n, \nmemtkmcc\n: Fix 2.x to 3.x upgrade path.\n\n\n#2774487\n by \nhelmo\n: Document the provision_backup_suffix option.\n\n\n\n\nChanges to Eldir since 7.x-3.7\n\n\n\n\n#2786149\n by \nhelmo\n, \njacob.embree\n: Notice: Undefined variable: svg_logo in  page.tpl.php and other places\n\n\n#2816159\n by \ntommycox\n: Made the table position relative.\n\n\n\n\nChanges to hosting_civicrm since 7.x-3.7\n\n\n\n\n#2821170\n by \nergonlogic\n: Site-specific CiviCRM cron intervals missing\n\n\nMerge pull request \n#11\n from mlutfy/7.x-3.x-phpunit-b\n\n\nAdd migration test with extensions, contributions, multilingual.\n\n\nMerge pull request \n#7\n from mlutfy/7.x-3.x-issue2734933\n\n\nMerge pull request \n#10\n from mlutfy/7.x-3.x-phpunit\n\n\ntests: remove custom platform-install and exec drush instead, as for other commands (avoids having to bootstrap drush).\n\n\ntests: improve output management when running exec, avoid weird async output issues.\n\n\ndrush_provision_civicrm_tests_run_remaining_tasks: call drush_provision_tests_run_remaining_tasks() from provision_tests (remove code duplication).\n\n\ntests: PlatformInstall: use self::exec(), instead of exec().\n\n\ntests: PlatformInstall: do not build the platform if it's already there (saves time).\n\n\ntests: Command: esthetic log changes.\n\n\ntests: SiteDelete: remove '@' from site alias (it's added later).\n\n\ntests: fix/enable migrate tests.\n\n\ntests: install/migrate: do not delete platforms on tearDown, since building platforms takes a long time.\n\n\ntests: bootstrap: enable display of PHP errors so that we can see PHP errors in Jenkins output when tests run into a PHP fatal error.\n\n\ntests: SiteUtils: refactor code and fix json_decode.\n\n\ntests: Command: add huge drush_log() statements to help reading test output in Jenkins.\n\n\ntests: add basic siteMigrate and upgrade tests.\n\n\nphpunit: SiteInstall: fix function comment.\n\n\nphpunit/installTest: fix class comment.\n\n\nMerge branch '7.x-3.x' of github.com:mlutfy/hosting_civicrm into 7.x-3.x\n\n\nMerge pull request \n#9\n from mlutfy/7.x-3.x-phpunit\n\n\nmakefiles: 4.6-D6: patch the civicrm.drush.inc file (for drush_civicrm_get_db_spec).\n\n\ninstall: support non-standard mysql port and workaround CRM-19407.\n\n\nphpunit: fix 4.7d7 install test (profile).\n\n\nphpunit: setUpBeforeClass/tearDownAfterClass: call the parent, for drush includes.\n\n\nphpunit: use setUpBeforeClass/tearDownAfterClass to avoid setup/teardown for each test (platforms only need to be created once). Also added a test for CiviCRM 4.7d7.\n\n\nmakefiles: bumping CiviCRM versions (4.6 and 4.7).\n\n\nphpunit: split install test per-version, so that we have clearer results.\n\n\ntests: add README.md\n\n\nphpunit: Command: ignore the mbstring Drupal error.\n\n\nphpunit: SiteDelete: put @ inside the arg, otherwise exec() adds a space between the @\u00a0and site.\n\n\nphpunit: Command: ouput the error before throwing an exception.\n\n\nphpunit: Command: drush outputs all status messages on stderr, so look for [error] instead.\n\n\nRevert \"Fix false-positive warning on DB updates.\"\n\n\nphpunit: Command: use Exception (avoid namespace fatal error).\n\n\n.gitignore: add composer.lock\n\n\nphpunit: fix namespacing.\n\n\nphpunit: exec with symfony/process (forgot to add Command.php).\n\n\nphpunit: exec with symfony/process.\n\n\nphpunit: site delete: do not append .aegir.example.com twice.\n\n\nphpunit: implement site install and delete.\n\n\nMerge pull request \n#8\n from mlutfy/7.x-3.x-phpunit\n\n\nphpunit: installTest: delete platforms in tearDown.\n\n\nphpunit: removed hardcoded hostmaster env vars (was not used), and commented out temporarily install/remove site tests (not yet implemented).\n\n\nInitial support for phpunit testing.\n\n\nFix false-positive warning on DB updates.\n\n\nFix for tests: fix d6-default profile name\n\n\n#2734933\n: only set CIVICRM_UPGRADE_ACTIVE when necessary.\n\n\n\n\nChanges to Hosting Git since 7.x-3.7\n\n\n\n\n#2778877\n: Add reset hard option to git checkout task\n\n\n\n\nChanges to hosting_remote_import since 7.x-3.7\n\n\nNone\n\n\nChanges to Hosting Site Backup Manager since 7.x-3.7\n\n\n\n\n#2788995\n by \ncvining\n: 'Get' fails for exporting large backup files\n\n\n\n\nChanges to Aegir Hosting Tasks Extra since 7.x-3.7\n\n\n\n\n#2796917\n by \nvishalkhialani\n: Removed extra \"s\" in \"aliases\".\n\n\n#2778443\n by \nhelmo\n, \nmemtkmcc\n: refactor backup filename code to use core function\n\n\n\n\nKnown Issues\n\n\n\n\n\n\nWhen upgrading from Aegir 2.x be aware of \nthese notes\n\n\n\n\n\n\nIn Aegir 3.8, Nginx 1.9 (or later) is required, but the need to upgrade is fixed \nwith a patch in this issue, and thus remove in the next release\n. (On Debian Jessie, Nginx 1.9 is available in the backports)\n\n\n\n\n\n\nOur combined \nissue queues", 
            "title": "Release notes"
        }, 
        {
            "location": "/release-notes/3.8/#aegir-38", 
            "text": "The Aegir team is proud to announce a new release in the stable 3.x branch!  This release ships with a number of bug fixes and UI improvements.  Please note that we updated the GPG key used for our Debian repository, the following commands help update the key on your system.  curl http://debian.aegirproject.org/key.asc | sudo apt-key add -\nsudo apt-get update  With this release we also introduce a number of new tools to the ecosystem:   Two factor authentication,  issue  The first stable release of the  hosting_wordpress module .  issue  Early work is being done on  Kubernetes container management  to allow Aegir to host any containerized application, not just Drupal.      Project  Description  Links  Status      Provision  Drush commands  drupal.org/project/provision     github.com/aegir-project/provision     Hosting  Drupal Modules  drupal.org/project/hosting     github.com/aegir-project/hosting     Hostmaster  Drupal Install Profile  drupal.org/project/hostmaster     github.com/aegir-project/hostmaster     Dockerfiles  Docker image definitions. Used for all tests.  github.com/aegir-project/dockerfiles   hub.docker.com/r/aegir/hostmaster     Tests  Behat tests and Travis tools  github.com/aegir-project/tests     Development Environment  Local docker-based development environment.  github.com/aegir-project/development", 
            "title": "Aegir 3.8"
        }, 
        {
            "location": "/release-notes/3.8/#drush-install-from-debian-package", 
            "text": "We now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following before installing or upgrading the packages:  # echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections  Likewise, to use the latest dev build of Drush (not recommended), you could run:  # echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections  Or to ignore Drush during upgrades of the debian package:  # echo aegir3-provision aegir/drush_version string ignore | debconf-set-selections  We are considering packaging Drush separately again:   Issue #2585275: Maintain Drush Debian packages", 
            "title": "Drush install from Debian package"
        }, 
        {
            "location": "/release-notes/3.8/#installing-and-upgrading", 
            "text": "The canonical source of installation documentation is  http://docs.aegirproject.org/en/3.x/install/  Within those sections you'll find step-by-step instructions for performing both  manual  and  automatic  upgrade processes.  It is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.", 
            "title": "Installing and upgrading"
        }, 
        {
            "location": "/release-notes/3.8/#need-help", 
            "text": "If you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.  Consult this page for more information:  http://docs.aegirproject.org/en/3.x/community  Thanks to our awesome  community  for their help, support and encouragement as always! Enjoy the new release :)", 
            "title": "Need help?"
        }, 
        {
            "location": "/release-notes/3.8/#changes", 
            "text": "Changes to Hostmaster since 7.x-3.7   #2734589  by  helmo : Bundle two factor authentication - tfa  Update ctools and entity module to their current versions  refactor travis code  Update to the new ctools version   Changes to Hosting since 7.x-3.7   #2821365  by  neograph734 ,  helmo : Clients cannot create sites because of missing database options  #2821366  by  neograph734 : Hosting or hostmaster should suppress error messages by default  #2792991 : hostmaster site not re-verified after enabling feature  #2811163  by  colan : Switch to checking a node's ID via empty() as it may have not been set.  Explain the old and new value for hook_hosting_task_update_status()  #2730603 : Correct options list function  refactor travis code  #2697179 : Only list allowed/unlocked platforms during platform migration.  Merge pull request  #5  from aegir-project/specify-provision  Clone provision using the specified version.  #1111254 : Document the Hostmaster API  reduce loglevel, nothing to warn about   Changes to Provision since 7.x-3.7   #2347557  by  helmo ,  gboudrias : Enable the systemd hosting-queued  #2757765  by  karel010 : Incompatible overrides in pack and cluster module  #2819021  by  colan ,  memtkmcc : Template cleanup  #2731471  by  jon-pugh ,  ergonlogic : Provision backup-delete command is too strict if it doesn't have \"backups\" passed to it  #2762701  by  ergonlogic ,  memtkmcc ,  helmo : Fix for minor updates, version_compare would give -1 == TRUE  Nginx: sync letsencrypt support in vhost.tpl.php (BOA unfork)  Nginx: sync letsencrypt support (BOA unfork)  Nginx: sync templates  Nginx: Sync subdir template  Nginx: Sync for ssl_dhparam and ssl_stapling  Nginx: Sync SSL server template  Nginx: Do not set ssl_stapling on the server level  Nginx: Do not set ssl_dhparam on the server level  #2768869  by  memtkmcc : Nginx fastcgi_cache_valid TTL logic is incorrect  Nginx: Improve fastcgi_cache_valid TTL settings  Issue:  #2791885  Nginx: default FastCGI cache levels value may exhaust all inodes  #2820747  by  memtkmcc : Nginx - Support for Accelerated Mobile Pages (AMP)  #2820486  by  memtkmcc : Nginx - do not log media files requests  Nginx: Do not hardcode X-Frame-Options header \u2014 see  #1056  Nginx: Fix for the add_header inheritance  #2595809  by  colan ,  helmo : Find (d8) profiles without a .profile  #2774029  by  ergonlogic : Allow services to be disabled  #2737785  by  ergonlogic : Provide a stable location for Drush overrides  #2811377  by  bgm : CiviCRM and Nginx: block access to the 'custom' directory  refactor travis code  #2798127  by  memtkmcc : Improve Migrate task reliability with extra sub-tasks and fixes (BOA unfork)  #2798129  by  memtkmcc : Run extra Verify via frontend during Import task (BOA unfork)  #2798147  by  memtkmcc : Re-verify @server_master via frontend on migrate (BOA unfork)  #2798149  by  memtkmcc : Restore client_email option support on hostmaster install (BOA unfork)  #2798121  by  memtkmcc : Manage extra db GRANT for 127.0.0.1 to allow SSH tunneling for remote SQL access (BOA unfork)  #2798143  by  memtkmcc : Improve Clone task reliability with extra sub-tasks (BOA unfork)  Rename README.txt, to .md  #2762701  by  ergonlogic ,  memtkmcc : Set the file mode for local.settings.php  #2774487  by  helmo ,  memtkmcc : Fix command name'  #2762701  by  ergonlogic ,  memtkmcc : Fix 2.x to 3.x upgrade path.  #2774487  by  helmo : Document the provision_backup_suffix option.   Changes to Eldir since 7.x-3.7   #2786149  by  helmo ,  jacob.embree : Notice: Undefined variable: svg_logo in  page.tpl.php and other places  #2816159  by  tommycox : Made the table position relative.   Changes to hosting_civicrm since 7.x-3.7   #2821170  by  ergonlogic : Site-specific CiviCRM cron intervals missing  Merge pull request  #11  from mlutfy/7.x-3.x-phpunit-b  Add migration test with extensions, contributions, multilingual.  Merge pull request  #7  from mlutfy/7.x-3.x-issue2734933  Merge pull request  #10  from mlutfy/7.x-3.x-phpunit  tests: remove custom platform-install and exec drush instead, as for other commands (avoids having to bootstrap drush).  tests: improve output management when running exec, avoid weird async output issues.  drush_provision_civicrm_tests_run_remaining_tasks: call drush_provision_tests_run_remaining_tasks() from provision_tests (remove code duplication).  tests: PlatformInstall: use self::exec(), instead of exec().  tests: PlatformInstall: do not build the platform if it's already there (saves time).  tests: Command: esthetic log changes.  tests: SiteDelete: remove '@' from site alias (it's added later).  tests: fix/enable migrate tests.  tests: install/migrate: do not delete platforms on tearDown, since building platforms takes a long time.  tests: bootstrap: enable display of PHP errors so that we can see PHP errors in Jenkins output when tests run into a PHP fatal error.  tests: SiteUtils: refactor code and fix json_decode.  tests: Command: add huge drush_log() statements to help reading test output in Jenkins.  tests: add basic siteMigrate and upgrade tests.  phpunit: SiteInstall: fix function comment.  phpunit/installTest: fix class comment.  Merge branch '7.x-3.x' of github.com:mlutfy/hosting_civicrm into 7.x-3.x  Merge pull request  #9  from mlutfy/7.x-3.x-phpunit  makefiles: 4.6-D6: patch the civicrm.drush.inc file (for drush_civicrm_get_db_spec).  install: support non-standard mysql port and workaround CRM-19407.  phpunit: fix 4.7d7 install test (profile).  phpunit: setUpBeforeClass/tearDownAfterClass: call the parent, for drush includes.  phpunit: use setUpBeforeClass/tearDownAfterClass to avoid setup/teardown for each test (platforms only need to be created once). Also added a test for CiviCRM 4.7d7.  makefiles: bumping CiviCRM versions (4.6 and 4.7).  phpunit: split install test per-version, so that we have clearer results.  tests: add README.md  phpunit: Command: ignore the mbstring Drupal error.  phpunit: SiteDelete: put @ inside the arg, otherwise exec() adds a space between the @\u00a0and site.  phpunit: Command: ouput the error before throwing an exception.  phpunit: Command: drush outputs all status messages on stderr, so look for [error] instead.  Revert \"Fix false-positive warning on DB updates.\"  phpunit: Command: use Exception (avoid namespace fatal error).  .gitignore: add composer.lock  phpunit: fix namespacing.  phpunit: exec with symfony/process (forgot to add Command.php).  phpunit: exec with symfony/process.  phpunit: site delete: do not append .aegir.example.com twice.  phpunit: implement site install and delete.  Merge pull request  #8  from mlutfy/7.x-3.x-phpunit  phpunit: installTest: delete platforms in tearDown.  phpunit: removed hardcoded hostmaster env vars (was not used), and commented out temporarily install/remove site tests (not yet implemented).  Initial support for phpunit testing.  Fix false-positive warning on DB updates.  Fix for tests: fix d6-default profile name  #2734933 : only set CIVICRM_UPGRADE_ACTIVE when necessary.   Changes to Hosting Git since 7.x-3.7   #2778877 : Add reset hard option to git checkout task   Changes to hosting_remote_import since 7.x-3.7  None  Changes to Hosting Site Backup Manager since 7.x-3.7   #2788995  by  cvining : 'Get' fails for exporting large backup files   Changes to Aegir Hosting Tasks Extra since 7.x-3.7   #2796917  by  vishalkhialani : Removed extra \"s\" in \"aliases\".  #2778443  by  helmo ,  memtkmcc : refactor backup filename code to use core function", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.8/#known-issues", 
            "text": "When upgrading from Aegir 2.x be aware of  these notes    In Aegir 3.8, Nginx 1.9 (or later) is required, but the need to upgrade is fixed  with a patch in this issue, and thus remove in the next release . (On Debian Jessie, Nginx 1.9 is available in the backports)    Our combined  issue queues", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/3.0/", 
            "text": "Aegir 3.0\n\n\n\n\n\n\nAegir 3.0\n\n\nMajor changes\n\n\nMajor API changes\n\n\nInstalling and upgrading\n\n\nNeed help?\n\n\nFeatures and improvements\n\n\nKnown issues\n\n\n\n\n\n\n\n\n\n\nThe Aegir team is very pleased to announce the official release of Aegir 3.0. This release ships with significant stability improvements, Drush 6 and 7 support, improved SSL, subdirectory multisite and nginx support and much, much more!\n\n\nThis release marks the deprecation of the 2.x branch. We will continue to provide security releases through the end of 2015. All Aegir users are strongly encouraged to upgrade to the 3.0 release. The upgrade has been thoroughly tested and has worked reliably for us.\n\n\nUpgrading from Aegir 2.x moves Aegir from a Drupal 6 platform to a Drupal 7 one. The Debian package will migrate the front-end for you. While we have tested this with Aegir core, we strongly recommend disabling any contributed modules you may be running.\n\n\nWe have a very dynamic community of contrib developers, and various projects built atop Aegir. So if you were waiting for Aegir 3 to be stable, easy to install and production-ready, now is the time. The 3.x branch will be well supported as a lot of shops are running it in production already.\n\n\nMajor changes\n\n\nThe front-end has been ported to Drupal 7. We've also raised the minimum Drush version to 6.x, and the Debian package now installs Drush via Composer. Drush 7 is also supported.\n\n\nWe've added several \"Golden contrib\" modules to the distribution:\n\n\n\n\nHosting Remote Import\n\n\nHosting Site Backup Manager\n\n\nHosting Git\n\n\nHosting Tasks Extra\n\n\n\n\nWe're planning to add additional well-supported contrib modules over the course of the Aegir 3.x lifecycle. Along similar lines, we've removed hosting_platform_pathauto, as it's built-in now.\n\n\nWe've introduced initial Drupal 8 support, though this is still a work-in-progress. This mostly depends on Drupal 8 and Drush 8 stabilizing, before we'll be able to more fully manage Drupal 8 sites.\n\n\nAegir 3 now supports SNI for SSL.\n\n\nA number of significant bug fixes and stability improvements have been incorporated. Among them, we've added locking in our task queue, and improved backup reliability significantly.\n\n\nFor more information, please see the slidedeck from the presentation by ergonlogic and helmo at the Aegir Summit: \nhttp://community.aegirproject.org/sites/community.aegirproject.org/files...\n\n\nMajor API changes\n\n\nThe API has not significantly changed, though there are a few additions. See the current API docs in the various repositories for additional details.\n\n\nInstalling and upgrading\n\n\nThe canonical source of installation documentation is\n\n\nhttp://docs.aegirproject.org/en/3.x/install/\n\n\nWe're in the process of converting our docs, the old version is on \nhttp://community.aegirproject.org/installing\n We're tracking the conversion on \nhttps://www.drupal.org/node/2534734\n\n\nIn a similar fashion, the upgrade documentation is:\n\n\nhttp://community.aegirproject.org/upgrading\n\n\n\nWithin those sections you'll find step-by-step instructions for performing both \nmanual\n and \nautomatic\n upgrade processes.\n\n\nNote that you should upgrade to the latest 2.x release (currently: 2.4) before attempting the upgrade to 3.x..\n\n\nIt is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.\n\n\nNeed help?\n\n\nIf you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.\n\n\nConsult this page for more information: \nhttp://community.aegirproject.org/help\n\n\nThanks to our awesome \ncommunity\n for their help, support and encouragement as always! Enjoy the new release :)\n\n\nFeatures and improvements\n\n\nIn addition to the \"major changes\" mentioned above, the following should also be noted.\n\n\nChanges since 7.x-3.0-rc1:\n\n\n\n\n#2494121\n: Stop servers in clusters from sync'ing back to master.\n\n\nMake the upgrade script slightly more verbose\n\n\n#2377819\n: Gzipping backups suppresses file permissions errors\n\n\n\n\nKnown issues\n\n\n\n\nDrupal 8 support is (Chasing HEAD) not complete. You would need Drush 8 for that.\n\n\nDrush master has an issue on Debian Wheezy (\nhttps://www.drupal.org/node/2491941\n)\n\n\nWhen upgrading from 6.x-2.x enable the betterlogin module manually.\n\n\nIn Debian Jessie a systemd service file is missing, one is available in \nhttps://www.drupal.org/node/2347557\n but it's not build into the package.", 
            "title": "3.0"
        }, 
        {
            "location": "/release-notes/3.0/#aegir-30", 
            "text": "Aegir 3.0  Major changes  Major API changes  Installing and upgrading  Need help?  Features and improvements  Known issues      The Aegir team is very pleased to announce the official release of Aegir 3.0. This release ships with significant stability improvements, Drush 6 and 7 support, improved SSL, subdirectory multisite and nginx support and much, much more!  This release marks the deprecation of the 2.x branch. We will continue to provide security releases through the end of 2015. All Aegir users are strongly encouraged to upgrade to the 3.0 release. The upgrade has been thoroughly tested and has worked reliably for us.  Upgrading from Aegir 2.x moves Aegir from a Drupal 6 platform to a Drupal 7 one. The Debian package will migrate the front-end for you. While we have tested this with Aegir core, we strongly recommend disabling any contributed modules you may be running.  We have a very dynamic community of contrib developers, and various projects built atop Aegir. So if you were waiting for Aegir 3 to be stable, easy to install and production-ready, now is the time. The 3.x branch will be well supported as a lot of shops are running it in production already.", 
            "title": "Aegir 3.0"
        }, 
        {
            "location": "/release-notes/3.0/#major-changes", 
            "text": "The front-end has been ported to Drupal 7. We've also raised the minimum Drush version to 6.x, and the Debian package now installs Drush via Composer. Drush 7 is also supported.  We've added several \"Golden contrib\" modules to the distribution:   Hosting Remote Import  Hosting Site Backup Manager  Hosting Git  Hosting Tasks Extra   We're planning to add additional well-supported contrib modules over the course of the Aegir 3.x lifecycle. Along similar lines, we've removed hosting_platform_pathauto, as it's built-in now.  We've introduced initial Drupal 8 support, though this is still a work-in-progress. This mostly depends on Drupal 8 and Drush 8 stabilizing, before we'll be able to more fully manage Drupal 8 sites.  Aegir 3 now supports SNI for SSL.  A number of significant bug fixes and stability improvements have been incorporated. Among them, we've added locking in our task queue, and improved backup reliability significantly.  For more information, please see the slidedeck from the presentation by ergonlogic and helmo at the Aegir Summit:  http://community.aegirproject.org/sites/community.aegirproject.org/files...", 
            "title": "Major changes"
        }, 
        {
            "location": "/release-notes/3.0/#major-api-changes", 
            "text": "The API has not significantly changed, though there are a few additions. See the current API docs in the various repositories for additional details.", 
            "title": "Major API changes"
        }, 
        {
            "location": "/release-notes/3.0/#installing-and-upgrading", 
            "text": "The canonical source of installation documentation is  http://docs.aegirproject.org/en/3.x/install/  We're in the process of converting our docs, the old version is on  http://community.aegirproject.org/installing  We're tracking the conversion on  https://www.drupal.org/node/2534734  In a similar fashion, the upgrade documentation is:  http://community.aegirproject.org/upgrading  Within those sections you'll find step-by-step instructions for performing both  manual  and  automatic  upgrade processes.  Note that you should upgrade to the latest 2.x release (currently: 2.4) before attempting the upgrade to 3.x..  It is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.", 
            "title": "Installing and upgrading"
        }, 
        {
            "location": "/release-notes/3.0/#need-help", 
            "text": "If you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.  Consult this page for more information:  http://community.aegirproject.org/help  Thanks to our awesome  community  for their help, support and encouragement as always! Enjoy the new release :)", 
            "title": "Need help?"
        }, 
        {
            "location": "/release-notes/3.0/#features-and-improvements", 
            "text": "In addition to the \"major changes\" mentioned above, the following should also be noted.  Changes since 7.x-3.0-rc1:   #2494121 : Stop servers in clusters from sync'ing back to master.  Make the upgrade script slightly more verbose  #2377819 : Gzipping backups suppresses file permissions errors", 
            "title": "Features and improvements"
        }, 
        {
            "location": "/release-notes/3.0/#known-issues", 
            "text": "Drupal 8 support is (Chasing HEAD) not complete. You would need Drush 8 for that.  Drush master has an issue on Debian Wheezy ( https://www.drupal.org/node/2491941 )  When upgrading from 6.x-2.x enable the betterlogin module manually.  In Debian Jessie a systemd service file is missing, one is available in  https://www.drupal.org/node/2347557  but it's not build into the package.", 
            "title": "Known issues"
        }, 
        {
            "location": "/release-notes/3.1/", 
            "text": "Aegir 3.1\n\n\nThe Aegir team is proud to announce the second release in the stable 3.x branch!\n\n\nThis release ships with a security fix for Drupal core. Everyone is encouraged to upgrade.\n\n\nThis release ships with UI and backend fixes and improvements.\n\n\nChanges\n\n\nChanges to Hosting since 7.x-3.0\n:\n\n\n\n\n#2451731\n by \nhelmo\n: Fix user with only the aegir client role\n\n\n#2547209\n by \ngboudrias\n, \nergonlogic\n: Display execution time in task log\n\n\n#2407885\n by \nhelmo\n: refactor SSL forms\n\n\n#2040445\n by \nformatC'vt\n: Provide a safe way to remove a server from the system\n\n\n#2507397\n by \nsdrycroft\n: Allow form to be submitted\n\n\n#2459321\n by \nSocialNicheGuru\n, \nformatC'vt\n: Fix undefined index aliases in hosting_subdirs_site_form_validate\n\n\n#2538880\n by \nhelmo\n: Fix execution time says '0 seconds' for all tasks\n\n\n#2540174\n by \nhelmo\n: Only show key as disabled when it was ever enabled.\n\n\n#1585820\n: Make client feature checkbox readonly\n\n\n\n\nChanges to Provision since 7.x-3.0\n:\n\n\n\n\nAdd spacing for beter readability\n\n\n#1902542\n by \nhelmo\n: Rename template file\n\n\n#1902542\n by \nhelmo\n, \nformatC'vt\n: Review ini_set() block in default settings.php for D7\n\n\n#2539328\n by \ngboudrias\n: Fix nginx admin_menu problem (with cache setting?)\n\n\nRevert \"Issue \n#2539124\n by \nhelmo\n: Sudo example missing in minimalistic debian install\"\n\n\n#2539124\n by \nhelmo\n: Sudo example missing in minimalistic debian install\n\n\nNginx: Add support for s3/files/styles (s3fs)\n\n\n#2537756\n: Aegir3 Ubuntu fresh install\n\n\n\n\nChanges to Hostmaster since 7.x-3.0\n:\n\n\n\n\nUpdate ctools and betterlogin versions\n\n\nHave makefile build from releases.\n\n\n\n\nNew golden contrib releases\n:\n\n\n\n\nHosting Site Backup Manager\n\n\nHosting Tasks Extra\n\n\n\n\nKnown Issues\n\n\n\n\nProvision (Jessie installs): \n#2347557: No systemd service file for queue runner\n\n\nProvision: \n#1194602: [meta] Support the hosting of Drupal 8 sites\n\n\nHosting: \n#2459403: String data, right truncated: 1406 Data too long for column 'filename' at row 1: INSERT INTO {hosting_package_instance}\n\n\nHosting: \n#2069431:  Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled\n\n\nGit (contrib): \n#2541758: Trigger verify after \"git pull\" task when a site is on remote server", 
            "title": "3.1"
        }, 
        {
            "location": "/release-notes/3.1/#aegir-31", 
            "text": "The Aegir team is proud to announce the second release in the stable 3.x branch!  This release ships with a security fix for Drupal core. Everyone is encouraged to upgrade.  This release ships with UI and backend fixes and improvements.", 
            "title": "Aegir 3.1"
        }, 
        {
            "location": "/release-notes/3.1/#changes", 
            "text": "Changes to Hosting since 7.x-3.0 :   #2451731  by  helmo : Fix user with only the aegir client role  #2547209  by  gboudrias ,  ergonlogic : Display execution time in task log  #2407885  by  helmo : refactor SSL forms  #2040445  by  formatC'vt : Provide a safe way to remove a server from the system  #2507397  by  sdrycroft : Allow form to be submitted  #2459321  by  SocialNicheGuru ,  formatC'vt : Fix undefined index aliases in hosting_subdirs_site_form_validate  #2538880  by  helmo : Fix execution time says '0 seconds' for all tasks  #2540174  by  helmo : Only show key as disabled when it was ever enabled.  #1585820 : Make client feature checkbox readonly   Changes to Provision since 7.x-3.0 :   Add spacing for beter readability  #1902542  by  helmo : Rename template file  #1902542  by  helmo ,  formatC'vt : Review ini_set() block in default settings.php for D7  #2539328  by  gboudrias : Fix nginx admin_menu problem (with cache setting?)  Revert \"Issue  #2539124  by  helmo : Sudo example missing in minimalistic debian install\"  #2539124  by  helmo : Sudo example missing in minimalistic debian install  Nginx: Add support for s3/files/styles (s3fs)  #2537756 : Aegir3 Ubuntu fresh install   Changes to Hostmaster since 7.x-3.0 :   Update ctools and betterlogin versions  Have makefile build from releases.   New golden contrib releases :   Hosting Site Backup Manager  Hosting Tasks Extra", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.1/#known-issues", 
            "text": "Provision (Jessie installs):  #2347557: No systemd service file for queue runner  Provision:  #1194602: [meta] Support the hosting of Drupal 8 sites  Hosting:  #2459403: String data, right truncated: 1406 Data too long for column 'filename' at row 1: INSERT INTO {hosting_package_instance}  Hosting:  #2069431:  Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled  Git (contrib):  #2541758: Trigger verify after \"git pull\" task when a site is on remote server", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/3.2/", 
            "text": "Aegir 3.2\n\n\nThe Aegir team is proud to announce the third release in the stable 3.x branch!\n\n\nThis release ships with a security fix for Drupal core. Everyone is encouraged to upgrade.\n\n\nThis release ships with UI and backend fixes and improvements. In addition,\nhosting_civicrm support has been added to the Aegir distribution as part of the\n\"Golden contrib\" initiative. Note that this may entail additional manual\nintervention during the upgrade to 3.2, if you have already bee using CiviCRM\nsupport in Aegir 3. See \"Known Issues\" below for details.\n\n\nChanges\n\n\nChanges to Hosting since 7.x-3.1\n\n\n\n\n#1241500\n by \nhelmo\n: Non-destructive aegir user crontab edition\n\n\n#2568141\n: Add advanced to the example code\n\n\n#2568643\n by \nhelmo\n: code style cleanup\n\n\n#2568643\n by \nmartijnbraam\n: Set default message type to info\n\n\n#2568643\n by \nmartijnbraam\n: Give the last message in the task log the correct drush message type\n\n\n#2459403\n by \nhelmo\n: Fix typo in schema\n\n\n#2459403\n by \nchertzog\n, \nformatc'vt\n: String data, right truncated: 1406 Data too long for column 'filename'\n\n\nImprove function docs\n\n\nAdd an 'advanced' group for Hosting features.\n\n\n#2563241\n by \nergonlogic\n: Add CiviCRM support to Golden Contrib\n\n\n\n\nChanges to Provision since 7.x-3.1\n\n\n\n\n#2548993\n by \nformatc'vt\n: drush provision-delete does not respect --force argument\n\n\n#2547783\n by \nformatc'vt\n: Overwrite files and private folders on the remote server when we installing a new site\n\n\n#1066000\n by \nomega8cc\n, \nsteven-jones\n, \nhelmo\n: Local.settings.php can stop working due to file ownership/permissions\n\n\nNginx: Do not override main site variables in the subdir site config\n\n\nSwitch to standard profile for D8 tests.\n\n\nRaise log level to error\n\n\nAdd some debug output to hostmaster installation\n\n\n#2347557\n by \nhelmo\n, \ngboudrias\n: Add dh-systemd as a Debian build dependancy\n\n\nClear drush cache after installation\n\n\n#2347557\n by \nhelmo\n: Debian packaging of the systemd service file for the hosting queue daemon\n\n\nNginx: Do not hide X-Drupal-Cache-Tags and X-Drupal-Cache headers\n\n\nImprove welcome email template.\n\n\n#2583119\n - Remove any remaining st() and t() and use Drush wrapper dt() everywhere\n\n\nKeep up with D8 core - the config dir is now named sync - https://www.drupal.org/node/2487588\n\n\nRevert \"Find profiles correctly in Drupal 8.\"\n\n\nFind profiles correctly in Drupal 8.\n\n\n#2580565\n: Only log errors when deleting files.\n\n\n#2578131\n: Make aegir3-cluster-slave conflict with other Debian packages\n\n\nNginx: Don't strip $args from $request_uri in redirects\n\n\nNginx: Add HTTP header to images derivatives\n\n\n#2571811\n: Create hostmaster platform with working_copy option via Debian\n\n\n#2571803\n: Provision new hostmaster platform on Debian 7.x-3.x to 7.x-3.x upgrades\n\n\nImprove comments\n\n\nUse shallow clones for testing.\n\n\n#2570389\n: Support Drush 7.\n\n\nSync PHP style for ini_set\n\n\nSync D6 and D7 settings.php templates.\n\n\nSync D8 and D7 settings.php templates.\n\n\n#2448809\n by \nmillaraj\n: SSL on slave server, touch(): Unable to create file\n\n\n#2562467\n: Adding mention of d() to the documentation blocks for the \"config alter\" hooks.\n\n\nFix for lintian error on OBS\n\n\nFix mail address in debian changelog\n\n\n\n\nChanges to Hostmaster since 7.x-3.1\n\n\n\n\nUpdate views to 3.12\n\n\n#2554087\n by \nm.stenta\n, \ncweagans\n: Regression: hostmaster-install --http_port=8080\n\n\n\n\nNew golden contrib releases\n:\n\n\n\n\nHosting Site Backup Manager\n\n\nHosting Tasks Extra\n\n\nHosting Git\n\n\nHosting Logs\n\n\nHosting CiviCRM\n\n\n\n\nKnown Issues\n\n\n\n\nProvision (Jessie installs): \n#2347557\n: No systemd service file for queue runner\n\n\nProvision: \n#1194602\n: [meta] Support the hosting of Drupal 8 sites (\"Status: Needs work\")\n\n\nHosting: \n#2069431\n: Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")\n\n\nGit (contrib): \n#2541758\n: Trigger verify after \"git pull\" task when a site is on remote server (\"Status: Needs work, Assigned to: formatC'vt\")\n\n\n\n\nhosting_civicrm\n\n\nIn this release, we have included hosting_civicrm in the Aegir distribution. In\npreparation, we merged back-end components into the front-end module. Aegir 3.x\nsupports this adding search paths in /var/aegir/.drush/drushrc.php. If you are\nalready running hosting_civicrm in Aegir 3.x with the provision_civicrm code\ndeployed in /var/aegir/.drush/provision_civicrm, then you should remove that\ndirectory prior to upgrading.\n\n\nOur combined \nissue queues", 
            "title": "3.2"
        }, 
        {
            "location": "/release-notes/3.2/#aegir-32", 
            "text": "The Aegir team is proud to announce the third release in the stable 3.x branch!  This release ships with a security fix for Drupal core. Everyone is encouraged to upgrade.  This release ships with UI and backend fixes and improvements. In addition,\nhosting_civicrm support has been added to the Aegir distribution as part of the\n\"Golden contrib\" initiative. Note that this may entail additional manual\nintervention during the upgrade to 3.2, if you have already bee using CiviCRM\nsupport in Aegir 3. See \"Known Issues\" below for details.", 
            "title": "Aegir 3.2"
        }, 
        {
            "location": "/release-notes/3.2/#changes", 
            "text": "Changes to Hosting since 7.x-3.1   #1241500  by  helmo : Non-destructive aegir user crontab edition  #2568141 : Add advanced to the example code  #2568643  by  helmo : code style cleanup  #2568643  by  martijnbraam : Set default message type to info  #2568643  by  martijnbraam : Give the last message in the task log the correct drush message type  #2459403  by  helmo : Fix typo in schema  #2459403  by  chertzog ,  formatc'vt : String data, right truncated: 1406 Data too long for column 'filename'  Improve function docs  Add an 'advanced' group for Hosting features.  #2563241  by  ergonlogic : Add CiviCRM support to Golden Contrib   Changes to Provision since 7.x-3.1   #2548993  by  formatc'vt : drush provision-delete does not respect --force argument  #2547783  by  formatc'vt : Overwrite files and private folders on the remote server when we installing a new site  #1066000  by  omega8cc ,  steven-jones ,  helmo : Local.settings.php can stop working due to file ownership/permissions  Nginx: Do not override main site variables in the subdir site config  Switch to standard profile for D8 tests.  Raise log level to error  Add some debug output to hostmaster installation  #2347557  by  helmo ,  gboudrias : Add dh-systemd as a Debian build dependancy  Clear drush cache after installation  #2347557  by  helmo : Debian packaging of the systemd service file for the hosting queue daemon  Nginx: Do not hide X-Drupal-Cache-Tags and X-Drupal-Cache headers  Improve welcome email template.  #2583119  - Remove any remaining st() and t() and use Drush wrapper dt() everywhere  Keep up with D8 core - the config dir is now named sync - https://www.drupal.org/node/2487588  Revert \"Find profiles correctly in Drupal 8.\"  Find profiles correctly in Drupal 8.  #2580565 : Only log errors when deleting files.  #2578131 : Make aegir3-cluster-slave conflict with other Debian packages  Nginx: Don't strip $args from $request_uri in redirects  Nginx: Add HTTP header to images derivatives  #2571811 : Create hostmaster platform with working_copy option via Debian  #2571803 : Provision new hostmaster platform on Debian 7.x-3.x to 7.x-3.x upgrades  Improve comments  Use shallow clones for testing.  #2570389 : Support Drush 7.  Sync PHP style for ini_set  Sync D6 and D7 settings.php templates.  Sync D8 and D7 settings.php templates.  #2448809  by  millaraj : SSL on slave server, touch(): Unable to create file  #2562467 : Adding mention of d() to the documentation blocks for the \"config alter\" hooks.  Fix for lintian error on OBS  Fix mail address in debian changelog   Changes to Hostmaster since 7.x-3.1   Update views to 3.12  #2554087  by  m.stenta ,  cweagans : Regression: hostmaster-install --http_port=8080   New golden contrib releases :   Hosting Site Backup Manager  Hosting Tasks Extra  Hosting Git  Hosting Logs  Hosting CiviCRM", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.2/#known-issues", 
            "text": "Provision (Jessie installs):  #2347557 : No systemd service file for queue runner  Provision:  #1194602 : [meta] Support the hosting of Drupal 8 sites (\"Status: Needs work\")  Hosting:  #2069431 : Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")  Git (contrib):  #2541758 : Trigger verify after \"git pull\" task when a site is on remote server (\"Status: Needs work, Assigned to: formatC'vt\")   hosting_civicrm  In this release, we have included hosting_civicrm in the Aegir distribution. In\npreparation, we merged back-end components into the front-end module. Aegir 3.x\nsupports this adding search paths in /var/aegir/.drush/drushrc.php. If you are\nalready running hosting_civicrm in Aegir 3.x with the provision_civicrm code\ndeployed in /var/aegir/.drush/provision_civicrm, then you should remove that\ndirectory prior to upgrading.  Our combined  issue queues", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/3.3/", 
            "text": "Aegir 3.3\n\n\nThe Aegir team is proud to announce the forth release in the stable 3.x branch!\n\n\nThis release ships with UI and backend fixes and improvements.\n\n\nChanges\n\n\nChanges to Hosting since 7.x-3.2\n\n\n\n\nUpdate Donate to the Aegir project page URL\n\n\nSwitch hosting_subdirs to 7.x\n\n\n#2652448\n: Ensure platform name is unique.\n\n\n#2641776\n by \nhelmo\n: Minor cleanup in cron code\n\n\n#2641776\n by \nhelmo\n: Preserve crontab on hosting-pause\n\n\nImprove check to avoid notice\n\n\ncode cleanup\n\n\n#2577419\n by \nhelmo\n: Show automatic domain alias on node view\n\n\n#2626544\n: Improve guarding against destructive tasks.\n\n\n#2621576\n by \ncaptainack\n: Unused SSL certificates not being removed\n\n\n#2621576\n by \ncaptainack\n: Code cleanup\n\n\n\n\nChanges to Provision since 7.x-3.2\n\n\n\n\n#2619158\n: Let upgrade.sh work with Drush 8\n\n\nNginx: Remove duplicate $args on redirects\n\n\nAdd override_slave_authority option to provision-verify command\n\n\nFix typo in upgrade.sh.txt\n\n\n#2619158\n: Switch to Drush 8 by default\n\n\n#2619158\n: Create debconf var for Drush version, as preparation for Drush 8\n\n\nRevert \"Issue \n#2595809\n by \nhelmo\n: Find (d8) profiles without a .profile\"\n\n\n#2595809\n by \nhelmo\n: Find (d8) profiles without a .profile\n\n\n#2613716\n by \ncaptainack\n, \nergonlogic\n: Cluster SSL not working for 2 apache-ssl servers\n\n\n#2617718\n by \nnpacker\n, \ngboudrias\n: Renaming site through Migrate doesn't remove old vhost or site folder\n\n\n\n\nChanges to Hostmaster since 7.x-3.2\n\n\n\n\nUpdate views to 3.13\n\n\n\n\nNew golden contrib releases\n:\n\n\n\n\nHosting Tasks Extra\n\n\nHosting Git\n\n\n\n\nKnown Issues\n\n\n\n\nHosting: \n#2625168\n: Drush 8.0.2 gives errors for Aegir, stay with 8.0.0 for now...\n\n\nProvision (Jessie installs): \n#2347557\n: systemd service file not enabled by default\n\n\nProvision: \n#1194602\n: [meta] Support the hosting of Drupal 8 sites (\"Status: Needs work\")\n\n\nHosting: \n#2069431\n: Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")\n\n\nGit (contrib): \n#2541758\n: Trigger verify after \"git pull\" task when a site is on remote server (\"Status: Needs work, Assigned to: formatC'vt\")\n\n\n\n\nOur combined \nissue queues", 
            "title": "3.3"
        }, 
        {
            "location": "/release-notes/3.3/#aegir-33", 
            "text": "The Aegir team is proud to announce the forth release in the stable 3.x branch!  This release ships with UI and backend fixes and improvements.", 
            "title": "Aegir 3.3"
        }, 
        {
            "location": "/release-notes/3.3/#changes", 
            "text": "Changes to Hosting since 7.x-3.2   Update Donate to the Aegir project page URL  Switch hosting_subdirs to 7.x  #2652448 : Ensure platform name is unique.  #2641776  by  helmo : Minor cleanup in cron code  #2641776  by  helmo : Preserve crontab on hosting-pause  Improve check to avoid notice  code cleanup  #2577419  by  helmo : Show automatic domain alias on node view  #2626544 : Improve guarding against destructive tasks.  #2621576  by  captainack : Unused SSL certificates not being removed  #2621576  by  captainack : Code cleanup   Changes to Provision since 7.x-3.2   #2619158 : Let upgrade.sh work with Drush 8  Nginx: Remove duplicate $args on redirects  Add override_slave_authority option to provision-verify command  Fix typo in upgrade.sh.txt  #2619158 : Switch to Drush 8 by default  #2619158 : Create debconf var for Drush version, as preparation for Drush 8  Revert \"Issue  #2595809  by  helmo : Find (d8) profiles without a .profile\"  #2595809  by  helmo : Find (d8) profiles without a .profile  #2613716  by  captainack ,  ergonlogic : Cluster SSL not working for 2 apache-ssl servers  #2617718  by  npacker ,  gboudrias : Renaming site through Migrate doesn't remove old vhost or site folder   Changes to Hostmaster since 7.x-3.2   Update views to 3.13   New golden contrib releases :   Hosting Tasks Extra  Hosting Git", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.3/#known-issues", 
            "text": "Hosting:  #2625168 : Drush 8.0.2 gives errors for Aegir, stay with 8.0.0 for now...  Provision (Jessie installs):  #2347557 : systemd service file not enabled by default  Provision:  #1194602 : [meta] Support the hosting of Drupal 8 sites (\"Status: Needs work\")  Hosting:  #2069431 : Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")  Git (contrib):  #2541758 : Trigger verify after \"git pull\" task when a site is on remote server (\"Status: Needs work, Assigned to: formatC'vt\")   Our combined  issue queues", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/3.4/", 
            "text": "Aegir 3.4\n\n\nThe Aegir team is proud to announce the fifth release in the stable 3.x branch!\n\n\nThis release ships with bug fixes relating to the shift to Drush 8. In particular, we now install a Drush 8 .phar in our Debian package, and have fixed some logging issues due to changes in Drush 8.0.2.\n\n\nDrush install from Debian package\n\n\nWe now follow the recommended Drush install procedure adain, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following:\n\n\n# debconf-set-selections aegir3-provision aegir/drush_version string 6.x\n# apt-get install aegir3-provision\n\n\n\nLikewise, to use the latest dev build of Drush (not recommended), you could run:\n\n\n# debconf-set-selections aegir3-provision aegir/drush_version string unstable\n# apt-get install aegir3-provision\n\n\n\nWe are considering packaging Drush separately again:\n\n\n\n\nIssue #2585275: Maintain Drush Debian packages\n\n\n\n\nChanges\n\n\nChanges to Hosting since 7.x-3.3\n\n\n\n\n#2625168\n: Fix Drush logging.\n\n\n\n\nChanges to Provision since 7.x-3.3\n\n\n\n\n#2619158\n: Switch to the latest Drush 8 phar by default.\n\n\n#2661474\n: Set COMPOSER_HOME hoping to bypass variations from XDG_CONFIG_HOME\n\n\n#2625168\n: Pin drush version to 8.0.0 until we can fix the logging issue in 8.0.2\n\n\n#2659920\n by \nbgm\n: Fix drush_log usage in Provision/Config.php when using custom templates\n\n\n\n\nKnown Issues\n\n\n\n\nProvision (Jessie installs): \n#2347557\n: systemd service file not enabled by default\n\n\nProvision: \n#1194602\n: [meta] Support the hosting of Drupal 8 sites (\"Status: Needs work\")\n\n\nHosting: \n#2069431\n: Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")\n\n\nGit (contrib): \n#2541758\n: Trigger verify after \"git pull\" task when a site is on remote server (\"Status: Needs work, Assigned to: formatC'vt\")\n\n\n\n\nOur combined \nissue queues", 
            "title": "3.4"
        }, 
        {
            "location": "/release-notes/3.4/#aegir-34", 
            "text": "The Aegir team is proud to announce the fifth release in the stable 3.x branch!  This release ships with bug fixes relating to the shift to Drush 8. In particular, we now install a Drush 8 .phar in our Debian package, and have fixed some logging issues due to changes in Drush 8.0.2.", 
            "title": "Aegir 3.4"
        }, 
        {
            "location": "/release-notes/3.4/#drush-install-from-debian-package", 
            "text": "We now follow the recommended Drush install procedure adain, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following:  # debconf-set-selections aegir3-provision aegir/drush_version string 6.x\n# apt-get install aegir3-provision  Likewise, to use the latest dev build of Drush (not recommended), you could run:  # debconf-set-selections aegir3-provision aegir/drush_version string unstable\n# apt-get install aegir3-provision  We are considering packaging Drush separately again:   Issue #2585275: Maintain Drush Debian packages", 
            "title": "Drush install from Debian package"
        }, 
        {
            "location": "/release-notes/3.4/#changes", 
            "text": "Changes to Hosting since 7.x-3.3   #2625168 : Fix Drush logging.   Changes to Provision since 7.x-3.3   #2619158 : Switch to the latest Drush 8 phar by default.  #2661474 : Set COMPOSER_HOME hoping to bypass variations from XDG_CONFIG_HOME  #2625168 : Pin drush version to 8.0.0 until we can fix the logging issue in 8.0.2  #2659920  by  bgm : Fix drush_log usage in Provision/Config.php when using custom templates", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.4/#known-issues", 
            "text": "Provision (Jessie installs):  #2347557 : systemd service file not enabled by default  Provision:  #1194602 : [meta] Support the hosting of Drupal 8 sites (\"Status: Needs work\")  Hosting:  #2069431 : Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")  Git (contrib):  #2541758 : Trigger verify after \"git pull\" task when a site is on remote server (\"Status: Needs work, Assigned to: formatC'vt\")   Our combined  issue queues", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/3.5/", 
            "text": "Aegir 3.5\n\n\nThe Aegir team is proud to announce the sixth release in the stable 3.x branch!\n\n\nThis release ships with bug fixes and a number of UI improvements.\n\n\nDrush install from Debian package\n\n\nWe now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following:\n\n\n# echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections\n# apt-get install aegir3-provision\n\n\n\nLikewise, to use the latest dev build of Drush (not recommended), you could run:\n\n\n# echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections\n# apt-get install aegir3-provision\n\n\n\nWe are considering packaging Drush separately again:\n\n\n\n\nIssue #2585275: Maintain Drush Debian packages\n\n\n\n\nInstalling and upgrading\n\n\nThe canonical source of installation documentation is\n\n\nhttp://docs.aegirproject.org/en/3.x/install/\n\n\nWithin those sections you'll find step-by-step instructions for performing both \nmanual\n and \nautomatic\n upgrade processes.\n\n\nIt is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.\n\n\nNeed help?\n\n\nIf you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.\n\n\nConsult this page for more information: \nhttp://docs.aegirproject.org/en/3.x/community\n\n\nThanks to our awesome \ncommunity\n for their help, support and encouragement as always! Enjoy the new release :)\n\n\nChanges\n\n\nChanges to Hosting since 7.x-3.4\n\n\n\n\nCode cleanup\n\n\nSpecify missing dependencies for Hosting Features.\n\n\nFix Hosting Features dependency handling.\n\n\n#2721949\n by \ncolan\n: Deprecate _hosting_get_enabled_platforms()\n\n\n#2720439\n by \ncolan\n: Add site autocompletion \n ID retrieval without loading nodes\n\n\n#2718715\n by \nfabsor\n: Allow sites to be put in multi-level sub directories\n\n\n#2150787\n by \nhelmo\n, \nergonlogic\n, \nzhangtaihao\n: Let Queue daemon catch errors, and reconnect\n\n\n#2150787\n by \nhelmo\n: Let the queued notice its lifetime if over\n\n\n#2150787\n by \nhelmo\n: Prevent tight loop when lock_acquire fails\n\n\n#2707157\n by \njon-pugh\n: hosting_get_hostmaster_site_nid() only works if your install profile is \"hostmaster\"\n\n\n#2714539\n: Put services list in a Vertical Tabset\n\n\n#2713537\n by \nomega8cc\n: Improve filtering to not allow to add duplicate site aliases\n\n\n#2713239\n by \njon-pugh\n: Implement $form_state in hook_validate()\n\n\nAdd important info about subdirs naming convention.\n\n\nFix for hosting_subdirs visibility\n\n\n#2709425\n Implementing field_extra_fields for hosting_site, hosting_server, and hosting_platform.\n\n\nMerge remote-tracking branch 'origin/2702715-server-views-handler' into 7.x-3.x\n\n\n#2709565\n by \njon-pugh\n: Convert function hosting_get_servers() to use db_select()\n\n\n#2702715\n: Setting 'hosting_server_handler_field_status' to extend 'hosting_field_handler_status'.\n\n\n#2702715\n: Fixing comment on base views handler \"hosting_field_handler_status\".\n\n\n#2702941\n by \ncolan\n: Link to Drush documentation returns a 404\n\n\n#2705093\n by \njon-pugh\n: Fix bad arguments in hook_view() implementations\n\n\n#2705713\n by \njon-pugh\n: hosting_client module shouldn't use \"include node.pages.inc\"\n\n\n#2705073\n by \njon-pugh\n: Moving hook_hosting_task_guarded_nodes() to hosting_site and hosting_platform modules\n\n\n#2610122\n by \njon-pugh\n: Circular Dependencies between hosting and hosting_site, etc should be removed\n\n\nIssue \n#2702715\n by \njon-pugh\n: Adding a new generic views handler handler hosting_field_handler_status, making hosting_site_handler_field_status and hosting_platform_handler_field_status extend it.\n\n\n#2702715\n by \njon-pugh\n: Switch Hosting Server views handler to not extend Hosting Site views handler.\n\n\nAdd comments to allow easier searching for hook name\n\n\n#2698519\n by \njon-pugh\n: Show an indicator that the database password is saved\n\n\n#2697147\n: Use forms API #states for Hosting Server Service selectors, and remove custom hosting_server.js\n\n\nLeft over D7 conversion\n\n\nadd hook invoke comment\n\n\nMove example module back-end code under hosting.\n\n\n#2238897\n: Disallow bulk site deletion is sites ought to be disabled before deletion.\n\n\nSkip batching of VBO actions.\n\n\n#2550745\n: Stop adding extra verify tasks automatically on VBO operations.\n\n\n#2625168\n by \nhelmo\n: Drush master changed logging\n\n\nAdd missing permissions in the hosting_server_list view.\n\n\n#2666926\n: Document the force option\n\n\n\n\nChanges to Provision since 7.x-3.4\n\n\n\n\nApache: Add Alias directive for /.well-known/acme-challenge for hosting_le support\n\n\nNginx: Update crawlers regex\n\n\nNginx: Sync custom SSL settings for BOA(unfork)\n\n\nNginx: Sync variables\n\n\nNginx: Sync subdir.tpl.php\n\n\nNginx: Use $aegir_root variable in templates\n\n\nNginx: Map /.well-known/acme-challenge to support hosting_le\n\n\nNginx: Add recommended HTTP headers\n\n\nNginx: Use ssl_chain_cert if available (via hosting_le)\n\n\nNginx: Use HTTP/2 if detected as supported\n\n\nNginx: Add HTTP/2 support detection\n\n\nWhitespace cleanup\n\n\nApache: Print redirect comments in vhosts to support SAN compatibility detection and autoconfiguration in hosting_le\n\n\n#2725771\n by \nauth\n: nginx 1.10 does not return nginx_is_modern == TRUE\n\n\nNginx: Fix for broken aliases redirects\n\n\nNginx: Use faster 301/302 redirects\n\n\n#2724273\n: Nginx -- Use 302 tmp redirect for web_disable_url\n\n\n#2724273\n: Disabled Nginx sites return 404 instead of \"Disabled\" message\n\n\n#2718437\n by \nsteven-jones\n: Options is always isset on a context\n\n\n#2723075\n: Skip hidden D8 profiles\n\n\nNginx: Sync subdirs config tpl\n\n\nNginx: Allow site specific PHP-FPM socket/version (BOA)\n\n\nNginx: Enable fastcgi_cache_lock\n\n\nNginx: Sync regex for protected paths with Drupal core\n\n\n#2720159\n by \nthomas-bosviel\n: Nginx SSL service doesn't generate vhost include file\n\n\nNginx: Set HTTP_HOST with $this-\nuri to avoid reverse order with multi-level subdirs\n\n\n#2718711\n by \nfabsor\n, \nomega8cc\n: Allow sites to be put in multi-level sub directories\n\n\n#2715599\n by \ncolan\n: Add experimental support for PHP 7\n\n\n#2718567\n by \nfabsor\n: Subdirectory records aren't generated properly in sites.php\n\n\n#2704291\n by \njon-pugh\n: Verify of a site with function \"hosting_get_features\" overwrites the \n~/.drush/drushrc.php\n file\n\n\nNginx: Do not silence cron requests in the access.log\n\n\nSilence logging about service_type being NULL, can be intended\n\n\n#2698125\n by \njon-pugh\n: Report the expected service class in the drush errors when it is missing\n\n\n#2701145\n by \njamesan\n: Add support for Drush 9.x\n\n\nDownload Drush directly to the desired location.\n\n\nNginx: Use $status in fastcgi_cache_key\n\n\nBump Drush version to 8.0.5\n\n\n#2667194\n by \nhelmo\n: Update upgrade.sh.txt to use phars for drush\n\n\nAdd variable to upgrade.sh\n\n\nUpdate links\n\n\nRemove failing D6 test ... since D6 is EOL\n\n\nFix build after example files were removed\n\n\nRemove the back-end components of example modules, as they've now been added to the front-end repos.\n\n\nNginx: Add letsencrypt support (work in progress)\n\n\n#2685575\n by \nnwom\n: whitelist xmlrpc.php when /etc/nginx/basic_nginx.conf ctrl file is present\n\n\nCode style + comments\n\n\nResolve the VERSION constant used in Git checkouts\n\n\nAdd more debug info when recursive file functions fail.\n\n\n#2557025\n by \ntom_spiers\n: Fix \nUnknown option: --profile.\n errors.\n\n\nNginx: error_page directive is not allowed in pseudo-location\n\n\nNginx: Workaround for broken autocomplete\n\n\nAdd explicit test to avoid needless error\n\n\n#2667210\n by \nbgm\n: Use $args sec filtering only in the extended config\n\n\n#2666926\n by \nhelmo\n: Add a test to create a custom verify task for the hostmaster site and place it in the queue.\n\n\nCompare versions before attempting to update drush\n\n\n#2666926\n: Syntax fixes\n\n\n#2666926\n: Document the force option\n\n\n#2666926\n: Test the hosting tasks queue\n\n\n#2661124\n by \nkristofferwiklund\n: D8 Site fails verification after db restore. (But site is working fine)\n\n\n\n\nChanges to Eldir since 7.x-3.4\n\n\n\n\n#2222979\n by \njeremyr\n: Update CSS\n\n\n\n\nKnown Issues\n\n\n\n\nDebian upgrade error 3.4 to 3.5 when hosting_git is enabled, see \n#2729891\n\n\nProvision (Jessie installs): \n#2347557\n: systemd service file not enabled by default\n\n\nHosting: \n#2069431\n: Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")\n\n\nDebian package version 3.5.1 started building the hostmaster platform from dev version of our modules\n\n\n\n\nOur combined \nissue queues", 
            "title": "3.5"
        }, 
        {
            "location": "/release-notes/3.5/#aegir-35", 
            "text": "The Aegir team is proud to announce the sixth release in the stable 3.x branch!  This release ships with bug fixes and a number of UI improvements.", 
            "title": "Aegir 3.5"
        }, 
        {
            "location": "/release-notes/3.5/#drush-install-from-debian-package", 
            "text": "We now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following:  # echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections\n# apt-get install aegir3-provision  Likewise, to use the latest dev build of Drush (not recommended), you could run:  # echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections\n# apt-get install aegir3-provision  We are considering packaging Drush separately again:   Issue #2585275: Maintain Drush Debian packages", 
            "title": "Drush install from Debian package"
        }, 
        {
            "location": "/release-notes/3.5/#installing-and-upgrading", 
            "text": "The canonical source of installation documentation is  http://docs.aegirproject.org/en/3.x/install/  Within those sections you'll find step-by-step instructions for performing both  manual  and  automatic  upgrade processes.  It is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.", 
            "title": "Installing and upgrading"
        }, 
        {
            "location": "/release-notes/3.5/#need-help", 
            "text": "If you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.  Consult this page for more information:  http://docs.aegirproject.org/en/3.x/community  Thanks to our awesome  community  for their help, support and encouragement as always! Enjoy the new release :)", 
            "title": "Need help?"
        }, 
        {
            "location": "/release-notes/3.5/#changes", 
            "text": "Changes to Hosting since 7.x-3.4   Code cleanup  Specify missing dependencies for Hosting Features.  Fix Hosting Features dependency handling.  #2721949  by  colan : Deprecate _hosting_get_enabled_platforms()  #2720439  by  colan : Add site autocompletion   ID retrieval without loading nodes  #2718715  by  fabsor : Allow sites to be put in multi-level sub directories  #2150787  by  helmo ,  ergonlogic ,  zhangtaihao : Let Queue daemon catch errors, and reconnect  #2150787  by  helmo : Let the queued notice its lifetime if over  #2150787  by  helmo : Prevent tight loop when lock_acquire fails  #2707157  by  jon-pugh : hosting_get_hostmaster_site_nid() only works if your install profile is \"hostmaster\"  #2714539 : Put services list in a Vertical Tabset  #2713537  by  omega8cc : Improve filtering to not allow to add duplicate site aliases  #2713239  by  jon-pugh : Implement $form_state in hook_validate()  Add important info about subdirs naming convention.  Fix for hosting_subdirs visibility  #2709425  Implementing field_extra_fields for hosting_site, hosting_server, and hosting_platform.  Merge remote-tracking branch 'origin/2702715-server-views-handler' into 7.x-3.x  #2709565  by  jon-pugh : Convert function hosting_get_servers() to use db_select()  #2702715 : Setting 'hosting_server_handler_field_status' to extend 'hosting_field_handler_status'.  #2702715 : Fixing comment on base views handler \"hosting_field_handler_status\".  #2702941  by  colan : Link to Drush documentation returns a 404  #2705093  by  jon-pugh : Fix bad arguments in hook_view() implementations  #2705713  by  jon-pugh : hosting_client module shouldn't use \"include node.pages.inc\"  #2705073  by  jon-pugh : Moving hook_hosting_task_guarded_nodes() to hosting_site and hosting_platform modules  #2610122  by  jon-pugh : Circular Dependencies between hosting and hosting_site, etc should be removed  Issue  #2702715  by  jon-pugh : Adding a new generic views handler handler hosting_field_handler_status, making hosting_site_handler_field_status and hosting_platform_handler_field_status extend it.  #2702715  by  jon-pugh : Switch Hosting Server views handler to not extend Hosting Site views handler.  Add comments to allow easier searching for hook name  #2698519  by  jon-pugh : Show an indicator that the database password is saved  #2697147 : Use forms API #states for Hosting Server Service selectors, and remove custom hosting_server.js  Left over D7 conversion  add hook invoke comment  Move example module back-end code under hosting.  #2238897 : Disallow bulk site deletion is sites ought to be disabled before deletion.  Skip batching of VBO actions.  #2550745 : Stop adding extra verify tasks automatically on VBO operations.  #2625168  by  helmo : Drush master changed logging  Add missing permissions in the hosting_server_list view.  #2666926 : Document the force option   Changes to Provision since 7.x-3.4   Apache: Add Alias directive for /.well-known/acme-challenge for hosting_le support  Nginx: Update crawlers regex  Nginx: Sync custom SSL settings for BOA(unfork)  Nginx: Sync variables  Nginx: Sync subdir.tpl.php  Nginx: Use $aegir_root variable in templates  Nginx: Map /.well-known/acme-challenge to support hosting_le  Nginx: Add recommended HTTP headers  Nginx: Use ssl_chain_cert if available (via hosting_le)  Nginx: Use HTTP/2 if detected as supported  Nginx: Add HTTP/2 support detection  Whitespace cleanup  Apache: Print redirect comments in vhosts to support SAN compatibility detection and autoconfiguration in hosting_le  #2725771  by  auth : nginx 1.10 does not return nginx_is_modern == TRUE  Nginx: Fix for broken aliases redirects  Nginx: Use faster 301/302 redirects  #2724273 : Nginx -- Use 302 tmp redirect for web_disable_url  #2724273 : Disabled Nginx sites return 404 instead of \"Disabled\" message  #2718437  by  steven-jones : Options is always isset on a context  #2723075 : Skip hidden D8 profiles  Nginx: Sync subdirs config tpl  Nginx: Allow site specific PHP-FPM socket/version (BOA)  Nginx: Enable fastcgi_cache_lock  Nginx: Sync regex for protected paths with Drupal core  #2720159  by  thomas-bosviel : Nginx SSL service doesn't generate vhost include file  Nginx: Set HTTP_HOST with $this- uri to avoid reverse order with multi-level subdirs  #2718711  by  fabsor ,  omega8cc : Allow sites to be put in multi-level sub directories  #2715599  by  colan : Add experimental support for PHP 7  #2718567  by  fabsor : Subdirectory records aren't generated properly in sites.php  #2704291  by  jon-pugh : Verify of a site with function \"hosting_get_features\" overwrites the  ~/.drush/drushrc.php  file  Nginx: Do not silence cron requests in the access.log  Silence logging about service_type being NULL, can be intended  #2698125  by  jon-pugh : Report the expected service class in the drush errors when it is missing  #2701145  by  jamesan : Add support for Drush 9.x  Download Drush directly to the desired location.  Nginx: Use $status in fastcgi_cache_key  Bump Drush version to 8.0.5  #2667194  by  helmo : Update upgrade.sh.txt to use phars for drush  Add variable to upgrade.sh  Update links  Remove failing D6 test ... since D6 is EOL  Fix build after example files were removed  Remove the back-end components of example modules, as they've now been added to the front-end repos.  Nginx: Add letsencrypt support (work in progress)  #2685575  by  nwom : whitelist xmlrpc.php when /etc/nginx/basic_nginx.conf ctrl file is present  Code style + comments  Resolve the VERSION constant used in Git checkouts  Add more debug info when recursive file functions fail.  #2557025  by  tom_spiers : Fix  Unknown option: --profile.  errors.  Nginx: error_page directive is not allowed in pseudo-location  Nginx: Workaround for broken autocomplete  Add explicit test to avoid needless error  #2667210  by  bgm : Use $args sec filtering only in the extended config  #2666926  by  helmo : Add a test to create a custom verify task for the hostmaster site and place it in the queue.  Compare versions before attempting to update drush  #2666926 : Syntax fixes  #2666926 : Document the force option  #2666926 : Test the hosting tasks queue  #2661124  by  kristofferwiklund : D8 Site fails verification after db restore. (But site is working fine)   Changes to Eldir since 7.x-3.4   #2222979  by  jeremyr : Update CSS", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.5/#known-issues", 
            "text": "Debian upgrade error 3.4 to 3.5 when hosting_git is enabled, see  #2729891  Provision (Jessie installs):  #2347557 : systemd service file not enabled by default  Hosting:  #2069431 : Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")  Debian package version 3.5.1 started building the hostmaster platform from dev version of our modules   Our combined  issue queues", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/3.6/", 
            "text": "Aegir 3.6\n\n\nThe Aegir team is proud to announce the seventh release in the stable 3.x branch!\n\n\nThis release ships with bug fixes and a number of UI improvements.\n\n\nDrush install from Debian package\n\n\nWe now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following before installing or upgrading the packages:\n\n\n# echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections\n\n\n\nLikewise, to use the latest dev build of Drush (not recommended), you could run:\n\n\n# echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections\n\n\n\nOr to ignore Drush during upgrades of the debian package:\n\n\n# echo aegir3-provision aegir/drush_version string ignore | debconf-set-selections\n\n\n\nWe are considering packaging Drush separately again:\n\n\n\n\nIssue #2585275: Maintain Drush Debian packages\n\n\n\n\nInstalling and upgrading\n\n\nThe canonical source of installation documentation is\n\n\nhttp://docs.aegirproject.org/en/3.x/install/\n\n\nWithin those sections you'll find step-by-step instructions for performing both \nmanual\n and \nautomatic\n upgrade processes.\n\n\nIt is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.\n\n\nNeed help?\n\n\nIf you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.\n\n\nConsult this page for more information: \nhttp://docs.aegirproject.org/en/3.x/community\n\n\nThanks to our awesome \ncommunity\n for their help, support and encouragement as always! Enjoy the new release :)\n\n\nChanges\n\n\nChanges to Hostmaster since 7.x-3.5\n\n\n\n\n#2750361\n by \nhelmo\n: Add exclusive and distribution_name info\n\n\nUpdate views to 3.14\n\n\n\n\nChanges to Hosting since 7.x-3.5\n\n\n\n\nCode style\n\n\n#2705097\n by \njon-pugh\n: Check for hosting_platform before querying hosting_platform table\n\n\n#2013719\n by \ncolan\n, \nergonlogic\n: Warn when missing service implementations.\n\n\nFixes \n#2691167\n: Notice: Undefined variable: rows in hosting_client_view()\n\n\nAdd hook docs in example modules.\n\n\n#2150787\n by \nhelmo\n, \nergonlogic\n, \nsteven-jones\n: Queue daemon give MySQL close error\n\n\nRefactor check to use hosting_get_hostmaster_site_nid function\n\n\n#2744975\n by \njeremyr\n: Fix missing closing div on Hosting confirm task form actions.\n\n\nFix watchdog syntax\n\n\n#2738587\n by \ntom_spiers\n: hosting_task_count_running always returns 0\n\n\n#2606700\n by \nergonlogic\n, \nm.stenta\n, \ntvl\n: Shared SSL cert deleted from {hosting_ssl_cert}\n\n\n#2734599\n by \nsteven-jones\n: Hosting SSL certificate not shown correctly\n\n\n#2732491\n by \nsteven-jones\n: Undefined variable in hosting_get_queues\n\n\nD7 form API change\n\n\nAdd timeout to queued waiting for db\n\n\n#2731609\n by \njavi.pl\n: Hosting SSL. Instalation error\n\n\n#2731681\n by \nsteven-jones\n: Unable to set falsey parameters in hosting_get_tasks\n\n\n\n\nChanges to Provision since 7.x-3.5\n\n\n\n\n#2754309\n: Add option to ignore drush version during deb install\n\n\nRevert \"Issue \n#2729891\n by \nhelmo\n: Fix Debian upgrade error 3.4 to 3.5 (with hosting_git enabled)\"\n\n\nFix more hook docs.\n\n\nFix hook documentation.\n\n\nMerge branch '2731471-backup-delete-warning' into 7.x-3.x\n\n\nFixing docblock for d() function.  You can now CTRL-click methods like d()-\nget_services() to go to the definition.\n\n\nexmplain new release.sh steps\n\n\nMerge remote-tracking branch 'origin/7.x-3.5.x' into 7.x-3.x\n\n\n#2731605\n by gboudrias - Hardcoded hosting_le code limits behavior with regards to the .well-known directory\n\n\n#2730977\n by \nmpv\n: 403 Forbidden for hosting_le acme challenges\n\n\nNginx: Fix for /.well-known/acme-challenge in subdir sites\n\n\nBump default Drush version in manual upgrade script\n\n\nUpdate debian/changelog for 3.5.1 mini release\n\n\n#2729891\n by \nhelmo\n: Fix Debian upgrade error 3.4 to 3.5 (with hosting_git enabled)\n\n\nAdd code to optinally make release tags for golden contrib\n\n\nMinor text changed to release.sh\n\n\nApache: Add Alias /.well-known/acme-challenge also in the SSL vhost\n\n\n\n\nChanges to Eldir since 7.x-3.5\n\n\n\n\n#2283159\n by \narosboro\n, \nsteven-jones\n: Increase task information info box width\n\n\n\n\nKnown Issues\n\n\n\n\nDebian upgrade error 3.4 to 3.5 when hosting_git is enabled, see \n#2729891\n\n\nWorkaround: Disable hosting_git beforehand.\n\n\n\n\n\n\nProvision (Jessie installs): \n#2347557\n: systemd service file not enabled by default\n\n\nHosting: \n#2069431\n: Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")\n\n\nCall to undefined function hosting_get_most_recent_task when using hosting_backup_queue \n#2755693\n\n\n\n\nOur combined \nissue queues", 
            "title": "3.6"
        }, 
        {
            "location": "/release-notes/3.6/#aegir-36", 
            "text": "The Aegir team is proud to announce the seventh release in the stable 3.x branch!  This release ships with bug fixes and a number of UI improvements.", 
            "title": "Aegir 3.6"
        }, 
        {
            "location": "/release-notes/3.6/#drush-install-from-debian-package", 
            "text": "We now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following before installing or upgrading the packages:  # echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections  Likewise, to use the latest dev build of Drush (not recommended), you could run:  # echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections  Or to ignore Drush during upgrades of the debian package:  # echo aegir3-provision aegir/drush_version string ignore | debconf-set-selections  We are considering packaging Drush separately again:   Issue #2585275: Maintain Drush Debian packages", 
            "title": "Drush install from Debian package"
        }, 
        {
            "location": "/release-notes/3.6/#installing-and-upgrading", 
            "text": "The canonical source of installation documentation is  http://docs.aegirproject.org/en/3.x/install/  Within those sections you'll find step-by-step instructions for performing both  manual  and  automatic  upgrade processes.  It is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.", 
            "title": "Installing and upgrading"
        }, 
        {
            "location": "/release-notes/3.6/#need-help", 
            "text": "If you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.  Consult this page for more information:  http://docs.aegirproject.org/en/3.x/community  Thanks to our awesome  community  for their help, support and encouragement as always! Enjoy the new release :)", 
            "title": "Need help?"
        }, 
        {
            "location": "/release-notes/3.6/#changes", 
            "text": "Changes to Hostmaster since 7.x-3.5   #2750361  by  helmo : Add exclusive and distribution_name info  Update views to 3.14   Changes to Hosting since 7.x-3.5   Code style  #2705097  by  jon-pugh : Check for hosting_platform before querying hosting_platform table  #2013719  by  colan ,  ergonlogic : Warn when missing service implementations.  Fixes  #2691167 : Notice: Undefined variable: rows in hosting_client_view()  Add hook docs in example modules.  #2150787  by  helmo ,  ergonlogic ,  steven-jones : Queue daemon give MySQL close error  Refactor check to use hosting_get_hostmaster_site_nid function  #2744975  by  jeremyr : Fix missing closing div on Hosting confirm task form actions.  Fix watchdog syntax  #2738587  by  tom_spiers : hosting_task_count_running always returns 0  #2606700  by  ergonlogic ,  m.stenta ,  tvl : Shared SSL cert deleted from {hosting_ssl_cert}  #2734599  by  steven-jones : Hosting SSL certificate not shown correctly  #2732491  by  steven-jones : Undefined variable in hosting_get_queues  D7 form API change  Add timeout to queued waiting for db  #2731609  by  javi.pl : Hosting SSL. Instalation error  #2731681  by  steven-jones : Unable to set falsey parameters in hosting_get_tasks   Changes to Provision since 7.x-3.5   #2754309 : Add option to ignore drush version during deb install  Revert \"Issue  #2729891  by  helmo : Fix Debian upgrade error 3.4 to 3.5 (with hosting_git enabled)\"  Fix more hook docs.  Fix hook documentation.  Merge branch '2731471-backup-delete-warning' into 7.x-3.x  Fixing docblock for d() function.  You can now CTRL-click methods like d()- get_services() to go to the definition.  exmplain new release.sh steps  Merge remote-tracking branch 'origin/7.x-3.5.x' into 7.x-3.x  #2731605  by gboudrias - Hardcoded hosting_le code limits behavior with regards to the .well-known directory  #2730977  by  mpv : 403 Forbidden for hosting_le acme challenges  Nginx: Fix for /.well-known/acme-challenge in subdir sites  Bump default Drush version in manual upgrade script  Update debian/changelog for 3.5.1 mini release  #2729891  by  helmo : Fix Debian upgrade error 3.4 to 3.5 (with hosting_git enabled)  Add code to optinally make release tags for golden contrib  Minor text changed to release.sh  Apache: Add Alias /.well-known/acme-challenge also in the SSL vhost   Changes to Eldir since 7.x-3.5   #2283159  by  arosboro ,  steven-jones : Increase task information info box width", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.6/#known-issues", 
            "text": "Debian upgrade error 3.4 to 3.5 when hosting_git is enabled, see  #2729891  Workaround: Disable hosting_git beforehand.    Provision (Jessie installs):  #2347557 : systemd service file not enabled by default  Hosting:  #2069431 : Form error message is confusing when trying to enable SSL when creating new site on a platform on a server without SSL enabled (\"Status: Needs review\")  Call to undefined function hosting_get_most_recent_task when using hosting_backup_queue  #2755693   Our combined  issue queues", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/3.7/", 
            "text": "Aegir 3.7\n\n\nThe Aegir team is proud to announce the eighth release in the stable 3.x branch!\n\n\nThis release ships with a security fix and a number of bug fixes and UI improvements.\n\n\nWith this release we also introduce a number of new tools to the ecosystem:\n\n\n\n\nSemi-official Docker Images: \nhub.docker.com/r/aegir/hostmaster\n - Use these images to launch Aegir in minutes. Use the included Docker-compose files to launch a cluster of containers. \n\n\nAegir Development Environment on Docker: \ngithub.com/aegir-project/development\n - Run one script to prepare all git repositories and launch Aegir on Docker.\n\n\nBehat Tests: \ngithub.com/aegir-project/tests\n New behavioural testing will ensure expected functionality from a user's perspective. Includes common scripts for Travis-CI, and tools to allow the same tests suite to run on all repositories. \n\n\nGitHub Repositories: \nHosting\n, \nProvision\n, and \nHostmaster\n now have mirrors on GitHub.com. This allows us to integrate with Travis and other services, and allows the community to submit changes in the form of Pull Requests.  Each pull request will be tested automatically using the Behat tests and Docker containers. This will enable much more rapid development as we progress through the major changes expected to come in Aegir 4.x. \n\n\nTravis-CI.org Testing: Extra testing is now automated by \nTravis CI\n, the table below can from now on be found on \nour GitHub tests repository\n where we intend to further implements these tests.\n\n\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\nLinks\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nProvision\n\n\nDrush commands\n\n\ndrupal.org/project/provision\n \n \ngithub.com/aegir-project/provision\n\n\n\n\n\n\n\n\nHosting\n\n\nDrupal Modules\n\n\ndrupal.org/project/hosting\n \n \ngithub.com/aegir-project/hosting\n\n\n\n\n\n\n\n\nHostmaster\n\n\nDrupal Install Profile\n\n\ndrupal.org/project/hostmaster\n \n \ngithub.com/aegir-project/hostmaster\n\n\n\n\n\n\n\n\nDockerfiles\n\n\nDocker image definitions. Used for all tests.\n\n\ngithub.com/aegir-project/dockerfiles\n \nhub.docker.com/r/aegir/hostmaster\n\n\n\n\n\n\n\n\nTests\n\n\nBehat tests and Travis tools\n\n\ngithub.com/aegir-project/tests\n\n\n\n\n\n\n\n\nDevelopment Environment\n\n\nLocal docker-based development environment.\n\n\ngithub.com/aegir-project/development\n\n\n\n\n\n\n\n\n\n\nDrush install from Debian package\n\n\nWe now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following before installing or upgrading the packages:\n\n\n# echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections\n\n\n\nLikewise, to use the latest dev build of Drush (not recommended), you could run:\n\n\n# echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections\n\n\n\nOr to ignore Drush during upgrades of the debian package:\n\n\n# echo aegir3-provision aegir/drush_version string ignore | debconf-set-selections\n\n\n\nWe are considering packaging Drush separately again:\n\n\n\n\nIssue #2585275: Maintain Drush Debian packages\n\n\n\n\nInstalling and upgrading\n\n\nThe canonical source of installation documentation is\n\n\nhttp://docs.aegirproject.org/en/3.x/install/\n\n\nWithin those sections you'll find step-by-step instructions for performing both \nmanual\n and \nautomatic\n upgrade processes.\n\n\nIt is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.\n\n\nNeed help?\n\n\nIf you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.\n\n\nConsult this page for more information: \nhttp://docs.aegirproject.org/en/3.x/community\n\n\nThanks to our awesome \ncommunity\n for their help, support and encouragement as always! Enjoy the new release :)\n\n\nChanges\n\n\nChanges to Hostmaster since 7.x-3.6\n\n\n\n\nMerge remote-tracking branch 'github/node-access-rebuild' into 7.x-3.x \nmeta\n\n\nMerge branch 'travis-support' of github.com:aegir-project/hostmaster into travis-support\n\n\n#2754657\n by \nhelmo\n: Reported installs for the hostmaster project is not 3\n\n\n\n\nChanges to Hosting since 7.x-3.6\n\n\n\n\nCleanup remaining D7 upgrade issue in node_access hooks.\n\n\n#2763509\n by \nbgm\n: Deprecate hosting_context_node_types()\n\n\nMerge pull request \n#1\n from aegir-project/travis-yml\n\n\n#2069431\n by \nhelmo\n: Do not show SSL form when SSL is not enabled on any server\n\n\ncode style\n\n\n#1405904\n by \nsteven-jones\n: Add optional HOSTING_QUEUE_TYPE_SPREAD\n\n\n#2212149\n by \njon-pugh\n: Improve task queue AJAX refresh\n\n\n#2779193\n by \njon-pugh\n: node/add/site?platform=123 doesn't default to platform 123 if it doesn't have Standard profile\n\n\n#2739011\n by \nsteven-jones\n: AJAX task log never stops loading more\n\n\nFixes \n#2771687\n: Respect modules' required parameter.\n\n\n#2765479\n: Notices after disabling module with extra tasks\n\n\n#2714049\n by \nsteven-jones\n: Pre-commit code style improvements\n\n\n#2730603\n by \nclemens.tolboom\n, \nsteven-jones\n: Implement hook_entity_property_info\n\n\n#2714561\n by \njon-pugh\n, \nhelmo\n: Add \"name\" property to HostingService classes to allow for human readable service selection\n\n\n#2474801\n: Partial Revert: Task cancellation broken - restore function\n\n\n\n\nChanges to Provision since 7.x-3.6\n\n\n\n\n#2738987\n by \nmillenniumtree\n, \nmemtkmcc\n: Nginx unknown directive etag\n\n\nAdding .travis.yml to provision repository (\nmeta\n)\n\n\n#2774487\n by \nhelmo\n: Enable using bz2 for backup files\n\n\nRevert \"Issue \n#1694792\n by \nhelmo\n: Allow provision-deploy to move a site to a platform with different module paths\"\n\n\n#1694792\n by \nhelmo\n: Allow provision-deploy to move a site to a platform with different module paths\n\n\n#2764111\n by \nhelmo\n, \nthomas-bosviel\n: Support for utf8mb4\n\n\n#2738983\n by \nmemtkmcc\n: Nginx unknown status variable\n\n\n#2764111\n by \nhelmo\n, \nthomas-bosviel\n: Support for utf8mb4 - extra check\n\n\n#2769587\n by \ncolan\n: Check for PHP 7 FPM sockets as well as in PHP 5.\n\n\n#2768725\n by \nmemtkmcc\n, \ncolan\n: Started blocking httpoxy attacks.\n\n\nAdd debian repo to vagrant file\n\n\n\n\nChanges to Eldir since 7.x-3.5\n\n\nNone\n\n\nChanges to hosting_civicrm since 7.x-3.5\n\n\n\n\n#2702365\n: Do not allow access to civicrm/custom directory.\n\n\n#2706879\n by \nhelmo\n: Add mandatory parameter to _civicrm_install_db()\n\n\n\n\nChanges to Hosting Git since 7.x-3.5\n\n\nNone\n\n\nChanges to hosting_remote_import since 7.x-3.1\n\n\n\n\n#2538788\n by \nkienan\n: Fix Aegir2 support for older versions of Drush.\n\n\n#2538788\n by \ngboudrias-and-ergonlogic\n: Allow imports from both Aegir 2 and 3 remotes.\n\n\n\n\nChanges to Hosting Site Backup Manager since 7.x-3.5\n\n\n\n\n#2756411\n by \nhelmo\n: Backup tasks are not being generated\n\n\n\n\nChanges to Aegir Hosting Tasks Extra since 7.x-3.5\n\n\n\n\n#2778443\n by \nhelmo\n: refactor backup filename code to use core function\n\n\n\n\nKnown Issues\n\n\n\n\nDebian upgrade error 3.4 to 3.5 when hosting_git is enabled, see \n#2729891\n\n\nWorkaround: Disable hosting_git beforehand.\n\n\n\n\n\n\nProvision (Jessie installs): \n#2347557\n: systemd service file not enabled by default\n\n\nWhen upgrading from Aegir 2.x be aware of \nthese notes\n\n\n\n\nOur combined \nissue queues", 
            "title": "3.7"
        }, 
        {
            "location": "/release-notes/3.7/#aegir-37", 
            "text": "The Aegir team is proud to announce the eighth release in the stable 3.x branch!  This release ships with a security fix and a number of bug fixes and UI improvements.  With this release we also introduce a number of new tools to the ecosystem:   Semi-official Docker Images:  hub.docker.com/r/aegir/hostmaster  - Use these images to launch Aegir in minutes. Use the included Docker-compose files to launch a cluster of containers.   Aegir Development Environment on Docker:  github.com/aegir-project/development  - Run one script to prepare all git repositories and launch Aegir on Docker.  Behat Tests:  github.com/aegir-project/tests  New behavioural testing will ensure expected functionality from a user's perspective. Includes common scripts for Travis-CI, and tools to allow the same tests suite to run on all repositories.   GitHub Repositories:  Hosting ,  Provision , and  Hostmaster  now have mirrors on GitHub.com. This allows us to integrate with Travis and other services, and allows the community to submit changes in the form of Pull Requests.  Each pull request will be tested automatically using the Behat tests and Docker containers. This will enable much more rapid development as we progress through the major changes expected to come in Aegir 4.x.   Travis-CI.org Testing: Extra testing is now automated by  Travis CI , the table below can from now on be found on  our GitHub tests repository  where we intend to further implements these tests.      Project  Description  Links  Status      Provision  Drush commands  drupal.org/project/provision     github.com/aegir-project/provision     Hosting  Drupal Modules  drupal.org/project/hosting     github.com/aegir-project/hosting     Hostmaster  Drupal Install Profile  drupal.org/project/hostmaster     github.com/aegir-project/hostmaster     Dockerfiles  Docker image definitions. Used for all tests.  github.com/aegir-project/dockerfiles   hub.docker.com/r/aegir/hostmaster     Tests  Behat tests and Travis tools  github.com/aegir-project/tests     Development Environment  Local docker-based development environment.  github.com/aegir-project/development", 
            "title": "Aegir 3.7"
        }, 
        {
            "location": "/release-notes/3.7/#drush-install-from-debian-package", 
            "text": "We now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following before installing or upgrading the packages:  # echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections  Likewise, to use the latest dev build of Drush (not recommended), you could run:  # echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections  Or to ignore Drush during upgrades of the debian package:  # echo aegir3-provision aegir/drush_version string ignore | debconf-set-selections  We are considering packaging Drush separately again:   Issue #2585275: Maintain Drush Debian packages", 
            "title": "Drush install from Debian package"
        }, 
        {
            "location": "/release-notes/3.7/#installing-and-upgrading", 
            "text": "The canonical source of installation documentation is  http://docs.aegirproject.org/en/3.x/install/  Within those sections you'll find step-by-step instructions for performing both  manual  and  automatic  upgrade processes.  It is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.", 
            "title": "Installing and upgrading"
        }, 
        {
            "location": "/release-notes/3.7/#need-help", 
            "text": "If you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.  Consult this page for more information:  http://docs.aegirproject.org/en/3.x/community  Thanks to our awesome  community  for their help, support and encouragement as always! Enjoy the new release :)", 
            "title": "Need help?"
        }, 
        {
            "location": "/release-notes/3.7/#changes", 
            "text": "Changes to Hostmaster since 7.x-3.6   Merge remote-tracking branch 'github/node-access-rebuild' into 7.x-3.x  meta  Merge branch 'travis-support' of github.com:aegir-project/hostmaster into travis-support  #2754657  by  helmo : Reported installs for the hostmaster project is not 3   Changes to Hosting since 7.x-3.6   Cleanup remaining D7 upgrade issue in node_access hooks.  #2763509  by  bgm : Deprecate hosting_context_node_types()  Merge pull request  #1  from aegir-project/travis-yml  #2069431  by  helmo : Do not show SSL form when SSL is not enabled on any server  code style  #1405904  by  steven-jones : Add optional HOSTING_QUEUE_TYPE_SPREAD  #2212149  by  jon-pugh : Improve task queue AJAX refresh  #2779193  by  jon-pugh : node/add/site?platform=123 doesn't default to platform 123 if it doesn't have Standard profile  #2739011  by  steven-jones : AJAX task log never stops loading more  Fixes  #2771687 : Respect modules' required parameter.  #2765479 : Notices after disabling module with extra tasks  #2714049  by  steven-jones : Pre-commit code style improvements  #2730603  by  clemens.tolboom ,  steven-jones : Implement hook_entity_property_info  #2714561  by  jon-pugh ,  helmo : Add \"name\" property to HostingService classes to allow for human readable service selection  #2474801 : Partial Revert: Task cancellation broken - restore function   Changes to Provision since 7.x-3.6   #2738987  by  millenniumtree ,  memtkmcc : Nginx unknown directive etag  Adding .travis.yml to provision repository ( meta )  #2774487  by  helmo : Enable using bz2 for backup files  Revert \"Issue  #1694792  by  helmo : Allow provision-deploy to move a site to a platform with different module paths\"  #1694792  by  helmo : Allow provision-deploy to move a site to a platform with different module paths  #2764111  by  helmo ,  thomas-bosviel : Support for utf8mb4  #2738983  by  memtkmcc : Nginx unknown status variable  #2764111  by  helmo ,  thomas-bosviel : Support for utf8mb4 - extra check  #2769587  by  colan : Check for PHP 7 FPM sockets as well as in PHP 5.  #2768725  by  memtkmcc ,  colan : Started blocking httpoxy attacks.  Add debian repo to vagrant file   Changes to Eldir since 7.x-3.5  None  Changes to hosting_civicrm since 7.x-3.5   #2702365 : Do not allow access to civicrm/custom directory.  #2706879  by  helmo : Add mandatory parameter to _civicrm_install_db()   Changes to Hosting Git since 7.x-3.5  None  Changes to hosting_remote_import since 7.x-3.1   #2538788  by  kienan : Fix Aegir2 support for older versions of Drush.  #2538788  by  gboudrias-and-ergonlogic : Allow imports from both Aegir 2 and 3 remotes.   Changes to Hosting Site Backup Manager since 7.x-3.5   #2756411  by  helmo : Backup tasks are not being generated   Changes to Aegir Hosting Tasks Extra since 7.x-3.5   #2778443  by  helmo : refactor backup filename code to use core function", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.7/#known-issues", 
            "text": "Debian upgrade error 3.4 to 3.5 when hosting_git is enabled, see  #2729891  Workaround: Disable hosting_git beforehand.    Provision (Jessie installs):  #2347557 : systemd service file not enabled by default  When upgrading from Aegir 2.x be aware of  these notes   Our combined  issue queues", 
            "title": "Known Issues"
        }, 
        {
            "location": "/release-notes/3.8/", 
            "text": "Aegir 3.8\n\n\nThe Aegir team is proud to announce a new release in the stable 3.x branch!\n\n\nThis release ships with a number of bug fixes and UI improvements.\n\n\nPlease note that we updated the GPG key used for our Debian repository, the following commands help update the key on your system.\n\n\ncurl http://debian.aegirproject.org/key.asc | sudo apt-key add -\nsudo apt-get update\n\n\n\n\nWith this release we also introduce a number of new tools to the ecosystem:\n\n\n\n\nTwo factor authentication, \nissue\n\n\nThe first stable release of the \nhosting_wordpress module\n. \nissue\n\n\nEarly work is being done on \nKubernetes container management\n to allow Aegir to host any containerized application, not just Drupal.\n\n\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\nLinks\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nProvision\n\n\nDrush commands\n\n\ndrupal.org/project/provision\n \n \ngithub.com/aegir-project/provision\n\n\n\n\n\n\n\n\nHosting\n\n\nDrupal Modules\n\n\ndrupal.org/project/hosting\n \n \ngithub.com/aegir-project/hosting\n\n\n\n\n\n\n\n\nHostmaster\n\n\nDrupal Install Profile\n\n\ndrupal.org/project/hostmaster\n \n \ngithub.com/aegir-project/hostmaster\n\n\n\n\n\n\n\n\nDockerfiles\n\n\nDocker image definitions. Used for all tests.\n\n\ngithub.com/aegir-project/dockerfiles\n \nhub.docker.com/r/aegir/hostmaster\n\n\n\n\n\n\n\n\nTests\n\n\nBehat tests and Travis tools\n\n\ngithub.com/aegir-project/tests\n\n\n\n\n\n\n\n\nDevelopment Environment\n\n\nLocal docker-based development environment.\n\n\ngithub.com/aegir-project/development\n\n\n\n\n\n\n\n\n\n\nDrush install from Debian package\n\n\nWe now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following before installing or upgrading the packages:\n\n\n# echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections\n\n\n\nLikewise, to use the latest dev build of Drush (not recommended), you could run:\n\n\n# echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections\n\n\n\nOr to ignore Drush during upgrades of the debian package:\n\n\n# echo aegir3-provision aegir/drush_version string ignore | debconf-set-selections\n\n\n\nWe are considering packaging Drush separately again:\n\n\n\n\nIssue #2585275: Maintain Drush Debian packages\n\n\n\n\nInstalling and upgrading\n\n\nThe canonical source of installation documentation is\n\n\nhttp://docs.aegirproject.org/en/3.x/install/\n\n\nWithin those sections you'll find step-by-step instructions for performing both \nmanual\n and \nautomatic\n upgrade processes.\n\n\nIt is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.\n\n\nNeed help?\n\n\nIf you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.\n\n\nConsult this page for more information: \nhttp://docs.aegirproject.org/en/3.x/community\n\n\nThanks to our awesome \ncommunity\n for their help, support and encouragement as always! Enjoy the new release :)\n\n\nChanges\n\n\nChanges to Hostmaster since 7.x-3.7\n\n\n\n\n#2734589\n by \nhelmo\n: Bundle two factor authentication - tfa\n\n\nUpdate ctools and entity module to their current versions\n\n\nrefactor travis code\n\n\nUpdate to the new ctools version\n\n\n\n\nChanges to Hosting since 7.x-3.7\n\n\n\n\n#2821365\n by \nneograph734\n, \nhelmo\n: Clients cannot create sites because of missing database options\n\n\n#2821366\n by \nneograph734\n: Hosting or hostmaster should suppress error messages by default\n\n\n#2792991\n: hostmaster site not re-verified after enabling feature\n\n\n#2811163\n by \ncolan\n: Switch to checking a node's ID via empty() as it may have not been set.\n\n\nExplain the old and new value for hook_hosting_task_update_status()\n\n\n#2730603\n: Correct options list function\n\n\nrefactor travis code\n\n\n#2697179\n: Only list allowed/unlocked platforms during platform migration.\n\n\nMerge pull request \n#5\n from aegir-project/specify-provision\n\n\nClone provision using the specified version.\n\n\n#1111254\n: Document the Hostmaster API\n\n\nreduce loglevel, nothing to warn about\n\n\n\n\nChanges to Provision since 7.x-3.7\n\n\n\n\n#2347557\n by \nhelmo\n, \ngboudrias\n: Enable the systemd hosting-queued\n\n\n#2757765\n by \nkarel010\n: Incompatible overrides in pack and cluster module\n\n\n#2819021\n by \ncolan\n, \nmemtkmcc\n: Template cleanup\n\n\n#2731471\n by \njon-pugh\n, \nergonlogic\n: Provision backup-delete command is too strict if it doesn't have \"backups\" passed to it\n\n\n#2762701\n by \nergonlogic\n, \nmemtkmcc\n, \nhelmo\n: Fix for minor updates, version_compare would give -1 == TRUE\n\n\nNginx: sync letsencrypt support in vhost.tpl.php (BOA unfork)\n\n\nNginx: sync letsencrypt support (BOA unfork)\n\n\nNginx: sync templates\n\n\nNginx: Sync subdir template\n\n\nNginx: Sync for ssl_dhparam and ssl_stapling\n\n\nNginx: Sync SSL server template\n\n\nNginx: Do not set ssl_stapling on the server level\n\n\nNginx: Do not set ssl_dhparam on the server level\n\n\n#2768869\n by \nmemtkmcc\n: Nginx fastcgi_cache_valid TTL logic is incorrect\n\n\nNginx: Improve fastcgi_cache_valid TTL settings\n\n\nIssue: \n#2791885\n Nginx: default FastCGI cache levels value may exhaust all inodes\n\n\n#2820747\n by \nmemtkmcc\n: Nginx - Support for Accelerated Mobile Pages (AMP)\n\n\n#2820486\n by \nmemtkmcc\n: Nginx - do not log media files requests\n\n\nNginx: Do not hardcode X-Frame-Options header \u2014 see \n#1056\n\n\nNginx: Fix for the add_header inheritance\n\n\n#2595809\n by \ncolan\n, \nhelmo\n: Find (d8) profiles without a .profile\n\n\n#2774029\n by \nergonlogic\n: Allow services to be disabled\n\n\n#2737785\n by \nergonlogic\n: Provide a stable location for Drush overrides\n\n\n#2811377\n by \nbgm\n: CiviCRM and Nginx: block access to the 'custom' directory\n\n\nrefactor travis code\n\n\n#2798127\n by \nmemtkmcc\n: Improve Migrate task reliability with extra sub-tasks and fixes (BOA unfork)\n\n\n#2798129\n by \nmemtkmcc\n: Run extra Verify via frontend during Import task (BOA unfork)\n\n\n#2798147\n by \nmemtkmcc\n: Re-verify @server_master via frontend on migrate (BOA unfork)\n\n\n#2798149\n by \nmemtkmcc\n: Restore client_email option support on hostmaster install (BOA unfork)\n\n\n#2798121\n by \nmemtkmcc\n: Manage extra db GRANT for 127.0.0.1 to allow SSH tunneling for remote SQL access (BOA unfork)\n\n\n#2798143\n by \nmemtkmcc\n: Improve Clone task reliability with extra sub-tasks (BOA unfork)\n\n\nRename README.txt, to .md\n\n\n#2762701\n by \nergonlogic\n, \nmemtkmcc\n: Set the file mode for local.settings.php\n\n\n#2774487\n by \nhelmo\n, \nmemtkmcc\n: Fix command name'\n\n\n#2762701\n by \nergonlogic\n, \nmemtkmcc\n: Fix 2.x to 3.x upgrade path.\n\n\n#2774487\n by \nhelmo\n: Document the provision_backup_suffix option.\n\n\n\n\nChanges to Eldir since 7.x-3.7\n\n\n\n\n#2786149\n by \nhelmo\n, \njacob.embree\n: Notice: Undefined variable: svg_logo in  page.tpl.php and other places\n\n\n#2816159\n by \ntommycox\n: Made the table position relative.\n\n\n\n\nChanges to hosting_civicrm since 7.x-3.7\n\n\n\n\n#2821170\n by \nergonlogic\n: Site-specific CiviCRM cron intervals missing\n\n\nMerge pull request \n#11\n from mlutfy/7.x-3.x-phpunit-b\n\n\nAdd migration test with extensions, contributions, multilingual.\n\n\nMerge pull request \n#7\n from mlutfy/7.x-3.x-issue2734933\n\n\nMerge pull request \n#10\n from mlutfy/7.x-3.x-phpunit\n\n\ntests: remove custom platform-install and exec drush instead, as for other commands (avoids having to bootstrap drush).\n\n\ntests: improve output management when running exec, avoid weird async output issues.\n\n\ndrush_provision_civicrm_tests_run_remaining_tasks: call drush_provision_tests_run_remaining_tasks() from provision_tests (remove code duplication).\n\n\ntests: PlatformInstall: use self::exec(), instead of exec().\n\n\ntests: PlatformInstall: do not build the platform if it's already there (saves time).\n\n\ntests: Command: esthetic log changes.\n\n\ntests: SiteDelete: remove '@' from site alias (it's added later).\n\n\ntests: fix/enable migrate tests.\n\n\ntests: install/migrate: do not delete platforms on tearDown, since building platforms takes a long time.\n\n\ntests: bootstrap: enable display of PHP errors so that we can see PHP errors in Jenkins output when tests run into a PHP fatal error.\n\n\ntests: SiteUtils: refactor code and fix json_decode.\n\n\ntests: Command: add huge drush_log() statements to help reading test output in Jenkins.\n\n\ntests: add basic siteMigrate and upgrade tests.\n\n\nphpunit: SiteInstall: fix function comment.\n\n\nphpunit/installTest: fix class comment.\n\n\nMerge branch '7.x-3.x' of github.com:mlutfy/hosting_civicrm into 7.x-3.x\n\n\nMerge pull request \n#9\n from mlutfy/7.x-3.x-phpunit\n\n\nmakefiles: 4.6-D6: patch the civicrm.drush.inc file (for drush_civicrm_get_db_spec).\n\n\ninstall: support non-standard mysql port and workaround CRM-19407.\n\n\nphpunit: fix 4.7d7 install test (profile).\n\n\nphpunit: setUpBeforeClass/tearDownAfterClass: call the parent, for drush includes.\n\n\nphpunit: use setUpBeforeClass/tearDownAfterClass to avoid setup/teardown for each test (platforms only need to be created once). Also added a test for CiviCRM 4.7d7.\n\n\nmakefiles: bumping CiviCRM versions (4.6 and 4.7).\n\n\nphpunit: split install test per-version, so that we have clearer results.\n\n\ntests: add README.md\n\n\nphpunit: Command: ignore the mbstring Drupal error.\n\n\nphpunit: SiteDelete: put @ inside the arg, otherwise exec() adds a space between the @\u00a0and site.\n\n\nphpunit: Command: ouput the error before throwing an exception.\n\n\nphpunit: Command: drush outputs all status messages on stderr, so look for [error] instead.\n\n\nRevert \"Fix false-positive warning on DB updates.\"\n\n\nphpunit: Command: use Exception (avoid namespace fatal error).\n\n\n.gitignore: add composer.lock\n\n\nphpunit: fix namespacing.\n\n\nphpunit: exec with symfony/process (forgot to add Command.php).\n\n\nphpunit: exec with symfony/process.\n\n\nphpunit: site delete: do not append .aegir.example.com twice.\n\n\nphpunit: implement site install and delete.\n\n\nMerge pull request \n#8\n from mlutfy/7.x-3.x-phpunit\n\n\nphpunit: installTest: delete platforms in tearDown.\n\n\nphpunit: removed hardcoded hostmaster env vars (was not used), and commented out temporarily install/remove site tests (not yet implemented).\n\n\nInitial support for phpunit testing.\n\n\nFix false-positive warning on DB updates.\n\n\nFix for tests: fix d6-default profile name\n\n\n#2734933\n: only set CIVICRM_UPGRADE_ACTIVE when necessary.\n\n\n\n\nChanges to Hosting Git since 7.x-3.7\n\n\n\n\n#2778877\n: Add reset hard option to git checkout task\n\n\n\n\nChanges to hosting_remote_import since 7.x-3.7\n\n\nNone\n\n\nChanges to Hosting Site Backup Manager since 7.x-3.7\n\n\n\n\n#2788995\n by \ncvining\n: 'Get' fails for exporting large backup files\n\n\n\n\nChanges to Aegir Hosting Tasks Extra since 7.x-3.7\n\n\n\n\n#2796917\n by \nvishalkhialani\n: Removed extra \"s\" in \"aliases\".\n\n\n#2778443\n by \nhelmo\n, \nmemtkmcc\n: refactor backup filename code to use core function\n\n\n\n\nKnown Issues\n\n\n\n\n\n\nWhen upgrading from Aegir 2.x be aware of \nthese notes\n\n\n\n\n\n\nIn Aegir 3.8, Nginx 1.9 (or later) is required, but the need to upgrade is fixed \nwith a patch in this issue, and thus remove in the next release\n. (On Debian Jessie, Nginx 1.9 is available in the backports)\n\n\n\n\n\n\nOur combined \nissue queues", 
            "title": "3.8"
        }, 
        {
            "location": "/release-notes/3.8/#aegir-38", 
            "text": "The Aegir team is proud to announce a new release in the stable 3.x branch!  This release ships with a number of bug fixes and UI improvements.  Please note that we updated the GPG key used for our Debian repository, the following commands help update the key on your system.  curl http://debian.aegirproject.org/key.asc | sudo apt-key add -\nsudo apt-get update  With this release we also introduce a number of new tools to the ecosystem:   Two factor authentication,  issue  The first stable release of the  hosting_wordpress module .  issue  Early work is being done on  Kubernetes container management  to allow Aegir to host any containerized application, not just Drupal.      Project  Description  Links  Status      Provision  Drush commands  drupal.org/project/provision     github.com/aegir-project/provision     Hosting  Drupal Modules  drupal.org/project/hosting     github.com/aegir-project/hosting     Hostmaster  Drupal Install Profile  drupal.org/project/hostmaster     github.com/aegir-project/hostmaster     Dockerfiles  Docker image definitions. Used for all tests.  github.com/aegir-project/dockerfiles   hub.docker.com/r/aegir/hostmaster     Tests  Behat tests and Travis tools  github.com/aegir-project/tests     Development Environment  Local docker-based development environment.  github.com/aegir-project/development", 
            "title": "Aegir 3.8"
        }, 
        {
            "location": "/release-notes/3.8/#drush-install-from-debian-package", 
            "text": "We now follow the recommended Drush install procedure again, and use the latest published .phar by default. However, we do make alternative Drush versions available. To install the lastest Drush 6 from composer (as we did prior to Aegir 3.3), you can run the following before installing or upgrading the packages:  # echo aegir3-provision aegir/drush_version string 6.x | debconf-set-selections  Likewise, to use the latest dev build of Drush (not recommended), you could run:  # echo aegir3-provision aegir/drush_version string unstable | debconf-set-selections  Or to ignore Drush during upgrades of the debian package:  # echo aegir3-provision aegir/drush_version string ignore | debconf-set-selections  We are considering packaging Drush separately again:   Issue #2585275: Maintain Drush Debian packages", 
            "title": "Drush install from Debian package"
        }, 
        {
            "location": "/release-notes/3.8/#installing-and-upgrading", 
            "text": "The canonical source of installation documentation is  http://docs.aegirproject.org/en/3.x/install/  Within those sections you'll find step-by-step instructions for performing both  manual  and  automatic  upgrade processes.  It is still imperative that you read the upgrade path and version-specific information and follow all version-specific upgrade instructions before trying to run the upgrade script or manual upgrade.", 
            "title": "Installing and upgrading"
        }, 
        {
            "location": "/release-notes/3.8/#need-help", 
            "text": "If you struggle to install or upgrade your Aegir system, you have a number of options available to you for getting help.  Consult this page for more information:  http://docs.aegirproject.org/en/3.x/community  Thanks to our awesome  community  for their help, support and encouragement as always! Enjoy the new release :)", 
            "title": "Need help?"
        }, 
        {
            "location": "/release-notes/3.8/#changes", 
            "text": "Changes to Hostmaster since 7.x-3.7   #2734589  by  helmo : Bundle two factor authentication - tfa  Update ctools and entity module to their current versions  refactor travis code  Update to the new ctools version   Changes to Hosting since 7.x-3.7   #2821365  by  neograph734 ,  helmo : Clients cannot create sites because of missing database options  #2821366  by  neograph734 : Hosting or hostmaster should suppress error messages by default  #2792991 : hostmaster site not re-verified after enabling feature  #2811163  by  colan : Switch to checking a node's ID via empty() as it may have not been set.  Explain the old and new value for hook_hosting_task_update_status()  #2730603 : Correct options list function  refactor travis code  #2697179 : Only list allowed/unlocked platforms during platform migration.  Merge pull request  #5  from aegir-project/specify-provision  Clone provision using the specified version.  #1111254 : Document the Hostmaster API  reduce loglevel, nothing to warn about   Changes to Provision since 7.x-3.7   #2347557  by  helmo ,  gboudrias : Enable the systemd hosting-queued  #2757765  by  karel010 : Incompatible overrides in pack and cluster module  #2819021  by  colan ,  memtkmcc : Template cleanup  #2731471  by  jon-pugh ,  ergonlogic : Provision backup-delete command is too strict if it doesn't have \"backups\" passed to it  #2762701  by  ergonlogic ,  memtkmcc ,  helmo : Fix for minor updates, version_compare would give -1 == TRUE  Nginx: sync letsencrypt support in vhost.tpl.php (BOA unfork)  Nginx: sync letsencrypt support (BOA unfork)  Nginx: sync templates  Nginx: Sync subdir template  Nginx: Sync for ssl_dhparam and ssl_stapling  Nginx: Sync SSL server template  Nginx: Do not set ssl_stapling on the server level  Nginx: Do not set ssl_dhparam on the server level  #2768869  by  memtkmcc : Nginx fastcgi_cache_valid TTL logic is incorrect  Nginx: Improve fastcgi_cache_valid TTL settings  Issue:  #2791885  Nginx: default FastCGI cache levels value may exhaust all inodes  #2820747  by  memtkmcc : Nginx - Support for Accelerated Mobile Pages (AMP)  #2820486  by  memtkmcc : Nginx - do not log media files requests  Nginx: Do not hardcode X-Frame-Options header \u2014 see  #1056  Nginx: Fix for the add_header inheritance  #2595809  by  colan ,  helmo : Find (d8) profiles without a .profile  #2774029  by  ergonlogic : Allow services to be disabled  #2737785  by  ergonlogic : Provide a stable location for Drush overrides  #2811377  by  bgm : CiviCRM and Nginx: block access to the 'custom' directory  refactor travis code  #2798127  by  memtkmcc : Improve Migrate task reliability with extra sub-tasks and fixes (BOA unfork)  #2798129  by  memtkmcc : Run extra Verify via frontend during Import task (BOA unfork)  #2798147  by  memtkmcc : Re-verify @server_master via frontend on migrate (BOA unfork)  #2798149  by  memtkmcc : Restore client_email option support on hostmaster install (BOA unfork)  #2798121  by  memtkmcc : Manage extra db GRANT for 127.0.0.1 to allow SSH tunneling for remote SQL access (BOA unfork)  #2798143  by  memtkmcc : Improve Clone task reliability with extra sub-tasks (BOA unfork)  Rename README.txt, to .md  #2762701  by  ergonlogic ,  memtkmcc : Set the file mode for local.settings.php  #2774487  by  helmo ,  memtkmcc : Fix command name'  #2762701  by  ergonlogic ,  memtkmcc : Fix 2.x to 3.x upgrade path.  #2774487  by  helmo : Document the provision_backup_suffix option.   Changes to Eldir since 7.x-3.7   #2786149  by  helmo ,  jacob.embree : Notice: Undefined variable: svg_logo in  page.tpl.php and other places  #2816159  by  tommycox : Made the table position relative.   Changes to hosting_civicrm since 7.x-3.7   #2821170  by  ergonlogic : Site-specific CiviCRM cron intervals missing  Merge pull request  #11  from mlutfy/7.x-3.x-phpunit-b  Add migration test with extensions, contributions, multilingual.  Merge pull request  #7  from mlutfy/7.x-3.x-issue2734933  Merge pull request  #10  from mlutfy/7.x-3.x-phpunit  tests: remove custom platform-install and exec drush instead, as for other commands (avoids having to bootstrap drush).  tests: improve output management when running exec, avoid weird async output issues.  drush_provision_civicrm_tests_run_remaining_tasks: call drush_provision_tests_run_remaining_tasks() from provision_tests (remove code duplication).  tests: PlatformInstall: use self::exec(), instead of exec().  tests: PlatformInstall: do not build the platform if it's already there (saves time).  tests: Command: esthetic log changes.  tests: SiteDelete: remove '@' from site alias (it's added later).  tests: fix/enable migrate tests.  tests: install/migrate: do not delete platforms on tearDown, since building platforms takes a long time.  tests: bootstrap: enable display of PHP errors so that we can see PHP errors in Jenkins output when tests run into a PHP fatal error.  tests: SiteUtils: refactor code and fix json_decode.  tests: Command: add huge drush_log() statements to help reading test output in Jenkins.  tests: add basic siteMigrate and upgrade tests.  phpunit: SiteInstall: fix function comment.  phpunit/installTest: fix class comment.  Merge branch '7.x-3.x' of github.com:mlutfy/hosting_civicrm into 7.x-3.x  Merge pull request  #9  from mlutfy/7.x-3.x-phpunit  makefiles: 4.6-D6: patch the civicrm.drush.inc file (for drush_civicrm_get_db_spec).  install: support non-standard mysql port and workaround CRM-19407.  phpunit: fix 4.7d7 install test (profile).  phpunit: setUpBeforeClass/tearDownAfterClass: call the parent, for drush includes.  phpunit: use setUpBeforeClass/tearDownAfterClass to avoid setup/teardown for each test (platforms only need to be created once). Also added a test for CiviCRM 4.7d7.  makefiles: bumping CiviCRM versions (4.6 and 4.7).  phpunit: split install test per-version, so that we have clearer results.  tests: add README.md  phpunit: Command: ignore the mbstring Drupal error.  phpunit: SiteDelete: put @ inside the arg, otherwise exec() adds a space between the @\u00a0and site.  phpunit: Command: ouput the error before throwing an exception.  phpunit: Command: drush outputs all status messages on stderr, so look for [error] instead.  Revert \"Fix false-positive warning on DB updates.\"  phpunit: Command: use Exception (avoid namespace fatal error).  .gitignore: add composer.lock  phpunit: fix namespacing.  phpunit: exec with symfony/process (forgot to add Command.php).  phpunit: exec with symfony/process.  phpunit: site delete: do not append .aegir.example.com twice.  phpunit: implement site install and delete.  Merge pull request  #8  from mlutfy/7.x-3.x-phpunit  phpunit: installTest: delete platforms in tearDown.  phpunit: removed hardcoded hostmaster env vars (was not used), and commented out temporarily install/remove site tests (not yet implemented).  Initial support for phpunit testing.  Fix false-positive warning on DB updates.  Fix for tests: fix d6-default profile name  #2734933 : only set CIVICRM_UPGRADE_ACTIVE when necessary.   Changes to Hosting Git since 7.x-3.7   #2778877 : Add reset hard option to git checkout task   Changes to hosting_remote_import since 7.x-3.7  None  Changes to Hosting Site Backup Manager since 7.x-3.7   #2788995  by  cvining : 'Get' fails for exporting large backup files   Changes to Aegir Hosting Tasks Extra since 7.x-3.7   #2796917  by  vishalkhialani : Removed extra \"s\" in \"aliases\".  #2778443  by  helmo ,  memtkmcc : refactor backup filename code to use core function", 
            "title": "Changes"
        }, 
        {
            "location": "/release-notes/3.8/#known-issues", 
            "text": "When upgrading from Aegir 2.x be aware of  these notes    In Aegir 3.8, Nginx 1.9 (or later) is required, but the need to upgrade is fixed  with a patch in this issue, and thus remove in the next release . (On Debian Jessie, Nginx 1.9 is available in the backports)    Our combined  issue queues", 
            "title": "Known Issues"
        }
    ]
}